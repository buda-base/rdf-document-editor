{"version":3,"sources":["containers/PropertyContainer.tsx","atoms/common.ts","helpers/rdf/ns.ts","containers/ValueList.tsx","containers/EntityInEntitySelectorContainer.tsx","containers/EntitySelectorContainer.tsx","helpers/rdf/io.ts","containers/PropertyGroupContainer.tsx","containers/EntityEditContainer.tsx","containers/NewEntityContainer.tsx","containers/Dialog.tsx","containers/EntityCreationContainer.tsx","containers/EntityShapeChooserContainer.tsx","routes/layout/icons.jsx","helpers/lang.ts","helpers/observer.ts","helpers/rdf/types.ts","helpers/rdf/shapes.ts"],"names":["require","PropertyContainer","property","subject","embedded","force","editable","owner","topEntity","shape","siblingsPath","config","objectType","useState","css","setCss","Fragment","role","className","style","border","setCssClass","txt","add","includes","replace","RegExp","uiLangState","atom","key","default","uiLitLangState","uiReadyState","uiTabState","uiEditState","uiGroupState","noUndo","enabled","subjectUri","propertyPath","parentPath","noUndoRedo","prev","next","uiUndosState","sessionLoadedState","profileIdState","uiDisabledTabsState","userIdState","reloadEntityState","RIDprefixState","orderedByPropSelector","selectorFamily","get","args","order","unorderedList","_","orderBy","map","w","Subject","s","v","getAtomForProperty","k","Array","isArray","length","Number","value","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","i","initListAtom","n","shapes","uri","reduce","acc","nl","initStringAtom","initMapAtom","possiblePrefLabelsSelector","res","g","labels","canPushPrefLabelGroup","canPushPrefLabelGroups","subprops","Object","keys","names","allowPush","a","push","props","orderedNewValSelector","newVal","parentList","kint","toString","toCopySelector","list","val","set","filter","lit","savePopupState","ESfromRecoilSelector","entities","entitiesAtom","setEntities","findIndex","e","subjectQname","entityQname","ent","status","EditedEntityState","Error","errors","qname","id","state","newEntities","etag","undo","loadedUnsavedFromLocalStorage","NeedsSaving","Saved","hasError","forceRemove","removingFacet","startsWith","isUniqueTestSelector","checkUnique","siblings","siblingsAtom","vals","DASH_uri","DASH","rdf","OWL_uri","RDFS_uri","RDFS","SH_uri","SH","RDF_uri","RDF","SKOS_uri","SKOS","XSD_uri","XSD","FOAF_uri","RDE_uri","RDE","defaultPrefixToURI","dash","owl","rde","rdfs","sh","skos","xsd","foaf","PrefixMap","prefixToURI","URItoPrefix","setDefaultPrefixes","entries","prefix","setPrefixForURI","qnameFromUri","match","j","indexOf","lastIndexOf","localid","slice","namesp","lnameFromUri","namespaceFromUri","uriFromQname","uri_base","lnameFromQname","this","defaultPrefixMap","debug","replaceItemAtIndex","arr","index","newValue","removeItemAtIndex","MinimalAddButton","disable","undefined","onClick","ev","disabled","BlockAddButton","label","count","setN","width","display","boxShadow","pointerEvents","opacity","i18n","t","type","InputLabelProps","shrink","onChange","target","InputProps","inputProps","min","max","generateDefault","parent","RIDprefix","idToken","ObjectType","ResExt","Internal","ResInList","LitInList","Literal","ExtRDFResourceWithLabel","targetShape","generateSubnode","defaultValue","minCount","noneSelected","propIn","in","defaultValueLiL","LiteralWithId","language","datatype","ns","defaultLanguage","propInLit","Create","path","useRecoilState","sparqlString","setList","collecNode","RDFResource","node","collec","termType","elements","listOrCollec","uiLang","uiTab","setEdit","localStorage","getItem","useAuth0","getIdTokenClaims","nextVal","useRecoilValue","sortOnProperty","sortProps","properties","p","sortProp","minInclusive","maxInclusive","waitForNoHisto","addItem","event","noHisto","item","setImmediate","setTimeout","targetShapeLabels","targetClassPrefLabels","prefLabels","allowBatchManagement","ValueByLangToStrPrefLang","useStyles","makeStyles","theme","root","color","palette","secondary","main","EditLangString","globalError","updateEntityState","entity","editMD","setEditMD","keyboard","setKeyboard","canPushPrefLabel","allowPushToTopLevelLabel","getLangStringError","err","error","setError","useEffect","newError","inOtherEntity","window","location","href","preview","setPreview","useLayoutEffect","document","activeElement","inputRef","current","previewLiteral","padBot","singleLine","codeEdit","commands","icon","height","codePreview","hasKB","possibleLiteralLangs","l","useRef","keepFocus","focus","prefLabelAtom","setPrefLabels","alignItems","paddingBottom","position","newPrefLabels","found","copy","title","variant","multiline","spellCheck","lang","copyWithUpdatedValue","helperText","onFocus","onBlur","allowMarkDown","right","top","fontSize","justifyContent","cursor","str","selectionStart","selectionEnd","substring","insertChar","textareaProps","bold","italic","strikethrough","hr","divider","link","quote","code","image","unorderedListCommand","orderedListCommand","checkedListCommand","extraCommands","LangSelect","copyWithUpdatedLanguage","languages","langsWithDefault","select","minWidth","flexShrink","marginTop","option","some","EditString","pattern","timerPreview","changeCallback","clearTimeout","obj","errorMessage","getPatternError","getEmptyStringError","flexDirection","EditBool","padding","concat","EditInt","hasNoOtherValue","dt","minExclusive","maxExclusive","getIntError","valueInt","parseInt","xsdgYear","padStart","verticalAlign","rdflangString","xsdinteger","xsddecimal","xsdint","xsdboolean","intishTypeList","LiteralComponent","canDel","isUniqueValueAmongSiblings","isUniqueLang","create","listItem","undos","propLabel","helpMessage","newList","edit","classN","uniqueLang","readOnly","uniqueValueAmongSiblings","FacetComponent","subNode","lname","withDisplayPriority","withoutDisplayPriority","subprop","displayPriority","setForce","hasExtra","editClass","endsWith","classList","contains","stopPropagation","independentIdentifiers","resetNoHisto","show","description","ExtEntityComponent","extRes","idx","exists","nonEmptyList","maxCount","backgroundColor","borderRadius","resourceSelector","first","SelectComponent","canSelectNone","selectIdx","uiLitLang","possibleValues","getElementFromValue","checkActualValue","RDFResourceWithLabel","valueNotInList","pv","resForNewValue","r","span","ValueList","unsortedList","sortOnPath","orderedList","withOrder","newValNum","setESfromRecoil","hStatus","getHistoryStatus","canAdd","alreadyHasEmptyValue","removeFirst","useCallback","firstValueIsEmptyField","getUnitializedValues","setListAsync","oldList","addBtn","hasNonEmptyValue","isErrorValue","showLabel","scrollElem","group","scrollTo","left","behavior","hasEmptyExtEntityAsFirst","titleCase","toUpperCase","canPush","renderListElem","useMemo","nbvalues","flexWrap","ref","paddingRight","flexGrow","background","paper","defaultEntityLabelAtom","defaultFetchTtlHeaders","Headers","defaultPutTtlHeaders","shapesMap","EntityFetcher","shapeQname","unmounting","entityLoadingState","setEntityLoadingState","createEmpty","setEntity","setUiReady","sessionLoaded","setSessionLoaded","profileId","setCurrent","reloadEntity","setReloadEntity","setDisabled","reset","fetchResource","subj","getUserLocalEntities","localEntities","useLocal","confirm","store","ttl","defaultGraphURI","needsSaving","alert","entityUri","prefixMap","entityNode","getDocument","notFound","_entities","getUserMenuState","subjectLabelState","NotLoaded","preloadedLabel","resInfo","actualQname","Loading","prefLabel","message","retVal","redIcon","L","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","DraggableMarker","pos","setCoords","setPosition","markerRef","eventHandlers","dragend","marker","getLatLng","lat","lng","setLatLng","Marker","draggable","MapEventHandler","coords","redraw","useMapEvents","click","latlng","setView","getZoom","provider","googleMapsAPIKey","GoogleProvider","apiKey","OpenStreetMapProvider","searchControl","GeoSearchControl","showPopUp","showMarker","addControl","on","params","elem","querySelector","removeControl","PropertyGroupContainer","onGroupOpen","GISatoms","errorKeys","groupEd","setGroupEd","latProp","setLat","lngProp","setLng","setRedraw","zoom","unset","LatLng","isNaN","scrollMargin","gisPropertyGroup","overflow","MapContainer","center","LayersControl","BaseLayer","checked","name","TileLayer","url","EntityEditContainerMayUpdate","propertyQname","subnodeQname","snapshot","useRecoilSnapshot","setSubject","queryString","parse","search","decode","pp","getParentPath","getLoadable","contents","EntityEditContainerDoUpdate","objectQname","to","split","q","literals","decodeURIComponent","setProp","newObject","EntityEditContainer","setUndos","tab","setTab","entityObj","iconFromEntity","loadingState","setLoadingState","setShape","shapeNode","loadShape","getShapesDocument","ShapeFetcher","groups","accG","possiblePrefLabels","altLabelAtom","altLabels","init","clearInterval","setInterval","history","h","userId","save","Promise","resolve","defaultRef","graph","addNewValuestoStore","setUserLocalEntity","entityObjRef","fun","warning","setWarning","willSave","removeEventListener","preventDefault","returnValue","addEventListener","isEmpty","shapeLabel","checkPushNameAsPrefLabel","currentGroupName","newLabels","sameLanguage","previewLink","getPreviewLink","textAlign","toLowerCase","rel","NewEntityContainer","RID","setRID","TextField","possibleShapeRefs","marginLeft","MenuItem","fontStyle","fontWeight","Trans","i18nKey","components","marginRight","onKeyDown","alignSelf","marginBottom","Dialog422","React","open","setOpen","shaped","createNew","setCreateNew","loadNamed","setLoadNamed","newUrl","editUrl","Dialog","DialogTitle","named","DialogContent","DialogContentText","DialogActions","Button","textTransform","EntityCreationContainer","routerHistory","useHistory","entityCreator","pathname","EntityCreationContainerAlreadyOpen","EntityCreationContainerRoute","theEntity","EntityShapeChooserContainer","setEntityQname","entityFromList","find","possibleShapes","possibleShapeRefsForEntity","handleClick","MDIcon","src","AddIcon","AddCircleOutlineIcon","RemoveIcon","RemoveCircleOutlineIcon","vbl","prefLang","pL","values","cache","langs","updateHistory","prop","pop","splice","sub","subSubj","defaultGraphNode","rdfLitAsNumber","EntityGraphValues","Memoize","pathString","oldSubjectProps","newSubjectProps","idHash","Date","now","onGetInitialValues","onUpdateValues","isInitialized","propsUpdateEffect","setSelf","onSet","newValues","DefaultValue","listMode","collection","append","close","effects_UNSTABLE","dangerouslyAllowMutability","EntityGraph","topSubjectUri","connexGraph","labelProperties","defaultLabelProperties","descriptionProperties","defaultDescriptionProperties","getAtomForSubjectProperty","getValues","hasSubject","any","getPropValuesFromStore","directPathNode","fromRDFResExt","getPropResValuesFromPath","fromRDFResExtwData","addExtDataFromGraph","fromRDFSubNode","fromRDFSubs","subjectify","fromRDFResList","getPropResValues","fromRDFReswLabels","addLabelsFromGraph","fromRDFLits","hasListAsObject","fromRDFLitsList","getPropLitValuesFromList","getPropLitValues","fromRDFLitIDs","addIdToLitList","litList","resList","perLang","lits","each","isCollection","colls","inversePathNode","dflt","Boolean","labelProp","getPropValueOrNullByLang","en","data","_prefLabels","_description","_otherData","nanoid","start","lang1","lang2","shProperty","shGroup","shOrder","rdfsLabel","shName","shPath","dashEditor","shNode","dashListShape","dashEnumSelectEditor","shMessage","rdeDisplayPriority","shMinCount","shMinInclusive","shMinExclusive","shClass","shMaxCount","shMaxInclusive","shMaxExclusive","shDatatype","dashSingleLine","shTargetClass","shTargetObjectsOf","shTargetSubjectsOf","rdePropertyShapeType","rdeInternalShape","rdeExternalShape","rdeIgnoreShape","rdeClassIn","shIn","shInversePath","shUniqueLang","rdeReadOnly","rdeIdentifierPrefix","rdeAllowMarkDown","shNamespace","rdeDefaultLanguage","rdeDefaultValue","shPattern","rdeSortOnProperty","rdeAllowPushToTopLevelLabel","rdeIndependentIdentifiers","rdeSpecialPattern","rdeConnectIDs","rdeAllowBatchManagement","rdeCopyObjectsOfProperty","rdeUniqueValueAmongSiblings","rdfLangString","skosDefinition","rdfsComment","shDescription","sortByPropValue","nodelist","nodeUriToPropValue","ordern","asnum","sort","b","Path","invpaths","invpath","PropertyShape","pathNode","resFromShape","getPropValueByLang","getPropBooleanValue","getPropIntValue","getPropStringValue","getPropResValue","propNodes","resourcizeWithInit","nodes","getPropResValuesFromList","cl","propertyShapeType","editor","ResIgnore","NodeShape","PropertyGroup","propsingroup","targetClass","grouplist","nanoidCustom","customAlphabet","subshape","namespace"],"mappings":"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","file":"static/js/main.f213f9a0.chunk.js","sourcesContent":["import React, { useState, FC } from \"react\"\nimport { RDFResource, Subject, LiteralWithId, ObjectType } from \"../helpers/rdf/types\"\nimport { PropertyShape, NodeShape } from \"../helpers/rdf/shapes\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { uiLangState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport { atom, useRecoilState, atomFamily } from \"recoil\"\nimport ValueList from \"./ValueList\"\nimport * as rdf from \"rdflib\"\n\nconst debug = require(\"debug\")(\"rde:entity:property\")\n\nconst PropertyContainer: FC<{\n  property: PropertyShape\n  subject: Subject\n  embedded?: boolean\n  force?: boolean\n  editable: boolean\n  owner?: Subject\n  topEntity?: Subject\n  shape: NodeShape\n  siblingsPath?: string,\n  config: RDEConfig\n}> = ({ property, subject, embedded, force, editable, owner, topEntity, shape, siblingsPath, config }) => {\n  const objectType = property.objectType\n\n  //debug(\"propertyCtn:\", property.qname, property, subject.qname, subject, siblingsPath)\n\n  const [css, setCss] = useState(\"\")\n\n  const setCssClass = (txt: string, add = true) => {\n    if (add) {\n      if (!css.includes(txt)) setCss(css + txt + \" \")\n    } else {\n      if (css.includes(txt)) setCss(css.replace(new RegExp(txt), \"\"))\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div role=\"main\" {...(css ? { className: css } : {})}>\n        <section className=\"album\">\n          <div\n            className={\"container\" + (embedded ? \" px-0\" : \"\") + \" editable-\" + editable}\n            style={{ border: \"dashed 1px none\" }}\n          >\n            <ValueList\n              subject={subject}\n              property={property}\n              embedded={embedded}\n              force={force}\n              editable={editable}\n              {...(owner ? { owner } : {})}\n              {...(topEntity ? { topEntity } : {})}\n              shape={shape}\n              siblingsPath={siblingsPath}\n              setCssClass={setCssClass}\n              config={config}\n            />\n          </div>\n        </section>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default PropertyContainer\n","import { atom, atomFamily, selectorFamily, RecoilValue, RecoilState } from \"recoil\"\nimport { FC } from \"react\"\nimport _ from \"lodash\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { Value, Subject, LiteralWithId, errors, emptyLiteral } from \"../helpers/rdf/types\"\nimport { HistoryStatus } from \"../helpers/observer\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"../containers/EntitySelectorContainer\"\n\nconst debug = require(\"debug\")(\"rde:common\")\n\nexport const uiLangState = atom<Array<string>>({\n  key: \"uiLangState\",\n  default: [\"en\"],\n})\n\nexport const uiLitLangState = atom<Array<string>>({\n  key: \"uiLitLangState\",\n  default: [\"en\"],\n})\n\nexport const uiReadyState = atom<boolean>({\n  key: \"uiReadyState\",\n  default: false,\n})\n\nexport const uiTabState = atom<number>({\n  key: \"uiTabState\",\n  default: -1,\n})\n\nexport const uiRIDState = atom<string[]>({\n  key: \"uiRIDState\",\n  default: [],\n})\n\nexport const uiEditState = atom<string>({\n  key: \"uiEditState\",\n  default: \"\",\n})\n\nexport const uiGroupState = atom<string>({\n  key: \"uiGroupState\",\n  default: \"\",\n})\n\nexport const uiHistoryState = atom<Record<string, never> | FC<{ string: { string: Array<Value> } }>>({\n  key: \"uiHistoryState\",\n  default: {},\n})\n\nexport type undoState = {\n  enabled: boolean\n  subjectUri: string\n  propertyPath: string\n  parentPath: Array<string>\n}\n\nconst sameUndoSub = (undo1: undoState, undo2: undoState) => {\n  const ret =\n    undo1.enabled === undo2.enabled &&\n    undo1.subjectUri === undo2.subjectUri &&\n    undo1.propertyPath === undo2.propertyPath &&\n    undo1.parentPath.length === undo2.parentPath.length &&\n    undo1.parentPath.filter((u, i) => u === undo2.parentPath[i]).length === undo1.parentPath.length\n  //debug(\"same?\",ret,undo1,undo2)\n  return ret\n}\n\nexport const sameUndo = (undo1: { prev: undoState; next: undoState }, undo2: { prev: undoState; next: undoState }) => {\n  return (\n    !undo1 && !undo2 || undo1 && undo2 && sameUndoSub(undo1.prev, undo2.prev) && sameUndoSub(undo1.next, undo2.next)\n  )\n}\n\nexport const noUndo = { enabled: false, subjectUri: \"\", propertyPath: \"\", parentPath: [] }\n\nexport const noUndoRedo = { prev: noUndo, next: noUndo }\n\nexport const uiUndosState = atom<Record<string, Record<string, undoState>>>({\n  key: \"uiUndosState\",\n  default: {},\n})\n\nexport const uiNavState = atom<string>({\n  key: \"uiNavState\",\n  default: \"\",\n})\n\nexport const sessionLoadedState = atom<boolean>({\n  key: \"sessionLoadedState\",\n  default: false,\n})\n\nexport const profileIdState = atom<string>({\n  key: \"profileIdState\",\n  default: \"\",\n})\n\nexport const uiDisabledTabsState = atom<boolean>({\n  key: \"uiDisabledTabsState\",\n  default: false,\n})\n\nexport const userIdState = atom<string>({\n  key: \"userIdState\",\n  default: \"\",\n})\n\nexport const reloadProfileState = atom<boolean>({\n  key: \"reloadProfileState\",\n  default: true,\n})\n\nexport const reloadEntityState = atom<string>({\n  key: \"reloadEntityState\",\n  default: \"\",\n})\n\nexport const RIDprefixState = atom<string | null>({\n  key: \"RIDprefixState\",\n  default: null,\n})\n\nexport type orderedByPropSelectorArgs = {\n  atom: RecoilValue<Array<Value>>\n  propertyPath: string\n  order: string\n}\n\n// I don't quite understand why TS complains here, but it does, see\n// https://stackoverflow.com/questions/37006008/typescript-index-signature-is-missing-in-type\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const orderedByPropSelector = selectorFamily<any,orderedByPropSelectorArgs>({\n  key: \"orderedByPropSelector\",\n  get:\n    (args: orderedByPropSelectorArgs) =>\n    ({ get }) => {\n      let { atom, propertyPath, order } = args // eslint-disable-line prefer-const\n      if (propertyPath) {\n        if (!order) order = \"asc\"\n        const unorderedList = get(atom)\n        const orderedList = _.orderBy(\n          unorderedList.map((w:Value) => {\n            if(w instanceof Subject) {\n              const s:Subject = w\n              let k\n              const v: Value[] = get(s.getAtomForProperty(propertyPath))\n              if (Array.isArray(v) && v.length) k = Number(v[0].value)\n              else if (order === \"desc\") k = Number.MIN_SAFE_INTEGER\n              else k = Number.MAX_SAFE_INTEGER\n              return { s, k }\n            }\n            return { s:w, k:order === \"asc\" ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER } \n          }),\n          [\"k\"],\n          [order === \"asc\" ? \"asc\" : \"desc\"]\n        ).map((i: {s: Subject|Value, k: number}) => i.s)\n        //debug(\"sort:\", atom, propertyPath, orderedList)\n        return orderedList\n      }\n      return []\n    },\n})\n\nexport type personNamesLabelsSelectorArgs = {\n  atom: RecoilValue<Array<Subject>>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const personNamesLabelsSelector = selectorFamily<any,personNamesLabelsSelectorArgs>({\n  key: \"personNamesLabelsSelector\",\n  get:\n    (args: personNamesLabelsSelectorArgs) =>\n    ({ get }) => {\n      const { atom } = args\n      if (atom) {\n        const names = get(atom)\n        const namesLabelsAtoms = names.map((n: Subject) => n.getAtomForProperty(shapes.rdfsLabel.uri))\n        const namesLabels = namesLabelsAtoms.reduce(\n          (acc: Value[], nl: RecoilState<Value[]>) => [...acc, ...get(nl)],\n          []\n        )\n        //debug(\"values:\", atom, names, namesLabelsAtoms,  namesLabels)\n        return namesLabels\n      }\n      return []\n    },\n})\n\nexport const initListAtom = atom<Array<Value>>({ key: \"initListAtom\", default: [] })\n\nexport const initStringAtom = atom<string>({ key: \"initStringAtom\", default: \"\" })\n\nexport const initMapAtom = atom<Record<string, Value[]>>({ key: \"initMapAtom\", default: {} })\n\n// TODO: the as is not great...\nexport const initkvAtom = atom<{k: string, val: Value[]}>({ key: \"initkvAtom\", default: {} as {k: string, val: Value[]} })\n\nexport type canPushPrefLabelGroupType = {\n  props?: RecoilState<Value[]>[]\n  subprops?: Record<string, { atom: RecoilState<Subject[]>; allowPush: string[] }>\n}\n\nexport type canPushPrefLabelGroupsType = {\n canPushPrefLabelGroups: Record<string,canPushPrefLabelGroupType>,\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const possiblePrefLabelsSelector = selectorFamily<Record<string,Value[]>,canPushPrefLabelGroupsType>({\n  key: \"possiblePrefLabelsSelector\",\n  get:\n    (args: canPushPrefLabelGroupsType) =>\n    ({ get }) => {\n      //debug(\"push:\",canPushPrefLabelGroups)\n      const res: Record<string, Value[]> = {}\n      for (const g of Object.keys(args.canPushPrefLabelGroups)) {\n        const labels: Value[] = [],\n          atoms = []\n        const canPushPrefLabelGroup: canPushPrefLabelGroupType = args.canPushPrefLabelGroups[g]\n        if (canPushPrefLabelGroup.subprops) {\n          Object.keys(canPushPrefLabelGroup.subprops).map((k: string) => {\n            if (!canPushPrefLabelGroup.subprops || !canPushPrefLabelGroup.subprops[k].atom) return []\n            const names = get(canPushPrefLabelGroup.subprops[k].atom)\n            for (const n of names) {\n              for (const a of canPushPrefLabelGroup.subprops[k].allowPush) {\n                const vals = get(n.getAtomForProperty(a))\n                vals.map((v: Value) => labels.push(v))\n              }\n            }\n            if (canPushPrefLabelGroup.props) {\n              canPushPrefLabelGroup.props.map((a: RecoilValue<Value[]>) => {\n                const vals: Value[] = get(a)\n                vals.map((v: Value) => labels.push(v))\n              })\n            }\n            return labels\n          })\n        }\n        if (labels.length) res[g] = labels\n      }\n      return res\n    },\n})\n\nexport type orderedNewValSelectorType = {\n  atom: RecoilState<Subject[]> | null\n  propertyPath: string\n  order?: \"asc\" | \"desc\"\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const orderedNewValSelector = selectorFamily<string,orderedNewValSelectorType>({\n  key: \"orderedNewValSelector\",\n  get:\n    (args: orderedNewValSelectorType) =>\n    ({ get }) => {\n      let newVal = -1\n      if (args.atom) {\n        const order = args.order ? args.order : \"asc\"\n\n        //debug(\"nV\")\n        const parentList = get(args.atom)\n        parentList.map((s, i) => {\n          if (i < parentList.length - 1 - 1) return // try to speed things as list is sorted\n          const k = get(s.getAtomForProperty(args.propertyPath))\n          let kint = 0\n          if (Array.isArray(k) && k.length) kint = Number(k[0].value)\n          //debug(\"k:\",k)\n          if (newVal === -1 || order === \"asc\" && kint >= newVal || order === \"desc\" && kint <= newVal) {\n            if (order === \"asc\") newVal = kint + 1\n            else newVal = kint - 1\n          }\n        })\n        //debug(\"newVal:\", newVal) //, atom, propertyPath, parentList)\n      }\n      return newVal.toString()\n    },\n})\n\nexport type toCopySelectorsType = Array<{\n  property: string\n  atom: RecoilState<Value[]>\n}>\n\nexport type toCopySelectorType = {\n  list?: toCopySelectorsType\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const toCopySelector = selectorFamily<{k: string, val:Value[]}[],toCopySelectorType>({\n  key: \"toCopySelector\",\n  get:\n    (args: toCopySelectorType) =>\n    ({ get }) => {\n      const res: {k: string, val:Value[]}[] = []\n      args.list?.map(({ property, atom }) => {\n        const val = get(atom)\n        //debug(\"copy:\",property, val, atom)\n        res.push({ k: property, val: val })\n      })\n      return res\n    },\n  set:\n    (args: toCopySelectorType) =>\n    ({ get, set }, [{ k, val }]: {k: string, val: Value[]}[]) => {\n      //debug(\"set:\", list, k, val)\n      args.list?.map(({ property, atom }) => {\n        if (k == property) set(atom, [...get(atom).filter((lit) => lit.value), ...val])\n      })\n    },\n})\n\nexport const savePopupState = atom<boolean>({\n  key: \"savePopupState\",\n  default: false,\n})\n\nexport type ESfromRecoilSelectorType = {\n  property: shapes.PropertyShape,\n  subject: Subject,\n  entityQname: string,\n  undo: Record<string,undoState>,\n  hStatus: HistoryStatus,\n  status: EditedEntityState\n  id: string\n  removingFacet: boolean\n  forceRemove: boolean\n}\n\nexport const ESfromRecoilSelector = selectorFamily<any,any>({\n  key: \"ESfromRecoilSelector\",\n  get:\n    ({}) =>\n    ({ get }) => {\n      return true\n    },\n  set:\n    ({}) =>\n    ({ get, set }, args: ESfromRecoilSelectorType) => {\n\n      const entities = get(entitiesAtom)\n      const setEntities = (val: Entity[]) => set(entitiesAtom, val)\n\n      //debug(\"UES:\", status, entityQname, id, removingFacet, forceRemove, undo, hStatus)\n\n      const n = entities.findIndex((e) => e.subjectQname === args.entityQname)\n\n      if (n > -1) {\n        const ent: Entity = entities[n]\n        if (args.status === EditedEntityState.Error) {\n          //debug(\"error:\", id, status, ent.state, ent, n, property.qname, errors)\n\n          if (!errors[ent.subjectQname]) errors[ent.subjectQname] = {}\n          errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id] = true\n\n          if (ent.state != args.status) {\n            const newEntities = [...entities]\n            newEntities[n] = { ...entities[n], state: args.status }\n            setEntities(newEntities)\n          }\n          return\n        }\n        // DONE: update status to NeedsSaving for newly created entity and not for loaded entity\n        const status =\n          ent.etag && (!args.undo || args.undo.prev && !args.undo.prev.enabled) && !ent.loadedUnsavedFromLocalStorage\n            ? EditedEntityState.Saved\n            : EditedEntityState.NeedsSaving\n\n        const hasError =\n          errors[ent.subjectQname] && errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id]\n\n        //debug(\"no error:\", hasError, forceRemove, id, status, ent.state, ent, n, property.qname, errors)\n        if (ent.state != status || hasError && args.forceRemove) {\n          //debug(\"status:\", ent.state, status)\n          if (args.removingFacet) {\n            //debug(\"rf:\", id)\n            if (errors[ent.subjectQname]) {\n              const keys = Object.keys(errors[ent.subjectQname])\n              for (const k of keys) {\n                if (k.startsWith(args.id)) delete errors[ent.subjectQname][k]\n              }\n            }\n          } else if (hasError) {\n            delete errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id]\n          }\n          if (!errors[ent.subjectQname] || !Object.keys(errors[ent.subjectQname]).length) {\n            const newEntities = [...entities]\n            newEntities[n] = { ...entities[n], state: status }\n            setEntities(newEntities)\n            //debug(\"newEnt:\",newEntities[n].state)\n          }\n        }\n      }\n    },\n})\n\nexport type isUniqueTestSelectorType = {\n  checkUnique: boolean\n  siblingsAtom: RecoilState<Subject[]>,\n  propertyPath: string\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const isUniqueTestSelector = selectorFamily<boolean,isUniqueTestSelectorType>({\n  key: \"isUniqueTestSelector\",\n  get:\n    (args: isUniqueTestSelectorType) =>\n    ({ get }) => {\n      if (!args.checkUnique) return true\n      //debug(\"iUvS:\",siblingsAtom, propertyPath)\n      const siblings = get(args.siblingsAtom),\n        vals:string[] = []\n      for (const s of siblings) {\n        const lit:Value[] = get(s.getAtomForProperty(args.propertyPath))\n        if (lit.length) {\n          if (vals.includes(lit[0].value)) {\n            //debug(\"non unique:\",propertyPath,vals,lit,siblings)\n            return false\n          }\n          vals.push(lit[0].value)\n        }\n      }\n      //debug(\"unique:\",propertyPath,vals,siblings)\n      return true\n    },\n})\n\n","import * as rdf from \"rdflib\"\n\nexport const DASH_uri = \"http://datashapes.org/dash#\"\nexport const DASH = rdf.Namespace(DASH_uri)\nexport const OWL_uri = \"http://www.w3.org/2002/07/owl#\"\nexport const OWL = rdf.Namespace(OWL_uri)\nexport const RDFS_uri = \"http://www.w3.org/2000/01/rdf-schema#\"\nexport const RDFS = rdf.Namespace(RDFS_uri)\nexport const SH_uri = \"http://www.w3.org/ns/shacl#\"\nexport const SH = rdf.Namespace(SH_uri)\nexport const RDF_uri = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\nexport const RDF = rdf.Namespace(RDF_uri)\nexport const SKOS_uri = \"http://www.w3.org/2004/02/skos/core#\"\nexport const SKOS = rdf.Namespace(SKOS_uri)\nexport const XSD_uri = \"http://www.w3.org/2001/XMLSchema#\"\nexport const XSD = rdf.Namespace(XSD_uri)\nexport const FOAF_uri = \"http://xmlns.com/foaf/0.1/\"\nexport const FOAF = rdf.Namespace(FOAF_uri)\nexport const RDE_uri = \"https://github.com/buda-base/rdf-document-editor/\"\nexport const RDE = rdf.Namespace(RDE_uri)\n\nconst debug = require(\"debug\")(\"rde:rdf:ns\")\n\nconst defaultPrefixToURI: { [key: string]: string } = {\n  dash: DASH_uri,\n  owl: OWL_uri,\n  rde: RDE_uri,\n  rdfs: RDFS_uri,\n  sh: SH_uri,\n  rdf: RDF_uri,\n  skos: SKOS_uri,\n  xsd: XSD_uri,\n  foaf: FOAF_uri,\n}\n\nexport class PrefixMap {\n\n  prefixToURI: { [key: string]: string }\n  URItoPrefix: { [key: string]: string }\n\n  constructor(prefixToURI: { [key: string]: string }) {\n    this.prefixToURI = { ... defaultPrefixToURI, ... prefixToURI }\n    this.URItoPrefix = {}\n    for (const [prefix, uri] of Object.entries(this.prefixToURI)) {\n      this.URItoPrefix[uri] = prefix\n    }\n  }\n\n  setDefaultPrefixes = (s: rdf.Store): void => {\n    for (const [prefix, uri] of Object.entries(this.prefixToURI)) {\n      s.setPrefixForURI(prefix, uri)\n    }\n  }\n\n  qnameFromUri = (uri = \"\"): string => {\n    if (uri.match(/^[^:/#]+:[^:/#]+$/)) return uri\n\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    const localid = uri.slice(j + 1)\n    const namesp = uri.slice(0, j + 1)\n    const prefix = this.URItoPrefix[namesp]\n    if (!prefix) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    return prefix + \":\" + localid\n  }\n\n  lnameFromUri = (uri: string): string => {\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    return uri.slice(j + 1)\n  }\n\n  namespaceFromUri = (uri: string): string => {\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make namespace out of <\" + uri + \">\")\n\n    return uri.slice(0, j + 1)\n  }\n\n  uriFromQname = (qname = \"\"): string => {\n    const j = qname.indexOf(\":\")\n\n    if (j < 0) throw new Error(\"Cannot make uri out of <\" + qname + \">\")\n\n    const localid = qname.slice(j + 1)\n    const prefix = qname.slice(0, j)\n    const uri_base = this.prefixToURI[prefix]\n\n    if (!uri_base) throw new Error(\"Cannot make uri out of <\" + qname + \">\")\n\n    return uri_base + localid\n  }\n\n  lnameFromQname = (qname = \"\"): string => {\n    const j = qname.indexOf(\":\")\n\n    if (j < 0) throw new Error(\"Cannot make lname out of <\" + qname + \">\")\n\n    return qname.slice(j + 1)\n  }\n}\n\nexport const defaultPrefixMap = new PrefixMap({})\n","import React, { useEffect, FC, ChangeEvent, useState, useRef, useLayoutEffect, useCallback, useMemo } from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as rdf from \"rdflib\"\nimport {\n  LiteralWithId,\n  Subject,\n  Value,\n  ObjectType,\n  RDFResource,\n  RDFResourceWithLabel,\n  ExtRDFResourceWithLabel,\n  errors,\n  noneSelected,\n} from \"../helpers/rdf/types\"\nimport { putTtl } from \"../helpers/rdf/io\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { generateSubnode, NodeShape, PropertyShape } from \"../helpers/rdf/shapes\"\nimport * as ns from \"../helpers/rdf/ns\"\n// import { generateSubnode, reserveLname } from \"../../../helpers/rdf/construct\"\nimport { useRecoilState, useSetRecoilState, useRecoilValue, atomFamily, atom, selectorFamily } from \"recoil\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { TextField, MenuItem, Tooltip, IconButton, InputLabel, Select } from \"@material-ui/core\"\nimport {\n  AddIcon,\n  RemoveIcon,\n  ErrorIcon,\n  CloseIcon,\n  VisibilityIcon,\n  VisibilityOffIcon,\n  MDIcon,\n  EditIcon,\n  KeyboardIcon,\n  HelpIcon,\n} from \"../routes/layout/icons\"\nimport i18n from \"i18next\"\nimport PropertyContainer from \"./PropertyContainer\"\nimport { ValueByLangToStrPrefLang, langsWithDefault } from \"../helpers/lang\"\nimport { history, HistoryStatus, getHistoryStatus } from \"../helpers/observer\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport {\n  reloadEntityState,\n  uiTabState,\n  uiLangState,\n  uiLitLangState,\n  uiEditState,\n  uiUndosState,\n  orderedByPropSelector,\n  orderedByPropSelectorArgs,\n  initListAtom,\n  RIDprefixState,\n  orderedNewValSelector,\n  ESfromRecoilSelector,\n  isUniqueTestSelector,\n  orderedNewValSelectorType,\n  isUniqueTestSelectorType,\n  initStringAtom\n} from \"../atoms/common\"\nimport { entitiesAtom, Entity, EditedEntityState } from \"./EntitySelectorContainer\"\n\nimport MDEditor, { commands } from \"@uiw/react-md-editor\"\n\nimport { useAuth0 } from \"@auth0/auth0-react\"\n\nconst debug = require(\"debug\")(\"rde:entity:container:ValueList\")\n\nfunction replaceItemAtIndex(arr:Value[], index:number, newValue: Value): Value[] {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\n}\n\nfunction removeItemAtIndex(arr:Value[], index:number): Value[] {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)]\n}\n\nexport const MinimalAddButton: FC<{\n  add: (e:React.MouseEvent<HTMLButtonElement>, n:number) => Promise<void>\n  className: string\n  disable?: boolean\n}> = ({ add, className, disable }) => {\n  return (\n    <div\n      className={\n        \"minimalAdd \" + \"disable_\" + disable + (className !== undefined ? className : \" text-right\")\n      } /*style={{ width: \"100%\" }}*/\n    >\n      <button className=\"btn btn-link ml-2 px-0\" \n        onClick={(ev:React.MouseEvent<HTMLButtonElement>) => add(ev,1)} {...(disable ? { disabled: true } : {})}>\n        <AddIcon />\n      </button>\n    </div>\n  )\n}\n\nexport const BlockAddButton: FC<{ add: (e:React.MouseEvent<HTMLButtonElement>, n:number) => void;  label?: string; count: number }> = ({\n  add,\n  label,\n  count = 1,\n}) => {\n  const [n, setN] = useState(1)\n  const [disable, setDisable] = useState(false)\n\n  /* // TODO: disable batch operations in demo mode \n  const [demo, setDemo] = useRecoilState(demoAtom)\n\n  // #36 disable batch add in demo mode\n  useEffect(() => {\n    if (count > 1 && demo && !disable) setDisable(true)\n  })\n  */\n\n  return (\n    <div\n      className=\"blockAdd text-center pb-1 mt-3\"\n      style={{ width: \"100%\", ...count > 1 ? { display: \"flex\" } : {} }}\n    >\n      <button\n        className=\"btn btn-sm btn-block btn-outline-primary px-0\"\n        style={{\n          boxShadow: \"none\",\n          pointerEvents: disable ? \"none\" : \"auto\",\n          ...disable ? { opacity: 0.5, pointerEvents: \"none\" } : {},\n        }}\n        onClick={(e:React.MouseEvent<HTMLButtonElement>) => add(e, n)}\n        //disabled={disable}\n      >\n        <>\n          {i18n.t(\"general.add_another\", { val: label, count })}\n          &nbsp;\n          <AddIcon />\n        </>\n      </button>\n      {count > 1 && (\n        <TextField\n          label={<>{i18n.t(\"general.add_nb\", { val: label })}</>}\n          style={{ width: 200 }}\n          value={n}\n          className=\"ml-2\"\n          type=\"number\"\n          InputLabelProps={{ shrink: true }}\n          onChange={(e) => setN(Number(e.target.value))}\n          InputProps={{ inputProps: { min: 1, max: 500 } }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport const OtherButton: FC<{ onClick: React.MouseEventHandler<HTMLButtonElement>; label: string }> = ({\n  onClick,\n  label,\n}) => {\n  return (\n    <div className=\"blockAdd text-center pb-1\" style={{ margin: \"0 15px\" }}>\n      <button\n        className=\"btn btn-sm btn-block btn-outline-primary mb-2 px-0 py-2\"\n        style={{ boxShadow: \"none\" }}\n        onClick={onClick}\n      >\n        {label}\n      </button>\n    </div>\n  )\n}\n\nconst generateDefault = async (\n  property: PropertyShape,\n  parent: Subject,\n  RIDprefix: string | null,\n  idToken: string | null,\n  val = \"\",\n  config: RDEConfig\n): Promise<Value | Value[]> => {\n  //debug(\"genD:\", property, parent)\n  switch (property.objectType) {\n    case ObjectType.ResExt:\n      // TODO might be a better way but \"\" isn't authorized\n      return new ExtRDFResourceWithLabel(\"tmp:uri\", {}, {}, config)\n      break\n    case ObjectType.Internal:\n      if (property.targetShape == null) throw \"no target shape for \" + property.uri\n      return generateSubnode(property.targetShape, parent) //, RIDprefix, idToken) //, n)\n      break\n    case ObjectType.ResInList:\n      // DONE: fix save (default value for select like bdo:material)\n      if (property.defaultValue) return new ExtRDFResourceWithLabel(property.defaultValue.value, {}, {}, config)\n      // if a select property is not required, we don't select anything by default\n      if (!property.minCount) return noneSelected\n      // else we select the first one automatically\n      const propIn: Array<Value> | null = property.in\n      if (!propIn) throw \"can't find a list for \" + property.uri\n      return propIn[0]\n      break\n    case ObjectType.LitInList:\n      const defaultValueLiL = property.defaultValue as rdf.Literal | null\n      if (defaultValueLiL !== null)\n        return new LiteralWithId(defaultValueLiL.value, defaultValueLiL.language, defaultValueLiL.datatype)\n      if (!property.minCount) {\n        const datatype = property.datatype?.value\n        if (datatype === ns.RDF(\"langString\").value) {\n          // TODO: this should be a user preference, not urgent\n          return new LiteralWithId(\"\", property?.defaultLanguage ? property.defaultLanguage : \"bo-x-ewts\")\n        } else {\n          return new LiteralWithId(\"\", null, property.datatype ? property.datatype : undefined)\n        }\n      }\n      const propInLit: Array<Value> | null = property.in\n      if (!propInLit) throw \"can't find a list for \" + property.uri\n      return propInLit[0]\n      break\n    case ObjectType.Literal:\n    default:\n      const defaultValue = property.defaultValue as rdf.Literal | null\n      //debug(\"default:\", property.qname, defaultValue)\n      if (defaultValue !== null)\n        return new LiteralWithId(defaultValue.value, defaultValue.language, defaultValue.datatype)\n      const datatype = property.datatype?.value\n      if (datatype === ns.RDF(\"langString\").value) {\n        // TODO: this should be a user preference, not urgent\n        return new LiteralWithId(\"\", property?.defaultLanguage ? property.defaultLanguage : \"bo-x-ewts\")\n      } else if (datatype === ns.XSD(\"integer\").value) {\n        return new LiteralWithId(val, null, property.datatype ? property.datatype : undefined)\n      } else {\n        return new LiteralWithId(\"\", null, property.datatype ? property.datatype : undefined)\n      }\n      break\n  }\n}\n\n/**\n * List component\n */\n\nconst ValueList: FC<{\n  subject: Subject\n  property: PropertyShape\n  embedded?: boolean\n  force?: boolean\n  editable: boolean\n  owner?: Subject\n  topEntity?: Subject\n  shape: NodeShape\n  siblingsPath?: string\n  setCssClass?: (s:string, add: boolean) => void\n  config: RDEConfig\n}> = ({ subject, property, embedded, force, editable, owner, topEntity, shape, siblingsPath, setCssClass, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [unsortedList, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang] = useRecoilState(uiLangState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLang)\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const sortOnPath = property?.sortOnProperty?.value\n  const orderedList:Value[] = useRecoilValue(\n    orderedByPropSelector({\n      atom: subject.getAtomForProperty(property.path.sparqlString),\n      propertyPath: sortOnPath || \"\",\n      //order: \"desc\" // default is \"asc\"\n    } as orderedByPropSelectorArgs)\n  )\n  let list:Value[] = unsortedList\n  if (orderedList.length) list = orderedList\n\n  const withOrder = shape.properties.filter((p) => p.sortOnProperty?.value === property.path?.sparqlString)\n  let newVal:string|number = useRecoilValue(\n    orderedNewValSelector({\n      atom: withOrder.length && withOrder[0].path\n        ? (topEntity ? topEntity : subject).getAtomForProperty(withOrder[0].path.sparqlString)\n        : null,\n      propertyPath: property.path.sparqlString,\n      //order: \"desc\" // default is \"asc\"\n    } as orderedNewValSelectorType)\n  )\n  if (newVal != \"\") {\n    const newValNum = Number(newVal)\n    if (property.minInclusive && newValNum < property.minInclusive) newVal = property.minInclusive.toString()\n    if (property.maxInclusive && newValNum > property.maxInclusive) newVal = property.maxInclusive.toString()\n  }\n\n  const [getESfromRecoil, setESfromRecoil] = useRecoilState(ESfromRecoilSelector({}))\n  const updateEntityState = (status: EditedEntityState, id: string, removingFacet = false, forceRemove = false) => {\n    if (id === undefined) throw new Error(\"id undefined\")\n    const entityQname = topEntity ? topEntity.qname : subject.qname\n    const undo = undos[ns.defaultPrefixMap.uriFromQname(entityQname)]\n    const hStatus = getHistoryStatus(ns.defaultPrefixMap.uriFromQname(entityQname))\n    //debug(\"undo:\", undo, hStatus, history, entityQname, undos)\n\n    setESfromRecoil({ property, subject, entityQname, undo, hStatus, status, id, removingFacet, forceRemove })\n  }\n\n  const alreadyHasEmptyValue: () => boolean = (): boolean => {\n    for (const val of list) {\n      if (val instanceof LiteralWithId && val.value === \"\") return true\n      if (val instanceof RDFResourceWithLabel && val.node.value === \"tmp:none\") return true\n    }\n    return false\n  }\n\n  // TODO: handle the creation of a new value in a more sophisticated way (with the iframe and such)\n  const canAdd =\n    !editable ||\n    alreadyHasEmptyValue() ||\n    property.readOnly && property.readOnly === true ||\n    property.displayPriority && property.displayPriority > 1\n      ? false\n      : property.objectType != ObjectType.ResExt && property.maxCount\n      ? list.length < property.maxCount\n      : true\n\n  const canDel = (!property.minCount || property.minCount < list.length) && !property.readOnly && editable\n\n  // DONE save multiple external resource for property\n  const onChange: (value: RDFResourceWithLabel, idx: number, removeFirst: boolean | undefined) => void = (\n    value: RDFResourceWithLabel,\n    idx: number,\n    removeFirst: boolean | undefined\n  ) => {\n    const newList = replaceItemAtIndex(list, idx, value)\n    //if(removeFirst) newList.shift()\n    setList(newList)\n  }\n\n  // DONE prevent adding same resource twice\n  const exists = useCallback(\n    (uri: string) => {\n      //debug(\"set exists\",list)\n      //debug(\"exists?\", uri, list)\n      for (const val of list) {\n        if (val instanceof RDFResourceWithLabel && (val.qname === uri || val.uri === uri)) {\n          //debug(\"found \" + uri + \" in \", list)\n          return true\n        }\n      }\n      //debug(\"not found \" + uri + \" in \", list)\n      return false\n    },\n    [list]\n  )\n\n  let firstValueIsEmptyField = true\n\n  useEffect(() => {\n    //debug(\"vL/effect:\",subject.qname,property.qname,list)\n\n    // TODO: check maxCount\n    if (list.length) {\n      const first = list[0]\n      if (first instanceof ExtRDFResourceWithLabel && first.uri !== \"tmp:uri\" && first.uri !== \"tmp:none\")\n        firstValueIsEmptyField = false\n    }\n\n    // reinitializing the property values atom if it hasn't been initialized yet\n    const vals: Array<Value> | null = subject.getUnitializedValues(property)\n    if (vals && vals.length) {\n      if (property.minCount && vals.length < property.minCount) {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:1a\",subject,owner,topEntity)\n          setList(vals.concat(Array.isArray(res)?res:[res]))\n        }\n        setListAsync()\n      } else {\n        //debug(\"setNoH:1b\",subject,owner,topEntity)\n        setList(vals)\n      }\n    } else if (\n      property.objectType != ObjectType.ResInList &&\n      property.objectType != ObjectType.LitInList &&\n      property.objectType != ObjectType.Internal &&\n      (!property.displayPriority ||\n        property.displayPriority === 0 ||\n        property.displayPriority === 1 && (list.length || force)) &&\n      (property.minCount && list.length < property.minCount || !list.length || !firstValueIsEmptyField) &&\n      (!property.maxCount || property.maxCount >= list.length)\n    ) {\n      if (!firstValueIsEmptyField) {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(),config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:2\",subject,owner,topEntity)\n          setList((oldList) => (Array.isArray(res)?res:[res]).concat(oldList))\n        }\n        setListAsync()\n      } else {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(),config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:2\",subject,owner,topEntity)\n          setList((oldList) => oldList.concat(Array.isArray(res)?res:[res]))\n        }\n        setListAsync()\n      }\n    } else if (property.objectType == ObjectType.Internal && property.minCount && list.length < property.minCount) {\n      const setListAsync = async () => {\n        const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n        // dont store empty value autocreation\n        if (topEntity) topEntity.noHisto()\n        else if (owner) owner.noHisto()\n        else subject.noHisto()\n        //debug(\"setNoH:3\",subject,owner,topEntity)\n        setList((oldList) => (Array.isArray(res)?res:[res]).concat(oldList))\n      }\n      setListAsync()\n    } else if (\n      property.objectType != ObjectType.ResInList &&\n      property.objectType != ObjectType.LitInList &&\n      property.displayPriority &&\n      property.displayPriority === 1 &&\n      list.length === 1 &&\n      !force\n    ) {\n      //debug(\"setNoH:4\",subject,owner,topEntity)\n      // DONE: comment: what does it do?\n      // guess: it removes the first tmp:uri first object of hidden properties\n      // answer: indeed it removes empty value when displayPriority is 1\n      // but let's keep value then hide it in CSS when needed (fixes #16)\n      // if (firstValueIsEmptyField) setList([])\n    } else if (\n      !list.length &&\n      (property.objectType == ObjectType.ResInList || property.objectType == ObjectType.LitInList)\n    ) {\n      // this makes sure that there's at least one value for select forms, and the value is either\n      // the first one (when it's mandatory that there's a value), or tmp:none\n      const setListAsync = async () => {\n        const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n        if (topEntity) topEntity.noHisto()\n        else if (owner) owner.noHisto()\n        else subject.noHisto()\n        //debug(\"setNoH:5\",subject,owner,topEntity)\n        setList(Array.isArray(res)?res:[res])\n      }\n      setListAsync()\n    }\n    //debug(\"end/vL/effect\")\n  }, [subject, list, force])\n\n  let addBtn = property.objectType === ObjectType.Internal\n\n  //debug(\"prop:\", property.qname, subject.qname, list) //property, force)\n\n  const isEmptyValue = (val: Value): boolean => {\n    if (val instanceof RDFResourceWithLabel) {\n      return val.uri === \"tmp:uri\" || val.uri === \"tmp:none\"\n    } else if (val instanceof LiteralWithId) {\n      // remove language part to fix hiding secondary properties in iinstance/volumes\n      return val.value === \"\" // && !val.language\n      //|| property.defaultValue === \"bds:ImagegroupShape-volumePagesTbrcIntro\" && val.value === \"0\" // no need\n    }\n    return false\n  }\n  const isErrorValue = (val: Value): boolean => {\n    // TODO: to be continue (or not? conflicts with hiding secondary properties, removing)\n    //       + not sure it should be hidden (in case of empty Person Name) but Names group should not be closed as well\n    //if (val instanceof LiteralWithId && property?.datatype?.value === ns.RDF(\"langString\").value) return !val.value\n\n    if (val instanceof LiteralWithId && errors[topEntity ? topEntity.qname : subject.qname]) {\n      const errorKeys = Object.keys(errors[topEntity ? topEntity.qname : subject.qname])\n      return errorKeys.some((k) => k.endsWith(\";\" + val.id))\n    }\n\n    return false\n  }\n\n  const hasNonEmptyValue = list.some((v) => !isEmptyValue(v) || isErrorValue(v))\n\n  useEffect(() => {\n    if (setCssClass) {\n      if (!hasNonEmptyValue) setCssClass(\"unset\", true)\n      else setCssClass(\"unset\", false)\n    }\n  }, [hasNonEmptyValue])\n\n  /* eslint-disable no-magic-numbers */\n  const showLabel =\n    !property.displayPriority ||\n    property.displayPriority === 0 ||\n    property.displayPriority === 1 && (force || list.length > 1 || hasNonEmptyValue) ||\n    property.displayPriority === 2 && (list.length >= 1 || hasNonEmptyValue)\n\n  // scroll back to top when loosing focus\n  const scrollElem = useRef<null | HTMLDivElement>(null)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  useEffect(() => {\n    if (property?.group?.value !== edit && scrollElem?.current) {\n      scrollElem.current.scrollTo({ top: 0, left: 0, behavior: \"smooth\" })\n    }\n  }, [edit])\n\n  const hasEmptyExtEntityAsFirst =\n    list.length > 0 &&\n    list[0] instanceof RDFResourceWithLabel &&\n    property.objectType == ObjectType.ResExt &&\n    list[0].uri === \"tmp:uri\"\n\n  const titleCase = (s: string) => {\n    if (!s) return s\n    return s[0].toUpperCase() + s.substring(1)\n  }\n\n  const canPush = property.allowPushToTopLevelLabel\n\n  const isUniqueValueAmongSiblings = useRecoilValue(\n    isUniqueTestSelector({\n      checkUnique: property.uniqueValueAmongSiblings,\n      siblingsAtom: siblingsPath ? (owner ? owner : subject).getAtomForProperty(siblingsPath) : initListAtom,\n      propertyPath: property.path.sparqlString,\n    } as isUniqueTestSelectorType)\n  )\n\n  // see https://stackoverflow.com/questions/55026139/whats-the-difference-between-usecallback-with-an-empty-array-as-inputs-and-u\n  const renderListElem = useMemo(() => (val: Value, i: number, nbvalues: number) => {\n    //debug(\"render:\", property.qname, isUniqueValueAmongSiblings, property, val, i)\n\n    if (\n      val instanceof RDFResourceWithLabel ||\n      property.objectType == ObjectType.ResInList ||\n      property.objectType == ObjectType.LitInList\n    ) {\n      if (property.objectType == ObjectType.ResExt)\n        return (\n          <ExtEntityComponent\n            key={val.id + \":\" + i}\n            subject={subject}\n            property={property}\n            extRes={val as ExtRDFResourceWithLabel}\n            canDel={canDel && (i > 0 || !(val instanceof LiteralWithId) && val.uri !== \"tmp:uri\")}\n            onChange={onChange}\n            idx={i}\n            exists={exists}\n            editable={editable}\n            {...(owner ? { owner } : {})}\n            title={titleCase(propLabel)}\n            updateEntityState={updateEntityState}\n            shape={shape}\n            config={config}\n          />\n        )\n      else if(val instanceof LiteralWithId || val instanceof RDFResourceWithLabel) {\n        addBtn = false\n        // eslint-disable-next-line no-extra-parens\n        const canSelectNone = (i == 0 && !property.minCount) || (i > 0 && i == nbvalues - 1)\n        return (\n          <SelectComponent\n            key={\"select_\" + val.id + \"_\" + i}\n            canSelectNone={canSelectNone}\n            subject={subject}\n            property={property}\n            res={val}\n            selectIdx={i}\n            canDel={canDel && val != noneSelected}\n            editable={editable}\n            create={\n              canAdd\n              ?  <Create subject={subject} property={property} embedded={embedded} newVal={Number(newVal)} shape={shape} config={config}/>\n              : undefined\n            }\n            updateEntityState={updateEntityState}\n          />\n        )\n      }\n    } else if (val instanceof Subject) {\n      addBtn = true\n      return (\n        <FacetComponent\n          key={val.id}\n          subject={subject}\n          property={property}\n          subNode={val}\n          canDel={canDel && editable}\n          {...(force ? { force } : {})}\n          editable={editable}\n          {...(topEntity ? { topEntity } : { topEntity: subject })}\n          updateEntityState={updateEntityState}\n          shape={shape}\n          config={config}\n        />\n      )\n    } else if (val instanceof LiteralWithId) {\n      addBtn = false\n      const isUniqueLang = list.filter((l) => l instanceof LiteralWithId && l.language === val.language).length === 1\n\n      return (\n        <LiteralComponent\n          key={val.id}\n          subject={subject}\n          property={property}\n          lit={val}\n          {...{ canDel, isUniqueLang, isUniqueValueAmongSiblings }}\n          create={\n            <Create\n              disable={!canAdd || !(val && val.value !== \"\")}\n              subject={subject}\n              property={property}\n              embedded={embedded}\n              newVal={Number(newVal)}\n              shape={shape}\n              config={config}\n            />\n          }\n          editable={editable}\n          topEntity={topEntity}\n          updateEntityState={updateEntityState}\n          config={config}\n        />\n      )\n    }\n  }, undefined)\n\n  return (\n    <React.Fragment>\n      <div\n        className={\n          \"ValueList \" +\n          (property.maxCount && property.maxCount < list.length ? \"maxCount\" : \"\") +\n          (hasNonEmptyValue ? \"\" : \"empty\") +\n          (property.objectType === ObjectType.ResExt ? \" ResExt\" : \"\") +\n          (embedded ? \"\" : \" main\") +\n          (canPush ? \" canPush\" : \"\")\n        }\n        data-priority={property.displayPriority ? property.displayPriority : 0}\n        role=\"main\"\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          ...list.length > 1 && firstValueIsEmptyField && property.path.sparqlString !== ns.SKOS(\"prefLabel\").value\n            ? {\n                /*borderBottom: \"2px solid #eee\", paddingBottom: \"16px\"*/\n              }\n            : {},\n        }}\n      >\n        {showLabel && (!property.in || property.in.length > 1) && (\n          <label\n            className={\"propLabel\"}\n            data-prop={property.qname}\n            data-type={property.objectType}\n            data-priority={property.displayPriority}\n          >\n            {titleCase(propLabel)}\n            {helpMessage && property.objectType === ObjectType.ResExt && (\n              <Tooltip title={helpMessage}>\n                <HelpIcon className=\"help label\" />\n              </Tooltip>\n            )}\n          </label>\n        )}\n        {hasEmptyExtEntityAsFirst && <div style={{ width: \"100%\" }}>{renderListElem(list[0], 0, list.length)}</div>}\n        <div\n          ref={scrollElem}\n          className={!embedded && property.objectType !== ObjectType.Internal ? \"overFauto\" : \"\"}\n          style={{\n            width: \"100%\",\n            //...!embedded && property.objectType !== ObjectType.Internal ? { maxHeight: \"338px\" } : {}, // overflow conflict with iframe...\n            ...property?.group?.value !== edit ? { paddingRight: \"0.5rem\" } : {},\n          }}\n        >\n          {list.map((val, i) => {\n            if (!hasEmptyExtEntityAsFirst || i > 0) return renderListElem(val, i, list.length)\n          })}\n        </div>\n      </div>\n      {canAdd && addBtn && (\n        <Create subject={subject} property={property} embedded={embedded} newVal={Number(newVal)} shape={shape} config={config}/>\n      )}\n    </React.Fragment>\n  )\n}\n\ntype CreateComponentType = FC<{\n  subject: Subject\n  property: PropertyShape\n  embedded?: boolean\n  disable?: boolean\n  newVal?: number\n  shape?: NodeShape\n  config: RDEConfig\n}>\n\n/**\n * Create component\n */\nconst Create: CreateComponentType = ({ subject, property, embedded, disable, newVal, shape, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  let collecNode:rdf.Collection|null = null\n  if(list.length === 1 && list[0] instanceof RDFResource\n     && list[0].node && list[0].node instanceof rdf.Collection) {\n    collecNode = list[0].node\n  }\n  const collec:any[]|undefined = collecNode?.termType === \"Collection\" ? collecNode?.elements : undefined\n  const listOrCollec = collec ? collec : list\n  const [uiLang] = useRecoilState(uiLangState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [uiTab] = useRecoilState(uiTabState)\n  const entity = entities.findIndex((e, i) => i === uiTab)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const { getIdTokenClaims } = useAuth0()\n  const [reloadEntity, setReloadEntity] = useRecoilState(reloadEntityState)\n\n  let nextVal = useRecoilValue(\n      property.sortOnProperty\n      ? orderedNewValSelector({\n          atom: property.sortOnProperty ? subject.getAtomForProperty(property.path.sparqlString) : null,\n          propertyPath: property.sortOnProperty.value,\n          //order: \"desc\" // default is \"asc\"\n        } as orderedNewValSelectorType)\n      : initStringAtom\n  )\n  const sortProps = property.targetShape?.properties.filter((p) => p.path?.sparqlString === property.sortOnProperty?.value)\n  if (sortProps?.length) {\n    const sortProp = sortProps[0]\n    if (sortProp?.minInclusive != null && Number(nextVal) < sortProp.minInclusive) nextVal = sortProp.minInclusive.toString()\n    if (sortProp?.maxInclusive != null && Number(nextVal) > sortProp.maxInclusive) nextVal = sortProp.maxInclusive.toString()\n    //debug(\"create:\",shape,nextVal,newVal,property.qname,property) //,subject.getAtomForProperty(property.path.sparqlString))\n  }\n  let waitForNoHisto = false\n\n  const addItem = async (event:React.MouseEvent<HTMLButtonElement>, n:number) => {\n    /* // refactoring needed\n\n    if (n > 1) {\n      let store = new rdf.Store()\n      ns.setDefaultPrefixes(store)\n      subject.graph.addNewValuestoStore(store)\n\n      const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n      rdf.serialize(defaultRef, store, undefined, \"text/turtle\", async function (err, str) {\n        if (!str) {\n          debug(err)\n          throw \"empty ttl serialization\"\n        }\n        let prefix = property.targetShape.getPropStringValue(shapes.bdsIdentifierPrefix)\n        if (prefix == null) throw \"cannot find entity prefix for \" + property.targetShape.qname\n        else prefix += RIDprefix\n        let reservedId = await reserveLname(prefix, null, idToken, n)\n        if (reservedId) reservedId = reservedId.split(/[ \\n]+/).map((id) => \"bdr:\" + id)\n        else throw \"error reserving ids\"\n        if (str.match(/bdo:instanceHasVolume/))\n          str = str.replace(/(bdo:instanceHasVolume([\\n\\r]|[^;.])+)([;.])/m, \"$1,\" + reservedId.join(\",\") + \"$3\")\n        else\n          str = str.replace(/(a bdo:ImageInstance)([;.])/m, \"$1; bdo:instanceHasVolume \" + reservedId.join(\",\") + \" $2\")\n        str = str.replace(\n          new RegExp(\"(\" + subject.qname + \"[\\n\\r +]*a )\"),\n          reservedId\n            .map((id) => id + \" a bdo:ImageGroup ; bdo:volumeNumber \" + nextVal++ + \" ; bdo:volumePagesTbrcIntro 0 .\")\n            .join(\"\\n\") + \"\\n$1\"\n        )\n\n        debug(\"ttl:\", newVal, str, err)\n\n        store = rdf.graph()\n        rdf.parse(str, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n\n        const url = config.API_BASEURL + subject.qname + \"/focusgraph\"\n        try {\n          let alreadySaved = false\n          let loadRes\n          if (!demo) {\n            const idTokenF = await getIdTokenClaims()\n            loadRes = await putTtl(\n              url,\n              store,\n              idTokenF.__raw,\n              entities[entity]?.alreadySaved ? \"POST\" : \"PUT\",\n              '\"batch add volumes\"@en',\n              entities[entity]?.alreadySaved\n            )\n          } else loadRes = true\n          alreadySaved = loadRes\n\n          const newEntities = [...entities]\n          newEntities[entity] = {\n            ...newEntities[entity],\n            state: EditedEntityState.Saved,\n            alreadySaved,\n            subject: undefined,\n            loadedUnsavedFromLocalStorage: false,\n          }\n\n          delete history[entities[entity]?.subject?.uri]\n\n          setEntities(newEntities)\n\n          setTimeout(() => setReloadEntity(subject.qname), 300) //eslint-disable-line no-magic-numbers\n        } catch (e) {\n          debug(\"error add batch:\", e)\n        }\n      })\n\n      return\n    }\n    */\n\n    if (waitForNoHisto) return\n\n    if (property.objectType === ObjectType.Internal) {\n      waitForNoHisto = true\n      subject.noHisto(false, 1) // allow parent node in history but default empty subnodes before tmp:allValuesLoaded\n    }\n    const item = await generateDefault(property, subject, RIDprefix, idToken, newVal?.toString(), config)\n    setList([...listOrCollec, item]) //(oldList) => [...oldList, item])\n    if (property.objectType === ObjectType.Internal && item instanceof Subject) {\n      //setEdit(property.qname+item.qname)  // won't work...\n      setImmediate(() => {\n        // this must be \"delayed\" to work\n        setEdit(subject.qname + \" \" + property.qname + \" \" + item.qname)\n      })\n\n      setTimeout(() => {\n        subject.noHisto(false, false) // history back to normal\n        waitForNoHisto = false\n      }, 350) // *arbitrary long* delay during which add button can't be used\n    }\n  }\n\n  //debug(\"path/type:\", property.objectType, property.path.sparqlString, disable)\n\n  if (\n    property.objectType !== ObjectType.Internal &&\n    (embedded ||\n      property.objectType == ObjectType.Literal ||\n      property.objectType == ObjectType.ResInList ||\n      property.objectType == ObjectType.LitInList)\n    /*\n      // TODO: refactor\n      property.path.sparqlString === ns.SKOS(\"prefLabel\").value ||\n      property.path.sparqlString === ns.SKOS(\"altLabel\").value ||\n      property.path.sparqlString === ns.BDO(\"catalogInfo\").value ||\n      property.path.sparqlString === ns.RDFS(\"comment\").value)\n    */\n  )\n    return <MinimalAddButton disable={disable} add={addItem} className=\" \" />\n  else {\n    const targetShapeLabels = property.targetShape?.targetClassPrefLabels\n    const labels = targetShapeLabels ? targetShapeLabels : property.prefLabels\n    const count = property.allowBatchManagement ? 2 : 1\n    return <BlockAddButton add={addItem} label={ValueByLangToStrPrefLang(labels, uiLang)} count={count} />\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiFormHelperText-root\": {\n      color: theme.palette.secondary.main,\n    },\n  },\n}))\n\n/**\n * Edit component\n */\nconst EditLangString: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  globalError?: string\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  entity: Subject\n  index: number\n  config: RDEConfig\n}> = ({ property, lit, onChange, label, globalError, editable, updateEntityState, entity, index, config }) => {\n  const classes = useStyles()\n  const [editMD, setEditMD] = useState(false)\n  const [keyboard, setKeyboard] = useState(false)\n\n  const canPushPrefLabel = property.allowPushToTopLevelLabel\n\n  const getLangStringError = (val: string) => {\n    let err = \"\"\n    if (!val && property.minCount) err = i18n.t(\"error.empty\")\n    else if (globalError) err = globalError\n    return err\n  }\n\n  const [error, setError] = useState<React.ReactNode | null>(null)\n\n  //debug(\"val:\", lit.id, lit.value, error, globalError)\n\n  useEffect(() => {\n    const newError = getLangStringError(lit.value)\n    if (newError != error) {\n      //debug(\"newE:\",newError,error,errors,lit,lit.id)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n      setError(newError)\n    }\n  })\n\n  useEffect(() => {\n    return () => {\n      // some not state-dependent flag to know entity we currently are\n      const inOtherEntity = !window.location.href.includes(\"/\" + entity.qname + \"/\")\n\n      //debug(\"unmount\", entity.qname, window.location.href, lit.id, errors, inOtherEntity)\n      if (!inOtherEntity) updateEntityState(EditedEntityState.Saved, lit.id, false, !inOtherEntity)\n    }\n  }, [])\n\n  const errorData = {\n    helperText: (\n      <React.Fragment>\n        <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n        &nbsp;<i>{error}</i>\n      </React.Fragment>\n    ),\n    error: true,\n  }\n\n  const [preview, setPreview] = useState<string|null>(null)\n  useLayoutEffect(() => {\n    if (document.activeElement === inputRef.current) {\n      const { value, error } = config.previewLiteral(lit, uiLang)\n      setPreview(value)\n      setError(error)\n    } else {\n      setPreview(null)\n    }\n  })\n\n  let padBot = \"0px\"\n  if (preview) {\n    padBot = \"40px\"\n  } else if (property.singleLine && editMD) {\n    padBot = \"1px\"\n  }\n\n  const codeEdit = { ...commands.codeEdit, icon: <EditIcon style={{ width: \"12px\", height: \"12px\" }} /> },\n    codePreview = { ...commands.codePreview, icon: <VisibilityIcon style={{ width: \"12px\", height: \"12px\" }} /> }\n\n  const hasKB = config.possibleLiteralLangs.filter((l) => l.value === lit.language)\n\n  const inputRef = useRef<HTMLInputElement>()\n\n  const keepFocus = () => {\n    if (inputRef.current && document.activeElement != inputRef.current) inputRef.current.focus()\n  }\n\n  const insertChar = (str: string) => {\n    if (inputRef.current) {\n      const { selectionStart, selectionEnd, value } = inputRef.current\n      //debug(\"input:\", selectionStart, selectionEnd, value)\n      const newValue =\n        value.substring(0, selectionStart ? selectionStart : 0) + str + value.substring(selectionEnd ? selectionEnd : 0)\n      onChange(lit.copyWithUpdatedValue(newValue))\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.selectionStart = (selectionStart ? selectionStart : 0) + str.length\n          inputRef.current.selectionEnd = inputRef.current.selectionStart\n        }\n      }, 10)\n    }\n  }\n\n  let prefLabelAtom = entity?.getAtomForProperty(ns.SKOS(\"prefLabel\").value)\n  if (!prefLabelAtom) prefLabelAtom = initListAtom\n  const [prefLabels, setPrefLabels] = useRecoilState(prefLabelAtom)\n\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const pushAsPrefLabel = () => {\n    //debug(\"pL:\",prefLabels,lit)\n    let newPrefLabels:Value[] = [],\n      found = false\n    for (const l in prefLabels) {\n      if (prefLabels[l] instanceof LiteralWithId) { \n        const litWi = prefLabels[l] as LiteralWithId\n        if(litWi.language === lit.language) {\n          found = true\n          newPrefLabels = replaceItemAtIndex(prefLabels, Number(l), lit)\n          break\n        }\n      }\n    }\n    if (!found) newPrefLabels = [...prefLabels, lit.copy()]\n    if (newPrefLabels.length) setPrefLabels(newPrefLabels)\n  }\n\n  return (\n    <div\n      className={\"mb-0\" + (preview ? \" withPreview\" : \"\")}\n      style={{\n        display: \"flex\",\n        width: \"100%\",\n        alignItems: \"flex-end\",\n        paddingBottom: padBot,\n        position: \"relative\",\n      }}\n    >\n      {canPushPrefLabel && !error && !globalError && (\n        <span className=\"canPushPrefLabel\">\n          <span onClick={pushAsPrefLabel}>\n            <Tooltip key={lit.id} title={<>Use as the main name or title for this language</>}>\n              <span className=\"img\"></span>\n            </Tooltip>\n          </span>\n        </span>\n      )}\n      {(property.singleLine || !editMD) && (\n        <div style={{ width: \"100%\", position: \"relative\" }}>\n          <TextField\n            variant=\"standard\"\n            inputRef={inputRef}\n            className={lit.language === \"bo\" ? \" lang-bo\" : \"\"}\n            label={label}\n            style={{ width: \"100%\" }}\n            value={lit.value}\n            multiline={!property.singleLine}\n            InputLabelProps={{ shrink: true }}\n            inputProps={{ spellCheck: \"true\", lang: lit.language === \"en\" ? \"en_US\" : lit.language }}\n            onChange={(e) => {\n              const newError = getLangStringError(lit.value)\n              if (newError && error != newError) setError(newError)\n              else updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n              onChange(lit.copyWithUpdatedValue(e.target.value))\n            }}\n            {...(error ? { error: true, helperText: error } : {})}\n            {...(!editable ? { disabled: true } : {})}\n            onFocus={() => {\n              const { value, error } = config.previewLiteral(lit, uiLang)\n              setPreview(value)\n              setError(error)\n            }}\n            onBlur={() => {\n              setPreview(null)\n              setTimeout(() => {\n                if (inputRef.current && document.activeElement != inputRef.current) setKeyboard(false)\n              }, 350)\n            }}\n          />\n          {property.allowMarkDown && (\n            <span\n              className={\"opaHover\"}\n              style={{ position: \"absolute\", right: 0, top: 0, fontSize: \"0px\" }}\n              onClick={() => setEditMD(!editMD)}\n            >\n              {!editMD && <MDIcon style={{ height: \"16px\" }} />}\n              {editMD && <MDIcon style={{ height: \"16px\" }} />}\n            </span>\n          )}\n          {hasKB.length > 0 && hasKB[0].keyboard && (\n            <span\n              onClick={() => {\n                setKeyboard(!keyboard)\n                keepFocus()\n              }}\n              className={\"opaHover \" + (keyboard ? \"on\" : \"\")}\n              style={{\n                position: \"absolute\",\n                right: 0,\n                top: \"0px\",\n                height: \"100%\",\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <KeyboardIcon />\n            </span>\n          )}\n          {hasKB.length > 0 && hasKB[0].keyboard && keyboard && (\n            <div className=\"card px-2 py-2 hasKB\" style={{ display: \"block\", width: \"405px\" }} onClick={keepFocus}>\n              {hasKB[0].keyboard.map((k, i) => (\n                <span\n                  key={i}\n                  className=\"card mx-1 my-1\"\n                  style={{\n                    display: \"inline-flex\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => insertChar(k)}\n                >\n                  {k}\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {!property.singleLine && editMD && (\n        <div style={{ width: \"100%\", position: \"relative\", paddingBottom: \"1px\" }}>\n          <MDEditor\n            textareaProps={{ spellCheck: \"true\", lang: lit.language === \"en\" ? \"en_US\" : lit.language }}\n            value={lit.value}\n            preview=\"edit\"\n            onChange={(e) => {\n              if (e) onChange(lit.copyWithUpdatedValue(e))\n            }}\n            commands={[\n              commands.bold,\n              commands.italic,\n              commands.strikethrough,\n              commands.hr,\n              commands.title,\n              commands.divider,\n              commands.link,\n              commands.quote,\n              commands.code,\n              commands.image,\n              commands.divider,\n              commands.unorderedListCommand,\n              commands.orderedListCommand,\n              commands.checkedListCommand,\n              commands.divider,\n              codeEdit,\n              codePreview,\n            ]}\n            extraCommands={[]}\n          />\n          <span\n            className={\"opaHover on\"}\n            style={{ position: \"absolute\", right: \"5px\", top: \"7px\", fontSize: \"0px\", cursor: \"pointer\" }}\n            onClick={() => setEditMD(!editMD)}\n          >\n            <MDIcon style={{ height: \"15px\" }} title={\"Use rich text editor\"} />\n          </span>\n        </div>\n      )}\n      <LangSelect\n        onChange={(value) => {\n          onChange(lit.copyWithUpdatedLanguage(value))\n        }}\n        value={lit.language || \"\"}\n        property={property}\n        {...(error ? { error: true } : {})}\n        editable={editable}\n        config={config}\n      />\n      {preview && ( // TODO see if fromWylie & MD can both be used ('escape' some chars?)\n        <div className=\"preview-ewts\">\n          <TextField disabled value={preview} />\n          {/*editMD && <MDEditor.Markdown source={fromWylie(lit.value)} /> // not really working  */}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport const LangSelect: FC<{\n  onChange: (value: string) => void\n  value: string\n  property?: PropertyShape\n  disabled?: boolean\n  error?: boolean\n  editable?: boolean\n  config: RDEConfig\n}> = ({ onChange, value, property, disabled, error, editable, config }) => {\n  const onChangeHandler = (event: React.ChangeEvent<{ value: unknown }>) => {\n    onChange(event.target.value as string)\n  }\n\n  const languages = property?.defaultLanguage ? langsWithDefault(property.defaultLanguage, config.possibleLiteralLangs) : config.possibleLiteralLangs\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <TextField\n        select\n        InputLabelProps={{ shrink: true }}\n        className={\"ml-2\"}\n        value={value}\n        style={{ minWidth: 100, flexShrink: 0, marginTop: \"5px\" }}\n        onChange={onChangeHandler}\n        {...(disabled ? { disabled: true } : {})}\n        {...(error ? { error: true, helperText: <br /> } : {})}\n        {...(!editable ? { disabled: true } : {})}\n      >\n        {languages.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.value}\n          </MenuItem>\n        ))}\n        {!languages.some((l) => l.value === value) && (\n          <MenuItem key={value} value={value}>\n            {value}\n          </MenuItem>\n        )}\n      </TextField>\n    </div>\n  )\n}\n\nconst EditString: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  entity: Subject\n  index: number\n  config: RDEConfig\n}> = ({ property, lit, onChange, label, editable, updateEntityState, entity, index, config }) => {\n  const classes = useStyles()\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const dt = property.datatype\n  const pattern = property.pattern ? new RegExp(property.pattern) : undefined\n\n  const [error, setError] = useState<React.ReactNode|null>(null)\n  const [preview, setPreview] = useState<string|null>(null)\n\n  const getPatternError = (val: string) => {\n    let err = \"\"\n    if (pattern !== undefined && val !== \"\" && !val.match(pattern)) {\n      err = ValueByLangToStrPrefLang(property.errorMessage, uiLang)\n      debug(\"err:\", property.errorMessage)\n    }\n    return err\n  }\n\n  let timerPreview = 0\n  let changeCallback = (val: string):void => { return }\n  useEffect(() => {\n    changeCallback = (val: string) => {\n      if (val === \"\") {\n        setError(null)\n        setPreview(null)\n        updateEntityState(EditedEntityState.Saved, lit.id)\n      } else {\n        if (timerPreview) window.clearTimeout(timerPreview)\n        const delay = 350\n        timerPreview = window.setTimeout(() => {\n          const obj = config.previewLiteral(new rdf.Literal(val, lit.language, lit.datatype), uiLang)\n          const { value } = obj\n          let { error } = obj\n          setPreview(value)\n          if (!error)\n            error = getPatternError(val)\n          setError(error)\n          updateEntityState(error ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n        }, delay)\n      }\n      onChange(lit.copyWithUpdatedValue(val))\n    }\n  })\n\n  const getEmptyStringError = (val: string): React.ReactNode | null => {\n    if (!val && property.minCount)\n      return\n        <>\n          <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} /> <i><>{i18n.t(\"error.empty\")}</></i>\n        </>\n    return null\n  }\n\n  useEffect(() => {\n    const newError = error || getEmptyStringError(lit.value)\n    //debug(\"newE:\",newError,error,lit,lit.id)\n    if (newError != error) {\n      setError(newError)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n    }\n  })\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n      <TextField\n        variant=\"standard\"\n        //className={/*classes.root +*/ \" mt-2\"}\n        label={label}\n        style={{ width: \"100%\" }}\n        value={lit.value}\n        // TODO: refactor\n        {...(property.qname !== \"bds:NoteShape-contentLocationStatement\" ? { InputLabelProps: { shrink: true } } : {})}\n        onBlur={(e) => setPreview(null)}\n        onFocus={(e) => changeCallback(e.target.value)}\n        onChange={(e) => changeCallback(e.target.value)}\n        {...(!editable ? { disabled: true } : {})}\n        { ...error ? { error: true, helperText: error } : {} }\n      />\n      {preview && (\n        <div className=\"preview-EDTF\" style={{ width: \"100%\" }}>       \n          <pre>{preview}</pre>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst EditBool: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n}> = ({ property, lit, onChange, label, editable }) => {\n  const classes = useStyles()\n\n  const dt = property.datatype\n\n  let val: boolean | string = !lit.value || lit.value == \"false\" || lit.value == \"0\" ? false : true\n  if (property.defaultValue === null && lit.value == \"\") val = \"unset\"\n\n  //debug(\"bool:\",property.qname,property.defaultValue,lit)\n\n  const changeCallback = (val: string) => {\n    onChange(lit.copyWithUpdatedValue(val == \"false\" ? \"0\" : \"1\"))\n  }\n  return (\n    <TextField\n      select\n      style={{ padding: \"1px\", minWidth: \"250px\" }}\n      label={label}\n      value={val}\n      InputLabelProps={{ shrink: true }}\n      onChange={(e) => {\n        if (e.target.value != \"-\") changeCallback(e.target.value)\n      }}\n      {...(!editable ? { disabled: true } : {})}\n    >\n      {[\"true\", \"false\"].concat(val === \"unset\" ? [val] : []).map((v) => (\n        <MenuItem key={v} value={v}>\n          {i18n.t(\"types.\" + v)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n\nconst EditInt: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  hasNoOtherValue: boolean\n  index: number\n  globalError?: string\n}> = ({ property, lit, onChange, label, editable, updateEntityState, hasNoOtherValue, index, globalError }) => {\n  // used for integers and gYear\n\n  const classes = useStyles()\n\n  const dt = property.datatype\n  const minInclusive = property.minInclusive\n  const maxInclusive = property.maxInclusive\n  const minExclusive = property.minExclusive\n  const maxExclusive = property.maxExclusive\n\n  const getIntError = (val: string) => {\n    let err = \"\"\n    if (globalError) {\n      err = globalError\n    } else if (hasNoOtherValue && val === \"\") {\n      err = i18n.t(\"error.empty\")\n    } else if (val !== undefined && val !== \"\") {\n      const valueInt = parseInt(val)\n      if (minInclusive && minInclusive > valueInt) {\n        err = i18n.t(\"error.superiorTo\", { val: minInclusive })\n      } else if (maxInclusive && maxInclusive < valueInt) {\n        err = i18n.t(\"error.inferiorTo\", { val: maxInclusive })\n      } else if (minExclusive && minExclusive >= valueInt) {\n        err = i18n.t(\"error.superiorToStrict\", { val: minExclusive })\n      } else if (maxExclusive && maxExclusive <= valueInt) {\n        err = i18n.t(\"error.inferiorToStrict\", { val: maxExclusive })\n      }\n    }\n    return err\n  }\n\n  const [error, setError] = useState(\"\") //getIntError(lit.value))\n\n  useEffect(() => {\n    if (!hasNoOtherValue && (lit.value === undefined || lit.value === null || lit.value === \"\")) return\n    const newError = getIntError(lit.value)\n    if (newError != error) {\n      setError(newError)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n    }\n  })\n\n  const changeCallback = (val: string) => {\n    const newError = getIntError(val)\n    if (newError != error) setError(newError)\n    else updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n\n    //debug(\"change:\", newError)\n\n    if (dt && dt.value == xsdgYear) {\n      //pad to four digits in the case of xsdgYear\n      /* eslint-disable no-magic-numbers */\n      if (val.startsWith(\"-\")) {\n        val = \"-\" + val.substring(1).padStart(4, \"0\")\n      } else {\n        val = val.padStart(4, \"0\")\n      }\n    }\n    onChange(lit.copyWithUpdatedValue(val))\n  }\n\n  let value = lit.value\n  if (dt && dt.value == xsdgYear) {\n    // don't display the leading 0\n    //debug(\"val?\", value, lit)\n    value = value.replace(/^(-?)0+/, \"$1\")\n  }\n\n  return (\n    <TextField\n      label={label}\n      style={{ width: 240 }}\n      value={value}\n      {...(error\n        ? {\n            helperText: (\n              <React.Fragment>\n                <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n                <i> {error}</i>\n              </React.Fragment>\n            ),\n            error: true,\n          }\n        : {})}\n      type=\"number\"\n      InputProps={{ inputProps: { min: minInclusive, max: maxInclusive } }}\n      InputLabelProps={{ shrink: true }}\n      onChange={(e) => changeCallback(e.target.value)}\n      {...(!editable ? { disabled: true } : {})}\n    />\n  )\n}\n\nconst xsdgYear = ns.XSD(\"gYear\").value\nconst rdflangString = ns.RDF(\"langString\").value\nconst xsdinteger = ns.XSD(\"integer\").value\nconst xsddecimal = ns.XSD(\"decimal\").value\nconst xsdint = ns.XSD(\"int\").value\nconst xsdboolean = ns.XSD(\"boolean\").value\n\nconst intishTypeList = [xsdinteger, xsddecimal, xsdint]\n\n/**\n * Display component, with DeleteButton\n */\nconst LiteralComponent: FC<{\n  lit: LiteralWithId\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  isUniqueLang: boolean\n  isUniqueValueAmongSiblings: boolean\n  create?: JSX.Element\n  editable: boolean\n  topEntity?: Subject\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  config: RDEConfig\n}> = ({\n  lit,\n  subject,\n  property,\n  canDel,\n  isUniqueValueAmongSiblings,\n  isUniqueLang,\n  create,\n  editable,\n  topEntity,\n  updateEntityState,\n  config\n}) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const index = list.findIndex((listItem) => listItem === lit)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLang)\n\n  //debug(\"lit:\", property.qname, isUniqueValueAmongSiblings, lit.val)\n\n  const onChange: (value: LiteralWithId) => void = (value: LiteralWithId) => {\n    const newList = replaceItemAtIndex(list, index, value)\n    setList(newList)\n  }\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n    updateEntityState(EditedEntityState.Saved, lit.id)\n  }\n\n  useEffect(() => {\n    let error = false\n    const entityQname = topEntity ? topEntity.qname : subject.qname\n    const n = entities.findIndex((e) => e.subjectQname === entityQname)\n    if (n > -1) {\n      const ent = entities[n]\n      if (ent.state === EditedEntityState.Error) error = true\n    }\n    if (!error && (!errors[entityQname] || !Object.keys(errors[entityQname]).length)) {\n      updateEntityState(EditedEntityState.Saved, lit.id)\n    }\n  }, [undos])\n\n  const t = property.datatype\n  let edit, classN\n\n  if (t?.value === rdflangString) {\n    classN = \"langString \" + (lit.value ? \"lang-\" + lit.language : \"\")\n    edit = (\n      <EditLangString\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        {...(property.uniqueLang && !isUniqueLang ? { globalError: i18n.t(\"error.unique\") } : {})}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        entity={topEntity ? topEntity : subject}\n        index={index}\n        config={config}\n      />\n    )\n    // eslint-disable-next-line no-extra-parens\n  } else if (t?.value === xsdgYear || (t && t?.value && intishTypeList.includes(t.value))) {\n    classN = \"gYear intish\"\n    edit = (\n      <EditInt\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        hasNoOtherValue={property.minCount === 1 && list.length === 1}\n        index={index}\n        {...(property.uniqueValueAmongSiblings && !isUniqueValueAmongSiblings\n          ? { globalError: i18n.t(\"error.uniqueV\") }\n          : {})}\n      />\n    )\n  } else if (t?.value === xsdboolean) {\n    edit = (\n      <EditBool\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n      />\n    )\n  } else {\n    edit = (\n      <EditString\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        entity={subject}\n        index={index}\n        config={config}\n      />\n    )\n  }\n\n  return (\n    <>\n    <div className={classN} style={{ display: \"flex\", alignItems: \"flex-end\" /*, width: \"100%\"*/ }}>\n      {edit}\n      <div className=\"hoverPart\">\n        <button\n          className=\"btn btn-link ml-2 px-0 py-0 close-facet-btn\"\n          onClick={deleteItem}\n          {...(!canDel ? { disabled: true } : {})}\n        >\n          <RemoveIcon className=\"my-0 close-facet-btn\" />\n        </button>\n        {create}\n      </div>\n    </div>\n    </>\n  )\n}\n\n//TODO: should probably go to another file\nconst FacetComponent: FC<{\n  subNode: Subject\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  //force?: boolean\n  editable: boolean\n  topEntity: Subject\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  shape: NodeShape\n  config: RDEConfig\n}> = ({ subNode, subject, property, canDel, /*force,*/ editable, topEntity, updateEntityState, shape, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang] = useRecoilState(uiLangState)\n  const index = list.findIndex((listItem) => listItem === subNode)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const deleteItem = () => {\n    updateEntityState(EditedEntityState.Saved, subNode.qname, true)\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n  }\n\n  const targetShape = property.targetShape\n  if (!targetShape) throw \"unable to find target shape of \" + property.lname\n\n  const withDisplayPriority: PropertyShape[] = [],\n    withoutDisplayPriority: PropertyShape[] = []\n  targetShape.properties.map((subprop) => {\n    if (subprop.displayPriority && subprop.displayPriority >= 1) {\n      withDisplayPriority.push(subprop)\n    } else {\n      withoutDisplayPriority.push(subprop)\n    }\n  })\n\n  const [force, setForce] = useState(false)\n  const hasExtra = withDisplayPriority.length > 0 // && isSimplePriority\n  let waitForNoHisto = false\n  const toggleExtra = () => {\n    if (waitForNoHisto) return\n\n    waitForNoHisto = true\n    subject.noHisto(false, -1) // put empty subnodes in history before tmp:allValuesLoaded\n\n    setForce(!force)\n\n    const delay = 350\n    setTimeout(() => {\n      subject.noHisto(false, false) // history back to normal\n      subject.resetNoHisto()\n      waitForNoHisto = false\n    }, delay) // *arbitrary long* delay during which button can't be used\n  }\n\n  const [edit, setEdit] = useRecoilState(uiEditState)\n\n  //debug(\"facet:\", edit, topEntity.qname, subject.qname + \" \" + property.qname + \" \" + subNode.qname)\n\n  let editClass = \"\"\n  if (\n    edit === subject.qname + \" \" + property.qname + \" \" + subNode.qname ||\n    edit.startsWith(subNode.qname + \" \") ||\n    edit.endsWith(\" \" + subject.qname)\n  ) {\n    editClass = \"edit\"\n  }\n\n  return (\n    <>\n      <div\n        className={\"facet \" + editClass + \" editable-\" + editable + \" force-\" + force}\n        onClick={(ev) => {\n          setEdit(subject.qname + \" \" + property.qname + \" \" + subNode.qname)\n          const target = ev.target as Element\n          if (editClass || target?.classList && !target?.classList?.contains(\"close-facet-btn\")) {\n            ev.stopPropagation()\n          }\n        }}\n      >\n        <div className={\"card pt-2 pb-3 pr-3 mt-4 pl-2 \" + (hasExtra ? \"hasDisplayPriority\" : \"\")}>\n          {targetShape.independentIdentifiers && <div className=\"internalId\">{subNode.lname}</div>}\n          {withoutDisplayPriority.map((p, index) => (\n            <PropertyContainer\n              key={index + p.uri}\n              property={p}\n              subject={subNode}\n              embedded={true}\n              force={force}\n              editable={!p.readOnly}\n              owner={subject}\n              topEntity={topEntity}\n              shape={shape}\n              siblingsPath={property.path?.sparqlString}\n              config={config}\n            />\n          ))}\n          {withDisplayPriority.map((p, index) => (\n            <PropertyContainer\n              key={index + p.uri}\n              property={p}\n              subject={subNode}\n              embedded={true}\n              force={force}\n              editable={!p.readOnly}\n              owner={subject}\n              topEntity={topEntity}\n              shape={shape}\n              siblingsPath={property.path?.sparqlString}\n              config={config}\n            />\n          ))}\n          {hasExtra && (\n            <span className=\"toggle-btn btn btn-rouge mt-4\" onClick={toggleExtra}>\n              <>{i18n.t(\"general.toggle\", { show: force ? i18n.t(\"general.hide\") : i18n.t(\"general.show\") })}</>\n            </span>\n          )}\n          <div className=\"close-btn\">\n            {targetShape.description && (\n              <Tooltip title={ValueByLangToStrPrefLang(targetShape.description, uiLang)}>\n                <HelpIcon className=\"help\" />\n              </Tooltip>\n            )}\n            <button\n              className=\"btn btn-link ml-2 px-0 close-facet-btn py-0\"\n              onClick={deleteItem}\n              {...(!canDel ? { disabled: true } : {})}\n            >\n              <CloseIcon className=\"close-facet-btn my-1\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\n//TODO: component to display an external entity that has already been selected, with a delete button to remove it\n// There should probably be a ExtEntityCreate or something like that to allow an entity to be selected\nconst ExtEntityComponent: FC<{\n  extRes: ExtRDFResourceWithLabel\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  onChange: (value: ExtRDFResourceWithLabel, idx: number, removeFirst: boolean | undefined) => void\n  idx: number\n  exists: (uri: string) => boolean\n  editable: boolean\n  owner?: Subject\n  title: string\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  shape: NodeShape,\n  config: RDEConfig\n}> = ({\n  extRes,\n  subject,\n  property,\n  canDel,\n  onChange,\n  idx,\n  exists,\n  editable,\n  owner,\n  title,\n  updateEntityState,\n  shape,\n  config\n}) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const index = list.findIndex((listItem) => listItem === extRes)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const deleteItem = () => {\n    let newList = removeItemAtIndex(list, index)\n    // remove first empty field if alone & displayPriority >= 1\n    if (idx === 1 && newList.length === 1) {\n      const first = newList[0]\n      if (first instanceof ExtRDFResourceWithLabel && first.uri === \"tmp:uri\") newList = []\n    }\n    setList(newList)\n  }\n\n  const [error, setError] = useState(\"\")\n\n  useEffect(() => {\n    let newError\n    const nonEmptyList = list.filter((e) => e instanceof RDFResource && e.uri !== \"tmp:uri\")\n    if (property.minCount && nonEmptyList.length < property.minCount) {\n      newError = i18n.t(\"error.minC\", { count: property.minCount })\n    } else if (property.maxCount && nonEmptyList.length > property.maxCount) {\n      newError = i18n.t(\"error.maxC\", { count: property.maxCount })\n    } else newError = \"\"\n\n    //debug(\"nE?e\",property.qname,newError,error)\n    //debug(\"minC?\",newError,nonEmptyList.length,property.minCount,property.maxCount)\n\n    setError(newError)\n    updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, property.qname)\n  }, [list])\n\n  //, ...extRes.uri === \"tmp:uri\" ? { /*width: \"100%\"*/ } : {} }}>\n  return (\n    <div className={\"extEntity\" + (extRes.uri === \"tmp:uri\" ? \" new\" : \"\")} style={{ position: \"relative\" }}>\n      <div\n        style={{\n          ...extRes.uri !== \"tmp:uri\"\n            ? {\n                display: \"inline-flex\",\n                width: \"auto\",\n                backgroundColor: \"#f0f0f0\",\n                borderRadius: \"4px\",\n                border: \"1px solid #ccc\",\n                flexDirection: \"row\",\n                position: \"static\",\n              }\n            : {\n                display: \"flex\",\n              },\n        }}\n        {...(extRes.uri !== \"tmp:uri\" ? { className: \"px-2 py-1 mr-2 mt-2 card\" } : {})}\n      >\n        <config.resourceSelector\n          value={extRes}\n          onChange={onChange}\n          property={property}\n          idx={idx}\n          exists={exists}\n          subject={subject}\n          editable={editable}\n          {...(owner ? { owner } : {})}\n          title={title}\n          globalError={error}\n          updateEntityState={updateEntityState}\n          shape={shape}\n          config={config}\n        />\n        {extRes.uri !== \"tmp:uri\" && (\n          <button className={\"btn btn-link ml-2 px-0\"} onClick={deleteItem} {...(!canDel ? { disabled: true } : {})}>\n            {extRes.uri === \"tmp:uri\" ? <RemoveIcon /> : <CloseIcon />}\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\n//TODO: component to display an external entity that has already been selected, with a delete button to remove it\n// There should probably be a ExtEntityCreate or something like that to allow an entity to be selected\nconst SelectComponent: FC<{\n  res: LiteralWithId | RDFResourceWithLabel\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  canSelectNone: boolean\n  selectIdx: number\n  editable: boolean\n  create?: JSX.Element\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n}> = ({ res, subject, property, canDel, canSelectNone, selectIdx, editable, create, updateEntityState }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang, setUiLang] = useRecoilState(uiLangState)\n  const [uiLitLang, setUiLitLang] = useRecoilState(uiLitLangState)\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [uiTab] = useRecoilState(uiTabState)\n  const entity = entities.findIndex((e, i) => i === uiTab)\n\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLitLang)\n\n  let possibleValues = property.in\n  if (possibleValues == null) throw \"can't find possible list for \" + property.uri\n\n  if (canSelectNone) possibleValues = [noneSelected, ...possibleValues]\n\n  const index = selectIdx\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n  }\n\n  const getElementFromValue = (value: string, checkActualValue = false) => {\n    if (possibleValues === null) return null\n    for (const v of possibleValues) {\n      if (v.id === value || checkActualValue && v.value === value) {\n        return v\n      }\n    }\n    debug(\"error cannot get element from value \" + value)\n    return null\n  }\n\n  const val = res instanceof RDFResourceWithLabel ? res : getElementFromValue(list[index].value, true)\n\n  //debug(\"selec:\", property.qname, index, list, collec, listOrCollec, val, val?.id, res, res?.id, property)\n\n  const onChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>) => void = (event) => {\n    const resForNewValue = getElementFromValue(event.target.value as string)\n    if (resForNewValue == null) {\n      throw \"getting value from SelectComponent that's not in the list of possible values \" + event.target.value\n    }\n    let newList\n    if (resForNewValue == noneSelected && canDel) {\n      newList = removeItemAtIndex(list, index)\n    } else {\n      newList = replaceItemAtIndex(list, index, resForNewValue)\n    }\n    setList(newList)\n  }\n\n  const classes = useStyles()\n\n  // does this work? to me using a \"setXyz\" in a condition must fail (should work encapsulated in a useEffect though)\n  if (possibleValues.length == 1 && list.length == 0) {\n    setList([possibleValues[0]])\n  }\n\n  const [error, setError] = useState(\"\")\n  const valueNotInList = !possibleValues.some((pv) => pv.id === val?.id)\n  useEffect(() => {\n    if (valueNotInList) {\n      //debug(\"not in list:\",property.path.sparqlString+\"_\"+selectIdx,res,val,possibleValues)\n      setError(i18n.t(\"error.select\", { val: val?.value }))\n      updateEntityState(EditedEntityState.Error, property.path?.sparqlString + \"_\" + selectIdx)\n    } else {\n      updateEntityState(EditedEntityState.Saved, property.path?.sparqlString + \"_\" + selectIdx)\n    }\n  }, [valueNotInList])\n\n  useEffect(() => {\n    return () => {\n      const inOtherEntity = !window.location.href.includes(\"/\" + entities[entity]?.subjectQname + \"/\")\n      if (!inOtherEntity)\n        updateEntityState(EditedEntityState.Saved, property.path?.sparqlString + \"_\" + selectIdx, false, !inOtherEntity)\n    }\n  }, [])\n\n  if (possibleValues.length > 1 || error) {\n  return <>\n      <div className=\"resSelect\" style={{ display: \"inline-flex\", alignItems: \"flex-end\" }}>\n        <TextField\n          select\n          className={\"selector mr-2\"}\n          value={val?.id}\n          key={\"textfield_\" + selectIdx + \"_\" + index}\n          style={{ padding: \"1px\", minWidth: \"250px\" }}\n          onChange={onChange}\n          label={[\n            propLabel, // ? propLabel : \"[unlabelled]\",\n            helpMessage ? (\n              <Tooltip key={\"tooltip_\" + selectIdx + \"_\" + index} title={helpMessage}>\n                <HelpIcon className=\"help\" />\n              </Tooltip>\n            ) : null,\n          ]}\n          {...(error\n            ? {\n                helperText: (\n                  <React.Fragment>\n                    <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n                    <i> {error}</i>\n                  </React.Fragment>\n                ),\n                error: true,\n              }\n            : {})}\n          {...(!editable ? { disabled: true } : {})}\n        >\n          {possibleValues.map((v, k) => {\n            //debug(\"possible:\",v,v.uri)\n            if (v instanceof RDFResourceWithLabel) {\n              const r = v as RDFResourceWithLabel\n              const label = ValueByLangToStrPrefLang(r.prefLabels, uiLitLang)\n              const span = <span>{label ? label : r.lname}</span>\n              return (\n                <MenuItem key={\"menu-uri_\" + selectIdx + r.id} value={r.id} className=\"withDescription\">\n                  {r.description ? (\n                    <Tooltip title={ValueByLangToStrPrefLang(r.description, uiLitLang)}>{span}</Tooltip>\n                  ) : \n                    span\n                  }\n                </MenuItem>\n              )\n            } else {\n              const l = v as LiteralWithId\n              return (\n                <MenuItem\n                  key={\"menu-lit_\" + selectIdx + l.id + \"_\" + index + \"_\" + k}\n                  value={l.id}\n                  className=\"withDescription\"\n                >\n                  {l.value}\n                </MenuItem>\n              )\n            }\n          })}\n          {valueNotInList && (\n            <MenuItem\n              key={\"extra-val-id\"}\n              value={val?.id}\n              className=\"withDescription\"\n              style={{ color: \"red\" }}\n              disabled\n            >\n              {val?.value}\n            </MenuItem>\n          )}\n        </TextField>\n        <div className=\"hoverPart\">\n          {canDel && (\n            <button className=\"btn btn-link mx-0 px-0 py-0\" onClick={deleteItem}>\n              <RemoveIcon />\n            </button>\n          )}\n          {create}\n        </div>\n      </div>\n      </>\n    }\n    return <></>\n}\n\nexport default ValueList\n","/* eslint-disable no-extra-parens */\nimport React, { useState, FC, useEffect, ChangeEvent } from \"react\"\nimport { Subject, RDFResourceWithLabel, RDFResource } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { FiPower as LogoutIcon } from \"react-icons/fi\"\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport i18n from \"i18next\"\nimport { atom, useRecoilState, useRecoilValue, selectorFamily } from \"recoil\"\nimport { FormHelperText, FormControl } from \"@material-ui/core\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport { history as undoHistory } from \"../helpers/observer\"\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\"\nimport {\n  uiDisabledTabsState,\n  uiLangState,\n  uiLitLangState,\n  uiTabState,\n  userIdState,\n  savePopupState,\n} from \"../atoms/common\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { Entity, EditedEntityState, entitiesAtom, defaultEntityLabelAtom } from \"./EntitySelectorContainer\"\nimport * as rdf from \"rdflib\"\nimport { CloseIcon } from \"../routes/layout/icons\"\n\nconst debug = require(\"debug\")(\"rde:entity:selector\")\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  }\n}\n\nexport const EntityInEntitySelectorContainer: FC<{ entity: Entity, index: number, config: RDEConfig }> = ({ entity, index, config }) => {\n  const [uiLang] = useRecoilState(uiLangState)\n  const [uiLitLang] = useRecoilState(uiLitLangState)\n  const [labelValues] = useRecoilState(!entity.preloadedLabel ? entity.subjectLabelState : defaultEntityLabelAtom)\n  const [tab, setTab] = useRecoilState(uiTabState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [popupOn, setPopupOn] = useRecoilState(savePopupState)\n\n  const history = useHistory()\n\n  const prefLabels = labelValues ? RDFResource.valuesByLang(labelValues) : null\n  const label = !entity.preloadedLabel ? lang.ValueByLangToStrPrefLang(prefLabels, uiLitLang) : entity.preloadedLabel\n  const icon = config.iconFromEntity(entity)\n  const shapeQname = entity.shapeQname\n    ? entity.shapeQname\n    : entities[index] && entities[index].shapeQname\n    ? entities[index].shapeQname\n    : null\n\n  //debug(\"sQn:\", icon) //, index, tab, shapeQname, entity.shapeRef?.qname, entity.shapeRef, entity.subjectQname)\n\n  const link =\n    icon && icon.startsWith(\"user\") ? \"/profile\" : \"/edit/\" + entity.subjectQname + (shapeQname ? \"/\" + shapeQname : \"\")\n\n  const allLoaded = entities.reduce((acc, e) => acc && e.state !== EditedEntityState.Loading, true)\n\n  const handleClick = (event: ChangeEvent<unknown>, newTab: number): void => {\n    if (newTab !== tab) {\n      setDisabled(true)\n      setTab(newTab)\n      setPopupOn(false)\n    }\n  }\n\n  const closeEntity = async (ev: React.MouseEvent) => {\n    ev.persist()\n    if (entity.state === EditedEntityState.NeedsSaving || entity.state === EditedEntityState.Error) {\n      const go = window.confirm(\"unsaved data will be lost\")\n      if (!go) return\n    }\n    // update user session\n    config.setUserMenuState(\n      entity.subjectQname,\n      shapeQname,\n      !entity.preloadedLabel ? (label && entity.subject?.lname ? entity.subject?.lname : label) : entity.preloadedLabel,\n      true,\n      null\n    )\n    // remove data in local storage\n    await config.setUserLocalEntity(entity.subjectQname, shapeQname, \"\", true, userId, entity.etag, false)\n    // remove history for entity\n    if (undoHistory) {\n      const uri = config.prefixMap.uriFromQname(entity.subjectQname)\n      if (undoHistory[uri]) delete undoHistory[uri]\n    }\n\n    // prevent click event\n    ev.preventDefault()\n    ev.stopPropagation()\n\n    const newList = [...entities.filter((e, i) => i !== index)]\n    setEntities(newList)\n\n    // if closing self, go back to home page\n    if (index === tab) {\n      setTab(-1)\n      history.push(\"/\")\n    } else if (tab <= newList.length && tab !== -1) {\n      // keep current tab open\n      const newIndex = newList.findIndex((e) => e.subjectQname === entities[index].subjectQname)\n      setTab(newIndex)\n    } else {\n      // case of closing from /new route\n      setTab(-1)\n    }\n    return false\n  }\n\n  //debug(\"entity?\", entity.alreadySaved, entity, tab, entities[tab], entities.map(e => e.subjectQname+\":\"+e.alreadySaved))\n\n  // update user session\n  config.setUserMenuState(\n    entity.subjectQname,\n    shapeQname,\n    !entity.preloadedLabel ? (entity.subject?.lname ? entity.subject?.lname : label) : entity.preloadedLabel,\n    false,\n    entity.etag\n  )\n\n  return (\n    <>\n      <Tab\n        key={entity.subjectQname}\n        {...a11yProps(index)}\n        className={index === tab ? \"Mui-selected\" : \"\"}\n        onClick={(e) => handleClick(e, index)}\n        {...(disabled ? { disabled: true } : {})}\n        label={\n          <>\n            <Link to={link}>\n              {icon && (\n                <img\n                  className=\"entity-type\"\n                  src={\n                    \"/icons/\" +\n                    icon.toLowerCase() +\n                    (index === tab ? \"_\" : \"\") +\n                    (icon && icon.startsWith(\"User\") ? \".png\" : \".svg\")\n                  }\n                />\n              )}\n              <span style={{ marginLeft: 30, marginRight: \"auto\", textAlign: \"left\" }}>\n                <span>{label && label != \"...\" ? label : entity.subject?.lname ? entity.subject.lname : label}</span>\n                <br />\n                <span className=\"RID\">{entity.subjectQname}</span>\n              </span>\n            </Link>\n            <span className={\"state state-\" + entity.state}></span>\n            <CloseIcon className=\"close-facet-btn\" onClick={closeEntity} />\n          </>\n        }\n      />\n    </>\n  )\n}\n\nexport default EntityInEntitySelectorContainer\n","/* eslint-disable no-extra-parens */\nimport React, { useState, FC, useEffect, ChangeEvent } from \"react\"\nimport {\n  Subject,\n  RDFResourceWithLabel,\n  RDFResource,\n  Value,\n  LiteralWithId,\n} from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { FiPower as LogoutIcon } from \"react-icons/fi\"\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport { CloseIcon } from \"../routes/layout/icons\"\nimport i18n from \"i18next\"\nimport { atom, useRecoilState, useRecoilValue, selectorFamily, RecoilState } from \"recoil\"\nimport { useAuth0 } from \"@auth0/auth0-react\"\nimport { FormHelperText, FormControl } from \"@material-ui/core\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport { history as undoHistory } from \"../helpers/observer\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\"\nimport {\n  uiLangState,\n  uiTabState,\n  uiEditState,\n  profileIdState,\n  uiGroupState,\n  uiDisabledTabsState,\n  userIdState,\n} from \"../atoms/common\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport * as lang from \"../helpers/lang\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { EntityInEntitySelectorContainer } from \"./EntityInEntitySelectorContainer\"\nimport { sessionLoadedState } from \"../atoms/common\"\n\nconst debug = require(\"debug\")(\"rde:entity:selector\")\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nexport enum EditedEntityState {\n  Error,\n  Saved,\n  NeedsSaving,\n  Loading,\n  NotLoaded,\n}\n\nexport type Entity = {\n  subjectQname: string\n  subject: Subject | null\n  shapeQname: string\n  state: EditedEntityState\n  subjectLabelState: RecoilState<Array<Value>>\n  preloadedLabel?: string\n  etag: string | null\n  loadedUnsavedFromLocalStorage: boolean // true when localStorage has unsaved changes\n}\n\nexport const entitiesAtom = atom<Array<Entity>>({\n  key: \"entities\",\n  default: [],\n})\n\nexport const defaultEntityLabelAtom = atom<Array<Value>>({\n  key: \"defaultEntityLabelAtom\",\n  default: [new LiteralWithId(\"...\", \"en\")], // TODO: use the i18n stuff\n})\n\nexport const EntitySelector: FC<{ props: RDEProps, config: RDEConfig }> = ({ props, config }) => {\n  const classes = useStyles()\n  const { user, isAuthenticated, isLoading, logout } = useAuth0()\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [sessionLoaded, setSessionLoaded] = useRecoilState(sessionLoadedState)\n  const [uiLang] = useRecoilState(uiLangState)\n  const [tab, setTab] = useRecoilState(uiTabState)\n  const handleChange = (event: ChangeEvent<unknown>, newTab: number): void => {\n    //debug(\"newTab:\", newTab)\n    setTab(newTab)\n  }\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const history = useHistory()\n\n  // restore user session on startup\n  useEffect(() => {\n    const session = config.getUserMenuState()\n    session.then((entities) => {\n      //debug(\"session:\", obj, props, props.location)\n      if (!entities) return\n      const newEntities: Entity[] = []\n      for (const k of Object.keys(entities)) {\n        newEntities.push({\n          subjectQname: k,\n          subject: null,\n          shapeQname: entities[k].shapeQname,\n          subjectLabelState: defaultEntityLabelAtom,\n          state: EditedEntityState.NotLoaded,\n          preloadedLabel: entities[k].preloadedLabel,\n          etag: entities[k].etag,\n          loadedUnsavedFromLocalStorage: true\n        })\n      }\n      if (newEntities.length) {\n        setEntities(newEntities)\n      }\n      if (!sessionLoaded) setSessionLoaded(true)\n      if (props.location?.pathname == \"/new\") setTab(newEntities.length)\n      if (props.location?.pathname.startsWith(\"/edit/\")) {\n        const id = props.location.pathname.split(\"/\")[2] // eslint-disable-line no-magic-numbers\n        let found = false\n        newEntities.map((e, i) => {\n          if (e.subjectQname === id) {\n            found = true\n            setTab(i)\n          }\n        })\n        // case of opening an entity not in session yet\n        if (!found) setTab(newEntities.length)\n      }\n    })\n  }, [])\n\n  const closeEntities = async (ev: React.MouseEvent) => {\n    let warn = false\n    for (const entity of entities) {\n      if (entity.state === EditedEntityState.NeedsSaving || entity.state === EditedEntityState.Error) {\n        warn = true\n        break\n      }\n    }\n    if (warn) {\n      const go = window.confirm(\"unsaved data will be lost\")\n      if (!go) return\n    }\n    for (const entity of entities) {\n      const shapeQname = entity.shapeQname\n\n      // update user session\n      await config.setUserMenuState(entity.subjectQname, shapeQname, \"\", true, null)\n\n      // remove data in local storage\n      await config.setUserLocalEntity(entity.subjectQname, shapeQname, \"\", true, userId, entity.etag, false)\n\n      // remove history for entity\n      if (undoHistory) {\n        const uri = config.prefixMap.uriFromQname(entity.subjectQname)\n        if (undoHistory[uri]) delete undoHistory[uri]\n      }\n    }\n\n    setEntities([])\n    setTab(-1)\n    history.push(\"/\")\n\n    return false\n  }\n\n  return (\n    <div\n      className=\"tabs-select\"\n      onClick={() => {\n        setEdit(\"\")\n        setGroupEd(\"\")\n      }}\n    >\n      <h3>Edition</h3>\n      <h4>\n        Open entities\n        <span title={i18n.t(\"general.close\")}>\n          <CloseIcon className=\"close-facet-btn\" onClick={closeEntities} />\n        </span>\n      </h4>\n      <Tabs value={tab === -1 ? false : tab} onChange={handleChange} aria-label=\"entities\">\n        {entities.map((entity: Entity, index) => {\n          return <EntityInEntitySelectorContainer entity={entity} index={index} key={index} config={config} />\n        })}\n        <Tab\n          key=\"new\"\n          {...a11yProps(entities.length)}\n          id=\"new-load\"\n          label={\n            <Link to=\"/new\" className=\"btn-rouge\" onClick={() => setDisabled(false)}>\n              NEW / LOAD\n            </Link>\n          }\n        />\n      </Tabs>\n    </div>\n  )\n}\n\nexport default EntitySelector\n","import * as rdf from \"rdflib\"\nimport i18n from \"i18next\"\nimport { useState, useEffect, useContext } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport { RDFResource, RDFResourceWithLabel, EntityGraph, Subject } from \"./types\"\nimport { NodeShape, prefLabel } from \"./shapes\"\nimport {\n  profileIdState,\n  uiReadyState,\n  sessionLoadedState,\n  reloadEntityState,\n  uiDisabledTabsState,\n} from \"../../atoms/common\"\nimport RDEConfig from \"../rde_config\"\nimport { entitiesAtom, EditedEntityState, defaultEntityLabelAtom } from \"../../containers/EntitySelectorContainer\"\n\ninterface StoreWithEtag {\n  store: rdf.Store\n  etag: string | null\n}\n\nconst debug = require(\"debug\")(\"rde:rdf:io\")\n\nconst defaultFetchTtlHeaders = new Headers()\ndefaultFetchTtlHeaders.set(\"Accept\", \"text/turtle\")\n\nexport const fetchTtl = async (\n  url: string,\n  allow404 = false,\n  headers = defaultFetchTtlHeaders,\n  allowEmptyEtag = true\n): Promise<StoreWithEtag> => {\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(url, { headers: headers })\n\n    // eslint-disable-next-line no-magic-numbers\n    if (allow404 && response.status == 404) {\n      resolve({ store: rdf.graph(), etag: null })\n      return\n    }\n    // eslint-disable-next-line no-magic-numbers\n    if (response.status != 200) {\n      reject(new Error(\"cannot fetch \" + url))\n      return\n    }\n\n    const etag = response.headers.get(\"etag\")\n    if (!allowEmptyEtag && !etag) {\n      reject(new Error(\"no etag returned from \" + url))\n      return\n    }\n\n    const body = await response.text()\n    const store: rdf.Store = rdf.graph()\n    try {\n      rdf.parse(body, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n    } catch {\n      reject(new Error(\"cannot parse result of \" + url + \" in ttl\"))\n      return\n    }\n    resolve({ store, etag })\n  })\n}\n\nconst defaultPutTtlHeaders = new Headers()\ndefaultPutTtlHeaders.set(\"Content-Type\", \"text/turtle\")\n\nexport const putTtl = async (\n  url: string,\n  s: rdf.Store,\n  method = \"PUT\",\n  headers = defaultPutTtlHeaders,\n  allowEmptyEtag = true\n): Promise<string|null> => {\n  return new Promise(async (resolve, reject) => {\n    const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n    rdf.serialize(defaultRef, s, undefined, \"text/turtle\", async function (err, str) {\n      if (err) {\n        reject(err)\n        return\n      }\n      const response = await fetch(url, { headers, method, body: str })\n      const etag = response.headers.get(\"etag\")\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status == 403) {\n        reject(new Error(i18n.t(\"error.unauthorized\", { url })))\n        return\n      }\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status == 412) {\n        reject(new Error(i18n.t(\"error.modified\")))\n        return\n      }\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status > 400) {\n        reject(new Error(\"error \" + response.status + \" when saving \" + url))\n        return\n      }\n\n      if (!etag && !allowEmptyEtag) {\n        reject(new Error(\"no etag returned from \" + url))\n        return\n      }\n\n      resolve(etag)\n    })\n  })\n}\n\nexport interface IFetchState {\n  status: string\n  error?: string\n}\n\n// maps of the shapes and entities that have been downloaded so far, with no gc\nexport const shapesMap: Record<string, NodeShape> = {}\n\nexport function ShapeFetcher(shapeQname: string, entityQname: string, config: RDEConfig) {\n  const [loadingState, setLoadingState] = useState<IFetchState>({ status: \"idle\", error: undefined })\n  const [shape, setShape] = useState<NodeShape>()\n  const [current, setCurrent] = useState(shapeQname)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  //debug(\"fetcher: shape \", shapeQname, current, shape)\n\n  useEffect(() => {\n    if (current != shapeQname) {\n      reset()\n    }\n  })\n\n  const reset = () => {\n    setCurrent(shapeQname)\n    setShape(undefined)\n    setLoadingState({ status: \"idle\", error: undefined })\n  }\n\n  useEffect(() => {\n    //debug(\"shM:\", shapeQname, shapesMap, current)\n    if (shape && shapeQname === current && loadingState.status === \"fetched\") {\n      return\n    }\n    if (shapeQname in shapesMap) {\n      setLoadingState({ status: \"fetched\", error: undefined })\n      setShape(shapesMap[shapeQname])\n      return\n    }\n    async function fetchResource(shapeQname: string) {\n      setLoadingState({ status: \"fetching\", error: undefined })\n      const shapeNode = rdf.sym(config.prefixMap.uriFromQname(shapeQname))\n      const loadShape = config.getShapesDocument(shapeNode)\n      try {\n        const shape: NodeShape = await loadShape\n        shapesMap[shapeQname] = shape\n        setShape(shape)\n\n        if (entityQname && entityQname !== \"tmp:uri\") {\n          const index = entities.findIndex((e) => e.subjectQname === entityQname)\n          if (index !== -1) {\n            const newEntities = [...entities]\n            newEntities[index] = {\n              ...newEntities[index],\n              shapeQname: shape.qname,\n            }\n            //debug(\"shape:\", shape, entityQname, index, newEntities, newEntities[index])\n            setEntities(newEntities)\n          }\n        }\n\n        setLoadingState({ status: \"fetched\", error: undefined })\n      } catch (e) {\n        debug(\"shape error:\", e)\n        setLoadingState({ status: \"error\", error: \"error fetching shape or ontology\" })\n      }\n    }\n    if (current === shapeQname) fetchResource(shapeQname)\n  }, [current, entities])\n\n  const retVal =\n    shapeQname === current && shape && shapeQname == shape.qname\n      ? { loadingState, shape, reset }\n      : { loadingState: { status: \"loading\", error: undefined }, shape: undefined, reset }\n\n  return retVal //{ loadingState, shape, reset }\n}\n\nexport function EntityFetcher(entityQname: string, shapeQname: string, config: RDEConfig, unmounting = { val: false }) {\n  const [entityLoadingState, setEntityLoadingState] = useState<IFetchState>({ status: \"idle\", error: undefined })\n  const [entity, setEntity] = useState<Subject>(Subject.createEmpty())\n  const [uiReady, setUiReady] = useRecoilState(uiReadyState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [sessionLoaded, setSessionLoaded] = useRecoilState(sessionLoadedState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [profileId, setProfileId] = useRecoilState(profileIdState)\n  const [current, setCurrent] = useState(entityQname)\n  const [reloadEntity, setReloadEntity] = useRecoilState(reloadEntityState)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n\n  //debug(\"reload?\", reloadEntity, unmounting)\n\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ef\")\n      unmounting.val = true\n    }\n  }, [])\n\n  useEffect(() => {\n    if (unmounting.val) return\n    if (current != entityQname) {\n      reset()\n    }\n  })\n\n  const reset = () => {\n    setCurrent(entityQname)\n    setEntity(Subject.createEmpty())\n    setEntityLoadingState({ status: \"idle\", error: undefined })\n  }\n\n  useEffect(() => {\n    if (unmounting.val) return\n    async function fetchResource(entityQname: string) {\n      setEntityLoadingState({ status: \"fetching\", error: undefined })\n\n      debug(\"fetching\", entity, shapeQname, entityQname, entities) //, isAuthenticated, idToken)\n\n      // TODO: UI \"save draft\" / \"publish\"\n\n      let loadRes, loadLabels, localRes, useLocal, notFound, etag, res, needsSaving\n      const localEntities = await config.getUserLocalEntities()\n      // 1 - check if entity has local edits (once shape is defined)\n      //debug(\"local?\", shapeQname, reloadEntity,entityQname, localEntities[entityQname])\n      if (reloadEntity !== entityQname && shapeQname && localEntities[entityQname] !== undefined) {\n        useLocal = window.confirm(\"found previous local edits for this resource, load them?\")\n        const store: rdf.Store = rdf.graph()\n        if (useLocal) {\n          try {\n            rdf.parse(localEntities[entityQname].ttl, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n            etag = localEntities[entityQname].etag\n            needsSaving = localEntities[entityQname].needsSaving\n            debug(\"nS:\", needsSaving)\n          } catch (e) {\n            debug(e)\n            debug(localEntities[entityQname])\n            window.alert(\"could not load local data, fetching remote version\")\n            useLocal = false\n            delete localEntities[entityQname]\n          }\n        } else {\n          rdf.parse(\"\", store, rdf.Store.defaultGraphURI, \"text/turtle\")\n        }\n        res = { store, etag }\n      }\n\n      // 2 - try to load data from server if not or if user wants to\n\n      const entityUri = config.prefixMap.uriFromQname(entityQname)\n      const entityNode = rdf.sym(entityUri)\n\n      try {\n        if (!useLocal) {\n          res = await config.getDocument(entityNode)\n          needsSaving = false\n        }\n      } catch (e) {\n        // 3 - case when entity is not on server and user does not want to use local edits that already exist\n        if (localRes) res = { store: localRes, etag }\n        else notFound = true\n      }\n\n      // load session before updating entities\n      let _entities = entities\n      if (!sessionLoaded) {\n        const obj = await config.getUserMenuState()\n        //debug(\"session:\", obj)\n        if (obj) {\n          _entities = []\n          for (const k of Object.keys(obj)) {\n            _entities.push({\n              subjectQname: k,\n              subject: null,\n              shapeQname: obj[k].shapeQname,\n              subjectLabelState: defaultEntityLabelAtom,\n              state: EditedEntityState.NotLoaded,\n              preloadedLabel: obj[k].preloadedLabel,\n              etag: obj[k].etag,\n              loadedUnsavedFromLocalStorage: true\n            })\n          }\n        }\n      }\n\n      try {\n        // TODO: redirection to /new instead of \"error fetching entity\"? create missing entity?\n        if (notFound) throw Error(\"not found\")\n\n        const resInfo = await config.getDocument(entityNode)\n        const subject = resInfo.subject\n        etag = resInfo.etag\n        if (!res) res = await loadRes\n\n        const actualQname = entityQname,\n          actualUri = entityUri\n        /* TODO: refactor\n        if (entityQname === \"tmp:user\") {\n          // TODO: in several steps with tests to avoid crash\n          const keys = Object.keys(entityStore.subjectIndex)\n          actualQname = qnameFromUri(keys[0].replace(/(^<)|(>$)/g, \"\"))\n          actualUri = uriFromQname(actualQname)\n          if (!profileId) setProfileId(actualQname)\n        }*/\n\n        // update state with loaded entity\n        let index = _entities.findIndex((e) => e.subjectQname === actualQname)\n        const newEntities = [..._entities]\n        if (index === -1) {\n          newEntities.push({\n            subjectQname: actualQname,\n            state: EditedEntityState.Loading,\n            shapeQname: shapeQname,\n            subject: null,\n            subjectLabelState: defaultEntityLabelAtom,\n            etag: etag,\n            loadedUnsavedFromLocalStorage: false\n          })\n          index = newEntities.length - 1\n        }\n        if (index >= 0 && newEntities[index] && !newEntities[index].subject) {\n          newEntities[index] = {\n            ...newEntities[index],\n            subject,\n            state: EditedEntityState.Saved,\n            subjectLabelState: subject.getAtomForProperty(prefLabel.uri),\n            preloadedLabel: \"\",\n            etag: etag,\n            ...etag ? { loadedUnsavedFromLocalStorage: needsSaving } : {},\n          }\n\n          // DONE: issue #2 fixed, fully using getEntities\n          setEntities(newEntities)\n\n          //debug(\"fetched\")\n        }\n        setEntityLoadingState({ status: \"fetched\", error: undefined })\n        setEntity(subject)\n        setUiReady(true)\n\n        if (reloadEntity) setReloadEntity(\"\")\n      } catch (e:any) {\n        debug(\"e:\", e.message, e)\n        setDisabled(false)\n        setEntityLoadingState({\n          status: \"error\",\n          error: e.message !== \"not found\" ? \"error fetching entity\" : \"not found\",\n        })\n        if (!entities.length && _entities.length) {\n          setEntities(_entities)\n        }\n      }\n      if (!sessionLoaded) setSessionLoaded(true)\n    }\n    const index = entities.findIndex(\n      (e) => e.subjectQname === entityQname || entityQname == \"tmp:user\" && e.subjectQname === profileId\n    )\n\n    if (\n      reloadEntity === entityQname && !entities[index].subject ||\n      current === entityQname && (index === -1 || entities[index] && !entities[index].subject)\n    ) {\n      if (entityQname != \"tmp:user\" || idToken) fetchResource(entityQname)\n    } else {\n      if (unmounting.val) return\n      else setEntityLoadingState({ status: \"fetched\", error: undefined })\n\n      const subj: Subject | null = entities[index] ? entities[index].subject : null\n\n      if (unmounting.val) return\n      else if (subj) setEntity(subj)\n\n      if (unmounting.val) return\n      else setUiReady(true)\n    }\n  }, [current, shapeQname, idToken, profileId, reloadEntity])\n\n  const retVal =\n    entityQname === current\n      ? { entityLoadingState, entity, reset }\n      : { entityLoadingState: { status: \"loading\", error: undefined }, entity: Subject.createEmpty(), reset }\n\n  return retVal\n}\n","import React, { useState, FC, ReactElement, useRef, useMemo, useCallback, useEffect } from \"react\"\nimport PropertyContainer from \"./PropertyContainer\"\nimport { RDFResource, Subject, errors, LiteralWithId } from \"../helpers/rdf/types\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { PropertyGroup, PropertyShape, NodeShape } from \"../helpers/rdf/shapes\"\nimport { uiLangState, uiEditState, uiNavState, uiGroupState, initListAtom } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { ErrorIcon } from \"../routes/layout/icons\"\nimport { atom, useRecoilState, useRecoilValue } from \"recoil\"\nimport { OtherButton } from \"./ValueList\"\nimport i18n from \"i18next\"\nimport { MapContainer, LayersControl, TileLayer, Popup, Marker, useMapEvents } from \"react-leaflet\"\nimport ReactLeafletGoogleLayer from \"react-leaflet-google-layer\"\nimport { GeoSearchControl, OpenStreetMapProvider, GoogleProvider } from \"leaflet-geosearch\"\n\nimport L from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport \"leaflet-geosearch/dist/geosearch.css\"\n\nconst debug = require(\"debug\")(\"rde:entity:propertygroup\")\n\nconst redIcon = new L.Icon({\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n  iconSize: [25, 41], // eslint-disable-line no-magic-numbers\n  iconAnchor: [12, 41], // eslint-disable-line no-magic-numbers\n  popupAnchor: [1, -34], // eslint-disable-line no-magic-numbers\n  shadowSize: [41, 41], // eslint-disable-line no-magic-numbers\n})\n\nfunction DraggableMarker({ pos, icon, setCoords }: {pos: L.LatLng, icon: L.Icon, setCoords: (val: L.LatLng) => void}) {\n  const [position, setPosition] = useState<L.LatLng>(pos)\n  const markerRef = useRef<any>(null)\n  const eventHandlers = useMemo(\n    () => ({\n      dragend() {\n        const marker = markerRef.current\n        if (marker != null) {\n          setPosition(marker.getLatLng())\n          setCoords(marker.getLatLng())\n        }\n      },\n    }),\n    []\n  )\n\n  //debug(\"mark:\",markerRef,pos)\n  useEffect(() => {\n    if (markerRef.current && (markerRef.current.lat != pos.lat || markerRef.current.lng != pos.lng)) {\n      markerRef.current.setLatLng(pos)\n    }\n  })\n\n  return (\n    <Marker draggable={true} eventHandlers={eventHandlers} position={position} icon={icon} ref={markerRef}></Marker>\n  )\n}\n\nconst MapEventHandler = ({ coords, redraw, setCoords, config }: { coords: L.LatLng, \n    redraw: boolean, setCoords: (val: L.LatLng) => void, config: RDEConfig}) => {\n  const map = useMapEvents({\n    click: (ev) => {\n      debug(\"click:\", ev)\n      setCoords(ev.latlng)\n    },\n  })\n\n  useEffect(() => {\n    map.setView(coords, map.getZoom())\n  })\n\n  useEffect(() => {\n    const provider = config.googleMapsAPIKey ? new GoogleProvider({ apiKey: config.googleMapsAPIKey }) : new OpenStreetMapProvider()\n\n    const searchControl = GeoSearchControl({\n      provider,\n      showPopUp: false,\n      showMarker: false,\n    })\n    map.addControl(searchControl)\n    map.on(\"geosearch/showlocation\", (params) => {\n      //debug(\"found\",params)\n\n      // fix for first click not triggering marker event\n      const elem:HTMLElement|null = document.querySelector(\".leaflet-container\")\n      if (elem) elem.click()\n    })\n\n    //return () => \n    map.removeControl(searchControl)\n  }, [])\n\n  return null\n}\n\nconst PropertyGroupContainer: FC<{\n  group: PropertyGroup\n  subject: Subject\n  onGroupOpen: (e: React.MouseEvent, currentGroupName: string) => void\n  shape: NodeShape\n  GISatoms?: { lat: string; long: string }\n  config: RDEConfig\n}> = ({ group, subject, onGroupOpen, shape, GISatoms, config }) => {\n  const [uiLang] = useRecoilState(uiLangState)\n  const label = lang.ValueByLangToStrPrefLang(group.prefLabels, uiLang)\n  const [force, setForce] = useState(false)\n\n  //debug(\"propertyGroup:\", subject.qname, errors, group, subject)\n\n  const withDisplayPriority: PropertyShape[] = [],\n    withoutDisplayPriority: PropertyShape[] = []\n  const errorKeys = Object.keys(errors[subject.qname] ? errors[subject.qname] : {})\n  let hasError = false\n  group.properties.map((property) => {\n    //debug(\"target:\",property.qname,property.targetShape?.properties)\n    if (\n      !hasError && errorKeys.some((k) => k.includes(property.qname)) ||\n      property.targetShape?.properties.some((p) => errorKeys.some((k) => k.includes(p.qname)))\n    ) {\n      //debug(\"group with error:\",group.qname,property.qname)\n      hasError = true\n    }\n    if (\n      property.displayPriority &&\n      property.displayPriority >= 1\n    ) {\n      withDisplayPriority.push(property)\n    } else {\n      withoutDisplayPriority.push(property)\n    }\n  })\n  const hasExtra = withDisplayPriority.length > 0 // && isSimplePriority\n  const toggleExtra = () => {\n    setForce(!force)\n  }\n\n  //debug(\"prio:\",group.qname,group,withDisplayPriority,withoutDisplayPriority);\n\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n\n  const [lat, setLat] = useRecoilState(config.latProp ? subject.getAtomForProperty(config.latProp.uri) : initListAtom)\n  const [lng, setLng] = useRecoilState(config.lngProp ? subject.getAtomForProperty(config.lngProp.uri) : initListAtom)\n  const [redraw, setRedraw] = useState(false)\n  let coords: L.LatLng,\n    zoom = 5,\n    unset = false\n  //debug(\"coords:\", coords, lat, lon)\n  if (lat.length && lng.length && lat[0].value != \"\" && lat[0].value != \"\") coords = new L.LatLng(Number(lat[0].value), Number(lng[0].value))\n  else {\n    unset = true\n    coords = new L.LatLng(30, 0) //eslint-disable-line no-magic-numbers\n    zoom = 2 //eslint-disable-line no-magic-numbers\n  }\n\n  useEffect(() => {\n    //debug(\"update:\",lon,lat)\n    setRedraw(true)\n  }, [lng, lat])\n\n  const setCoords = (val: L.LatLng) => {\n    //debug(\"val:\",val)\n    setRedraw(false)\n    if (!isNaN(val.lat)) {\n      if (lat.length > 0 && lat[0] instanceof LiteralWithId)\n        setLat([lat[0].copyWithUpdatedValue(\"\" + val.lat)])\n      if (lat.length == 0)\n        setLat([new LiteralWithId(\"\" + val.lat)])\n    }\n    if (!isNaN(val.lng)) {\n      if (lng.length > 0 && lng[0] instanceof LiteralWithId)\n        setLng([lng[0].copyWithUpdatedValue(\"\" + val.lng)])\n      if (lng.length == 0)\n        setLng([new LiteralWithId(\"\" + val.lat)])\n    }\n  }\n\n  return (\n    <div\n      role=\"main\"\n      className={\"group \" + (hasError ? \"hasError\" : \"\")}\n      id={group.qname}\n      style={{ scrollMargin: \"90px\" }}\n    >\n      <section className=\"album\">\n        <div className=\"container col-lg-6 col-md-6 col-sm-12\" style={{ border: \"dashed 1px none\" }}>\n          <div\n            className={\n              \"row card my-2 pb-3\" + (edit === group.qname ? \" group-edit\" : \"\") + \" show-displayPriority-\" + force\n            }\n            onClick={(e: React.MouseEvent) => {\n              if (onGroupOpen && groupEd !== group.qname) onGroupOpen(e, groupEd)\n              setEdit(group.qname)\n              setGroupEd(group.qname)\n            }}\n          >\n            <p className=\"\">\n              {label}\n              {hasError && <ErrorIcon />}\n            </p>\n            {\n              //groupEd === group.qname && ( // WIP, good idea but breaks undo initialization\n              <>\n                <div className={group.properties.length <= 1 ? \"hidePropLabel\" : \"\"} style={{ fontSize: 0 }}>\n                  {withoutDisplayPriority.map((property, index) => (\n                    <PropertyContainer\n                      key={index}\n                      property={property}\n                      subject={subject}\n                      editable={property.readOnly !== true}\n                      shape={shape}\n                      config={config}\n                    />\n                  ))}\n                  {withDisplayPriority.map((property, index) => (\n                    <PropertyContainer\n                      key={index}\n                      property={property}\n                      subject={subject}\n                      force={force}\n                      editable={property.readOnly !== true}\n                      shape={shape}\n                      config={config}\n                    />\n                  ))}\n                  {\n                    config.gisPropertyGroup && group.uri === config.gisPropertyGroup.uri &&\n                    groupEd === group.qname && // to force updating map when switching between two place entities\n                    coords && ( // TODO: add a property in shape to enable this instead\n                      <div style={{ position: \"relative\", overflow: \"hidden\", marginTop: \"16px\" }}>\n                        <MapContainer style={{ width: \"100%\", height: \"400px\" }} zoom={zoom} center={coords}>\n                          <LayersControl position=\"topright\">\n                            {config.googleMapsAPIKey && (\n                              <>\n                                <LayersControl.BaseLayer checked name=\"Satellite+Roadmap\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"hybrid\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Satellite\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"satellite\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Roadmap\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"roadmap\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Terrain\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"terrain\" />\n                                </LayersControl.BaseLayer>\n                              </>\n                            )}\n                            {!config.googleMapsAPIKey && (\n                              <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n                                <TileLayer url=\"https://{s}.tile.iosb.fraunhofer.de/tiles/osmde/{z}/{x}/{y}.png\" />\n                              </LayersControl.BaseLayer>\n                            )}\n                          </LayersControl>\n                          {!unset && <DraggableMarker pos={coords} icon={redIcon} setCoords={setCoords} />}\n                          <MapEventHandler coords={coords} redraw={redraw} setCoords={setCoords} config={config} />\n                        </MapContainer>\n                      </div>\n                    ) }\n                  {hasExtra && (\n                    <span className=\"toggle-btn  btn btn-rouge my-4\" onClick={toggleExtra}>\n                      <>{i18n.t(\"general.toggle\", { show: force ? i18n.t(\"general.hide\") : i18n.t(\"general.show\") })}</>\n                    </span>\n                  )}\n                </div>\n              </>\n            }\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default PropertyGroupContainer\n","import React, { useState, useEffect, useMemo, useLayoutEffect, useCallback, useRef } from \"react\"\nimport { ShapeFetcher, EntityFetcher, IFetchState } from \"../helpers/rdf/io\"\n//import { setDefaultPrefixes } from \"../helpers/rdf/ns\"\nimport { RDFResource, Subject, ExtRDFResourceWithLabel, LiteralWithId, Value, sameLanguage } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { PropertyShape, PropertyGroup } from \"../helpers/rdf/shapes\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"./EntitySelectorContainer\"\nimport PropertyGroupContainer from \"./PropertyGroupContainer\"\nimport {\n  reloadEntityState,\n  profileIdState,\n  userIdState,\n  uiLangState,\n  uiEditState,\n  uiUndosState,\n  noUndoRedo,\n  uiTabState,\n  uiNavState,\n  uiGroupState,\n  possiblePrefLabelsSelector,\n  initListAtom,\n  initMapAtom,\n  toCopySelector,\n  canPushPrefLabelGroupType,\n  canPushPrefLabelGroupsType\n} from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { atom, useRecoilState, useRecoilSnapshot, useRecoilValue, RecoilState } from \"recoil\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport * as rdf from \"rdflib\"\nimport qs from \"query-string\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { Redirect } from \"react-router-dom\"\nimport { HashLink as Link } from \"react-router-hash-link\"\nimport queryString from \"query-string\"\nimport { getParentPath, history } from \"../helpers/observer\"\nimport Button from \"@material-ui/core/Button\"\n\nconst debug = require(\"debug\")(\"rde:entity:edit\")\n\ninterface RDEPropsDoUpdate extends RDEProps {\n  subject: Subject\n  propertyQname: string\n  objectQname: string\n  index: number\n}\n\nfunction replaceItemAtIndex(arr: [], index: number, newValue: Value) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\n}\n\nexport function EntityEditContainerMayUpdate(props: RDEProps) {\n  const shapeQname = props.match.params.shapeQname\n  const entityQname = props.match.params.entityQname\n  const subjectQname = props.match.params.subjectQname\n  const propertyQname = props.match.params.propertyQname\n  const index = props.match.params.index\n  const subnodeQname = props.match.params.subnodeQname\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const snapshot = useRecoilSnapshot()\n  const [subject, setSubject] = useState<Subject | null>(null)\n\n  const { copy } = queryString.parse(props.location.search, { decode: false })\n\n  useEffect(() => {\n    const i = entities.findIndex((e) => e.subjectQname === subjectQname)\n    let subj\n    if (i === -1) return\n    if (subnodeQname) {\n      const pp = getParentPath(\n        ns.defaultPrefixMap.uriFromQname(subjectQname),\n        ns.defaultPrefixMap.uriFromQname(subnodeQname)\n      )\n      //debug(\"gPP:\", pp)\n      if (pp.length > 1 && i >= 0) {\n        const atom = entities[i].subject?.getAtomForProperty(pp[1])\n        if (!atom) {\n          setSubject(null)\n          return\n        }\n        subj = snapshot.getLoadable(atom).contents\n        if (Array.isArray(subj)) {\n          subj = subj.filter((s) => s.qname === subnodeQname)\n          if (subj.length) subj = subj[0]\n          else throw new Error(\"subnode not found: \" + subnodeQname)\n        }\n        //debug(\"atom:\", subj)\n        setSubject(subj)\n      }\n    } else {\n      subj = entities[i].subject\n      setSubject(subj)\n    }\n  }, [])\n\n  //debug(\"subj:\", subject, propertyQname, entityQname, index)\n\n  if (subject && propertyQname && entityQname && index) {\n    const propsForCall = { ...props, copy: copy }\n    return (\n      <EntityEditContainerDoUpdate\n        subject={subject}\n        propertyQname={propertyQname}\n        objectQname={entityQname}\n        index={Number(index)}\n        copy={copy}\n        {...props}\n      />\n    )\n  }\n  // TODO: add 'could not find subject' warning?\n  else if (subject != null) return <Redirect to={\"/edit/\" + entityQname + \"/\" + shapeQname} />\n  else return <div></div>\n}\n\nfunction EntityEditContainerDoUpdate(props: RDEPropsDoUpdate, config: RDEConfig) {\n  const shapeQname = props.match.params.shapeQname\n  const atom = props.subject.getAtomForProperty(ns.defaultPrefixMap.uriFromQname(props.propertyQname))\n  const [list, setList] = useRecoilState(atom)\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const i = entities.findIndex((e) => e.subjectQname === props.objectQname)\n  const subject = entities[i]?.subject\n\n  let copy: Record<string, Value[]> | null = null\n  if (props.copy && typeof props.copy === 'string') {\n    copy = props.copy.split(\";\").reduce((acc: Record<string, Value[]>, p: string): Record<string,Value[]> => {\n    const q = p.split(\",\")\n    const literals = q.slice(1).map((v: string) => {\n        const lit = decodeURIComponent(v).split(\"@\")\n        return new LiteralWithId(lit[0].replace(/(^\")|(\"$)/g, \"\"), lit[1], shapes.rdfLangString)\n      })\n    return { ...acc, [q[0]]: literals }\n    }, {})\n  }\n\n  //debug(\"copy:\",copy,props.copy)\n\n  const [getProp, setProp] = useRecoilState(\n        toCopySelector({\n          list: subject && copy ? Object.keys(copy).map((p: string) => ({\n            property: p,\n            atom: subject.getAtomForProperty(config.prefixMap.uriFromQname(p)),\n          } )) : undefined,\n        })\n  )\n\n  debug(\"LIST:\", list, atom, props.copy, copy)\n\n  useEffect(() => {\n    if (copy) {\n      // we have to delay this a bit for value to be propagated to EntityGraph and be exported to ttl when saving\n      setTimeout(() => {\n        if (copy) {\n          const p = []\n          for (const k of Object.keys(copy)) {\n            p.push({ k, val: copy[k] })\n          }\n          setProp(p)\n        }\n       }, 1150) // eslint-disable-line no-magic-numbers\n    }\n\n    const newObject = new ExtRDFResourceWithLabel(ns.defaultPrefixMap.uriFromQname(props.objectQname), {}, {})\n    // DONE: must also give set index in url\n    const newList = replaceItemAtIndex(list as [], props.index, newObject)\n    setList(newList)\n  }, [])\n\n  return <Redirect to={\"/edit/\" + props.objectQname + \"/\" + shapeQname} />\n}\n\nfunction EntityEditContainer(props: RDEProps, config: RDEConfig) {\n  //const [shapeQname, setShapeQname] = useState(props.match.params.shapeQname)\n  //const [entityQname, setEntityQname] = useState(props.match.params.entityQname)\n  const shapeQname = props.match.params.shapeQname\n  const entityQname = props.match.params.entityQname\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const [uiLang] = useRecoilState(uiLangState)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n\n  //const [nav, setNav] = useRecoilState(uiNavState)\n\n  const [profileId, setProfileId] = useRecoilState(profileIdState)\n  const [tab, setTab] = useRecoilState(uiTabState)\n\n  const entityObj = entities.filter(\n    (e) => e.subjectQname === entityQname || e.subjectQname === profileId && entityQname === \"tmp:user\"\n  )\n  const icon = config.iconFromEntity(entityObj.length ? entityObj[0] : null)\n\n  const { loadingState, shape } = ShapeFetcher(shapeQname, entityQname, config)\n\n  const canPushPrefLabelGroups: Record<string,canPushPrefLabelGroupType> | undefined = \n    shape?.groups.reduce((acc: Record<string,canPushPrefLabelGroupType>, \n        group: PropertyGroup): Record<string,canPushPrefLabelGroupType> => {\n    const props:Array<RecoilState<Value[]>|undefined> = group.properties\n      .filter((p: PropertyShape) => p.allowPushToTopLevelLabel)\n      .map((p: PropertyShape) => {\n        if (entityObj && entityObj[0] && entityObj[0].subject && p.path)\n          return entityObj[0].subject.getAtomForProperty(p.path.sparqlString)\n      })\n      // removes undefined values\n      .filter(a => a != undefined)\n    const subprops: Record<string,{atom: RecoilState<Subject[]>, allowPush: string[]}> = group.properties.reduce((accG, p) => {\n      const allowPush: (string|undefined)[]|undefined = p.targetShape?.properties\n        .filter((s: PropertyShape) => s.allowPushToTopLevelLabel)\n        .map((s: PropertyShape) => s.path?.sparqlString)\n      if (allowPush?.length && entityObj && entityObj[0] && entityObj[0].subject && p.path)\n        return {\n          ...accG,\n          [p.qname]: { atom: entityObj[0].subject.getAtomForProperty(p.path.sparqlString), allowPush },\n        }\n      return accG\n    }, {})\n    if (props?.length || Object.keys(subprops).length) \n      return { ...acc, [group.qname]: { props, subprops } } as Record<string,canPushPrefLabelGroupType>\n    return { ...acc } \n  }, {} as Record<string,canPushPrefLabelGroupType>)\n\n  const possiblePrefLabels = useRecoilValue(canPushPrefLabelGroups \n      ? possiblePrefLabelsSelector({ canPushPrefLabelGroups } as canPushPrefLabelGroupsType)\n      : initMapAtom)\n\n  let prefLabelAtom = entityObj[0]?.subject?.getAtomForProperty(ns.SKOS(\"prefLabel\").value)\n  if (!prefLabelAtom) prefLabelAtom = initListAtom\n  const [prefLabels, setPrefLabels] = useRecoilState(prefLabelAtom)\n\n  let altLabelAtom = entityObj[0]?.subject?.getAtomForProperty(ns.SKOS(\"altLabel\").value)\n  if (!altLabelAtom) altLabelAtom = initListAtom\n  const altLabels = useRecoilValue(altLabelAtom)\n\n  //debug(\"EntityEditContainer:\", JSON.stringify(props), entityQname, isAuthenticated, profileId)\n\n  useEffect(() => {\n    entities.map((e, i) => {\n      if (e.subjectQname === entityQname || e.subjectQname === profileId && entityQname === \"tmp:user\") {\n        if (tab != i) {\n          setTab(i)\n          return\n        }\n      }\n    })\n  }, [entities, profileId])\n\n  let init = 0\n  useEffect(() => {\n    if (entityQname === \"tmp:user\" && !profileId) return\n\n    const delay = 350\n    let n = -1 // is this used at all??\n    const entityUri = ns.defaultPrefixMap.uriFromQname(entityQname === \"tmp:user\" ? profileId : entityQname)\n\n    // wait for all data to be loaded then add flag in history\n    if (init) clearInterval(init)\n    init = window.setInterval(() => {\n      if (history[entityUri]) {\n        if (history[entityUri].some((h) => h[\"tmp:allValuesLoaded\"])) {\n          clearInterval(init)\n          //debug(\"(no init)\", entityUri, n, history[entityUri])\n        } else if (n === history[entityUri].length) {\n          clearInterval(init)\n          history[entityUri].push({ \"tmp:allValuesLoaded\": true })\n          //debug(\"init:\", entityUri, n, history[entityUri])\n          setUndos({ ...undos, [entityUri]: noUndoRedo })\n        } else {\n          n = history[entityUri].length\n        }\n      }\n    }, delay)\n  }, [entities, tab, profileId, entityQname])\n\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const save = useCallback(\n    (obj: Entity[]) => {\n      return new Promise(async (resolve) => {\n        //debug(\"saving?\",obj[0]?.subjectQname,obj[0]?.state,obj[0].alreadySaved)\n        if ([EditedEntityState.NeedsSaving, EditedEntityState.Error].includes(obj[0].state)) {\n          // save to localStorage\n          const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n          const store = new rdf.Store()\n          ns.defaultPrefixMap.setDefaultPrefixes(store)\n          obj[0]?.subject?.graph.addNewValuestoStore(store)\n          //debug(store)\n          //debugStore(store)\n          rdf.serialize(defaultRef, store, undefined, \"text/turtle\", async function (err, str) {\n            if (err || !str) {\n              debug(err, store)\n              throw \"error when serializing\"\n            }\n            const shape = obj[0]?.shapeQname\n            config.setUserLocalEntity(\n              obj[0].subjectQname,\n              shape,\n              str,\n              false,\n              userId,\n              obj[0].etag,\n              obj[0].state === EditedEntityState.NeedsSaving\n            )\n            //debug(\"RESOLVED\")\n            resolve(true)\n          })\n        }\n      })\n    },\n    [entityQname, shapeQname, entityObj]\n  )\n\n  // trick to get current value when unmounting\n  // (see https://stackoverflow.com/questions/55139386/componentwillunmount-with-react-useeffect-hook)\n  const entityObjRef = useRef<Entity[]>(entityObj)\n\n  useEffect(() => {\n    // no luck for now\n    if (entityObjRef.current?.length && entityObj?.length) {\n      if (entityObjRef.current[0]?.subjectQname != entityObj[0]?.subjectQname) {\n        //debug(\"switched:\",entityObjRef.current[0].subjectQname, entityObj[0].subjectQname)\n        save(entityObjRef.current)\n      }\n    }\n  })\n\n  useEffect(() => {\n    return () => {\n      const fun = async () => {\n        if(entityObjRef.current) {\n          debug(\"unmounting /edit\", entityObjRef.current)\n          await save(entityObjRef.current)\n        }\n      }\n      fun()\n    }\n  }, [])\n\n  const [warning, setWarning] = useState(() => (event: BeforeUnloadEvent) => {}) // eslint-disable-line @typescript-eslint/no-empty-function\n  useEffect(() => {\n    const willSave: Entity[] = []\n    for (const e of entities) {\n      if (e.state !== EditedEntityState.Saved && e.state !== EditedEntityState.NotLoaded) {\n        willSave.push(e)\n        //break // DAMN IT\n      }\n    }\n    //debug(\"wS:\",willSave,entities)\n    if (willSave.length) {\n      window.removeEventListener(\"beforeunload\", warning, true)\n      setWarning(() => async (event: BeforeUnloadEvent) => {\n        //debug(\"unload?\",willSave)\n        for (const w of willSave) {\n          await save([w])\n        }\n        // Cancel the event as stated by the standard.\n        event.preventDefault()\n        // Chrome requires returnValue to be set.\n        event.returnValue = \"\"\n      })\n    } else {\n      window.removeEventListener(\"beforeunload\", warning, true)\n      setWarning(() => (event: BeforeUnloadEvent) => {}) // eslint-disable-line @typescript-eslint/no-empty-function\n    }\n  }, [entities])\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", warning, true)\n  }, [warning])\n\n  //debug(\"warning:\",warning)\n\n  // refactoring needed\n  //if (entityQname === \"tmp:user\" && !auth0.isAuthenticated && userId != demoUserId) return <span>unauthorized</span>\n\n  // TODO: update highlighted tab\n\n  const { entityLoadingState, entity } = EntityFetcher(entityQname, shapeQname, config)\n\n  // TODO: check that shape can be properly applied to entity\n\n  if (loadingState.status === \"error\" || entityLoadingState.status === \"error\") {\n    return (\n      <p className=\"text-center text-muted\">\n        <NotFoundIcon className=\"icon mr-2\" />\n        {loadingState.error}\n\n        {entityLoadingState.error}\n      </p>\n    )\n  }\n\n  if (loadingState.status === \"fetching\" || entityLoadingState.status === \"fetching\" || !entity || entity.isEmpty()) {\n    return (\n      <>\n      <div>\n        <div><>{i18n.t(\"types.loading\")}</></div>\n      </div>\n      </>\n    )\n  }\n\n  if (!shape || !entity)\n    return (\n      <>\n      <div>\n        <div><>{i18n.t(\"types.loading\")}</></div>\n      </div>\n      </>\n    )\n\n  //debug(\"entity:\", entity, shape)\n\n  const shapeLabel = lang.ValueByLangToStrPrefLang(shape.targetClassPrefLabels, uiLang)\n\n  const checkPushNameAsPrefLabel = (e: React.MouseEvent, currentGroupName: string) => {\n    //debug(\"closing: \", currentGroupName, possiblePrefLabels[currentGroupName])\n    if (possiblePrefLabels && possiblePrefLabels[currentGroupName]?.length) {\n      //debug(\"names:\",personNamesLabels,prefLabels)\n      const newLabels = [...prefLabels]\n      for (const n of possiblePrefLabels[currentGroupName]) {\n        if (\n          n instanceof LiteralWithId &&\n          !newLabels.some((l) => l instanceof LiteralWithId && sameLanguage(l.language, n.language)) &&\n          !altLabels.some((l) => l instanceof LiteralWithId && sameLanguage(l.language, n.language))\n        )\n          newLabels.push(n)\n      }\n      if (newLabels.length != prefLabels.length) setPrefLabels(newLabels)\n    }\n    setEdit(\"\")\n    setGroupEd(\"\")\n    e.stopPropagation()\n  }\n\n  //debug(\"eO:\",entityObj)\n\n  // refactoring needed\n  // const BUDAlink = config.LIBRARY_URL + \"/show/\" + entity.qname + \"?v=\" + entityObj[0]?.alreadySaved\n\n  const previewLink = config.getPreviewLink(entity.node)\n\n  return (\n    <React.Fragment>\n      <div role=\"main\" className=\"pt-4\" style={{ textAlign: \"center\" }}>\n        <div className={\"header \" + icon?.toLowerCase()} {...(!icon ? { \"data-shape\": shape.qname } : {})}>\n          <div className=\"shape-icon\"></div>\n          <div>\n            <h1>{shapeLabel}</h1>\n            <span>{entity.qname}</span>\n            {previewLink && (\n              <div className=\"buda-link\">\n                <a\n                  className={\"btn-rouge\" + (!entityObj[0]?.etag ? \" disabled\" : \"\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  {...(!entityObj[0]?.etag ? { title: i18n.t(\"error.preview\") } : { href: previewLink })}\n                >\n                  <>{i18n.t(\"general.preview\")}</>\n                </a>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <div role=\"navigation\" className=\"innerNav\">\n        <p className=\"text-uppercase small my-2\"><>{i18n.t(\"home.nav\")}</></p>\n        {shape.groups.map((group, index) => {\n          const label = lang.ValueByLangToStrPrefLang(group.prefLabels, uiLang)\n          return (\n            <Link\n              key={group.qname}\n              to={\"#\" + group.qname}\n              // eslint-disable-next-line no-magic-numbers\n              onClick={() => {\n                setGroupEd(group.qname)\n                setEdit(group.qname)\n              }}\n              className={groupEd === group.qname ? \"on\" : \"\"}\n            >\n              <span>{label}</span>\n            </Link>\n          )\n        })}\n      </div>\n      <div>\n        {shape.groups.map((group, index) => (\n          <>\n            {groupEd === group.qname && (\n              <div className=\"group-edit-BG\" onClick={(e: React.MouseEvent) => checkPushNameAsPrefLabel(e, group.qname)}></div>\n            )}\n            <PropertyGroupContainer\n              key={group.uri}\n              group={group}\n              subject={entity}\n              onGroupOpen={checkPushNameAsPrefLabel}\n              shape={shape}\n              config={config}\n            />\n          </>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default EntityEditContainer\n","import { useState, useEffect } from \"react\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { RDFResourceWithLabel } from \"../helpers/rdf/types\"\nimport { entitiesAtom, EditedEntityState, defaultEntityLabelAtom } from \"./EntitySelectorContainer\"\nimport { uiDisabledTabsState, uiLangState, uiTabState, RIDprefixState, userIdState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { useRecoilState } from \"recoil\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport React, { ChangeEvent } from \"react\"\nimport qs from \"query-string\"\nimport i18n from \"i18next\"\nimport { Trans } from \"react-i18next\"\nimport { TextField, MenuItem } from \"@material-ui/core\"\n\nconst debug = require(\"debug\")(\"rde:entity:newentity\")\n\nfunction NewEntityContainer(props: RDEProps, config: RDEConfig) {\n  const [uiLang] = useRecoilState(uiLangState)\n  const [RID, setRID] = useState(\"\")\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const disabled = !RIDprefix\n\n  // otherwise we want the user to select the appropriate shape\n\n  // \"here is a list of all possible shapes\" \"to choose from in order to create a new entity\":\n  return (\n    <div className=\"new-fix\">\n      <div>\n        <b>New entity:</b>\n        <span>\n          <TextField\n            {...(disabled ? { disabled: true } : {})}\n            select\n            //label=\"Choose a shape\"\n            helperText={\"List of all possible shapes\"}\n            id=\"shapeSelec\"\n            className=\"shapeSelector\"\n            value={ \n              config.possibleShapeRefs[0].qname\n            }\n            style={{ marginTop: \"3px\", marginLeft: \"10px\" }}\n          >\n            {config.possibleShapeRefs.map((shape: RDFResourceWithLabel, index: number) => (\n              <MenuItem key={shape.qname} value={shape.qname} style={{ padding: 0 }}>\n                <Link to={\"/new/\" + shape.qname} className=\"popLink\">\n                  {lang.ValueByLangToStrPrefLang(shape.prefLabels, uiLang)}\n                </Link>\n              </MenuItem>\n            ))}\n          </TextField>\n          {disabled && RIDprefix === \"\" && (\n            <span className=\"pl-2\" style={{ fontStyle: \"italic\", fontWeight: 500, color: \"#d73449\", fontSize: 14 }}>\n              <Trans i18nKey=\"error.prefix\" components={{ res: <Link className=\"profile-link\" to=\"/profile\" /> }} />\n            </span>\n          )}\n        </span>\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n        <div style={{ marginRight: \"10px\" }}>\n          <b>Load entity:</b>{\" \"}\n        </div>\n        <div>\n          <TextField\n            style={{ width: \"100%\" }}\n            value={RID}\n            InputLabelProps={{ shrink: true }}\n            onChange={(e) => setRID(e.target.value)}\n            helperText={\"select an entity to load here by its RID\"}\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") props.history.push(\"/edit/bdr:\" + RID.replace(/^bdr:/, \"\").toUpperCase())\n            }}\n          />\n        </div>\n        <div>\n          <Link\n            to={\"/edit/bdr:\" + RID.replace(/^bdr:/, \"\").toUpperCase()}\n            className={\"btn btn-sm btn-outline-primary py-3 ml-2 lookup btn-rouge \" + (!RID ? \"disabled\" : \"\")}\n            style={{ boxShadow: \"none\", alignSelf: \"center\", marginBottom: \"15px\" }}\n          >\n            <>{i18n.t(\"search.open\")}</>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NewEntityContainer\n","import React, { useEffect, useState } from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\n\nconst debug = require(\"debug\")(\"rde:entity:entitycreation\")\n\nexport interface DialogProps {\n  // TODO: document a bit\n  open: any\n  shaped: string\n  newUrl: string\n  editUrl: string\n  named: string\n}\n\nexport function Dialog422(props: DialogProps) {\n  const [open, setOpen] = React.useState(props.open)\n  const shape = props.shaped.split(\":\")[1]?.replace(/Shape$/, \"\")\n  const [createNew, setCreateNew] = useState(false)\n  const [loadNamed, setLoadNamed] = useState(false)\n\n  debug(\"422:\", props)\n\n  const handleLoad = () => {\n    setLoadNamed(true)\n    setOpen(false)\n  }\n\n  const handleNew = () => {\n    setCreateNew(true)\n    setOpen(false)\n  }\n\n  if (createNew) return <Redirect to={props.newUrl} />\n  else if (loadNamed) return <Redirect to={props.editUrl} />\n  else\n    return (\n      <div>\n        <Dialog open={open}>\n          <DialogTitle>\n            {shape} {props.named} has already been created\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Do you want to use it, or to create a new {shape} with another RID instead?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions style={{ justifyContent: \"space-around\" }}>\n            <Button className=\"btn-rouge\" onClick={handleLoad} color=\"primary\">\n              Use&nbsp;<span style={{ textTransform: \"none\" }}>{props.named}</span>\n            </Button>\n            <Button className=\"btn-rouge\" onClick={handleNew} color=\"primary\">\n              Create&nbsp;<span style={{ textTransform: \"none\" }}>{shape}</span>&nbsp;with another RID\n            </Button>\n          </DialogActions>\n          <br />\n        </Dialog>\n      </div>\n    )\n}\n","//import { EntityCreator } from \"../helpers/rdf/construct\"\nimport { ShapeFetcher, EntityFetcher } from \"../helpers/rdf/io\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { RDFResourceWithLabel, Subject, EntityGraph } from \"../helpers/rdf/types\"\nimport { entitiesAtom, EditedEntityState } from \"./EntitySelectorContainer\"\nimport { uiLangState, userIdState, RIDprefixState, uiTabState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { useRecoilState } from \"recoil\"\nimport { Dialog422 } from \"./Dialog\"\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useParams, useHistory } from \"react-router-dom\"\nimport React, { useEffect, useState } from \"react\"\nimport qs from \"query-string\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport queryString from \"query-string\"\nimport Button from \"@material-ui/core/Button\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport * as rdf from \"rdflib\"\n\nconst debug = require(\"debug\")(\"rde:entity:entitycreation\")\n\nexport function EntityCreationContainer(props: RDEProps, config: RDEConfig) {\n  const subjectQname = props.match.params.subjectQname\n  const shapeQname = props.match.params.shapeQname\n  const propertyQname = props.match.params.propertyQname\n  const index = props.match.params.index\n  const subnodeQname = props.match.params.subnodeQname\n\n  // entityQname is an ID desired by the user. In that case we must:\n  // - if an entity with the same qname is already open in the editor, just redirect to it\n  // - else call EntityCreator\n  const entityQname = props.match.params.entityQname\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [uiTab, setUiTab] = useRecoilState(uiTabState)\n\n  const routerHistory = useHistory()\n\n  const unmounting = { val: false }\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ecc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  if (RIDprefix == \"\") return <Redirect to=\"/new\" />\n\n  const shapeNode = rdf.sym(config.prefixMap.uriFromQname(shapeQname))\n  const entityNode = rdf.sym(config.prefixMap.uriFromQname(entityQname))\n\n  const { entityLoadingState, entity } = unmounting.val\n    ? { entityLoadingState: { status: \"idle\", error: undefined }, entity: null }\n    : config.entityCreator(shapeNode, entityNode, unmounting)\n\n  debug(\"new:\", entityLoadingState, entity, entityQname, entity?.qname, shapeQname)\n\n  // TODO: if EntityCreator throws a 422 exception (the entity already exists),\n  // we must give a choice to the user:\n  //    * open the existing entity\n  //    * create an entity with a different id, in which case we call reserveLname again\n  if (entityLoadingState.error === \"422\" && entity) {\n    // eslint-disable-line no-magic-numbers\n\n    const editUrl =\n      subjectQname && propertyQname && index != undefined\n        ? \"/edit/\" +\n          entityQname +\n          \"/\" +\n          shapeQname +\n          \"/\" +\n          subjectQname +\n          \"/\" +\n          propertyQname +\n          \"/\" +\n          index +\n          (subnodeQname ? \"/\" + subnodeQname : \"\") +\n          (props.copy ? \"?copy=\" + props.copy : \"\")\n        : \"/edit/\" + (entityQname ? entityQname : entity.qname) + \"/\" + shapeQname\n\n    const newUrl = routerHistory.location.pathname.replace(/\\/named\\/.*/, \"\") + routerHistory.location.search\n\n    return <Dialog422 open={true} shaped={shapeQname} named={entityQname} editUrl={editUrl} newUrl={newUrl} />\n  } else if (entity) {\n    if (subjectQname && propertyQname && index != undefined)\n      return (\n        <Redirect\n          to={\n            \"/edit/\" +\n            (entityQname ? entityQname : entity.qname) +\n            \"/\" +\n            shapeQname +\n            \"/\" +\n            subjectQname +\n            \"/\" +\n            propertyQname +\n            \"/\" +\n            index +\n            (subnodeQname ? \"/\" + subnodeQname : \"\") +\n            (props.copy ? \"?copy=\" + props.copy : \"\")\n          }\n        />\n      )\n    else return <Redirect to={\"/edit/\" + (entityQname ? entityQname : entity.qname) + \"/\" + shapeQname} />\n  }\n  if (entityLoadingState.status === \"error\") {\n    return (\n      <p className=\"text-center text-muted\">\n        <NotFoundIcon className=\"icon mr-2\" />\n        {entityLoadingState.error}\n      </p>\n    )\n  }\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.creating\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport function EntityCreationContainerAlreadyOpen(props: RDEProps) {\n  const subjectQname = props.match.params.subjectQname\n  const shapeQname = props.match.params.shapeQname\n  const propertyQname = props.match.params.propertyQname\n  const index = props.match.params.index\n  const subnodeQname = props.match.params.subnodeQname\n\n  // entityQname is an ID desired by the user. In that case we must:\n  // - if an entity with the same qname is already open in the editor, just redirect to it\n  // - else call EntityCreator\n  const entityQname = props.match.params.entityQname\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [uiTab, setUiTab] = useRecoilState(uiTabState)\n\n  const unmounting = { val: false }\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ecc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  if (subjectQname && propertyQname && index != undefined)\n    return (\n      <Redirect\n        to={\n          \"/edit/\" +\n          entityQname +\n          \"/\" +\n          shapeQname +\n          \"/\" +\n          subjectQname +\n          \"/\" +\n          propertyQname +\n          \"/\" +\n          index +\n          (subnodeQname ? \"/\" + subnodeQname : \"\") +\n          (props.copy ? \"?copy=\" + props.copy : \"\")\n        }\n      />\n    )\n  else return <Redirect to={\"/edit/\" + entityQname + \"/\" + shapeQname} />\n\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.loading\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport function EntityCreationContainerRoute(props: RDEProps) {\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const i = entities.findIndex((e) => e.subjectQname === props.match.params.entityQname)\n  const theEntity = entities[i]\n\n  const { copy } = queryString.parse(props.location.search, { decode: false })\n\n  //debug(\"search/copy:\", copy)\n\n  if (theEntity) return <EntityCreationContainerAlreadyOpen {...props} copy={copy} />\n  else return <EntityCreationContainer {...props} copy={copy} />\n}\n\nexport default EntityCreationContainer\n","import React, { useState, useEffect, useMemo } from \"react\"\nimport { ShapeFetcher, EntityFetcher } from \"../helpers/rdf/io\"\nimport { RDFResource, Subject, RDFResourceWithLabel } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"./EntitySelectorContainer\"\nimport PropertyGroupContainer from \"./PropertyGroupContainer\"\nimport { uiLangState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport { atom, useRecoilState } from \"recoil\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport Button from \"@material-ui/core/Button\"\nimport * as rdf from \"rdflib\"\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\"\nimport { TextField, MenuItem } from \"@material-ui/core\"\n\nconst debug = require(\"debug\")(\"rde:entity:shape\")\n\nfunction EntityShapeChooserContainer(props: RDEProps, config: RDEConfig) {\n  const [entityQname, setEntityQname] = useState(props.match.params.entityQname)\n  const [uiLang] = useRecoilState(uiLangState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const unmounting = { val: false }\n\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:esc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  useEffect(() => {\n    //debug(\"params\", props.match.params.entityQname)\n    if (unmounting.val) return\n    else if (props.match.params.entityQname) setEntityQname(props.match.params.entityQname)\n  }, [props.match.params])\n\n  // here we create the entity in the list if it's not there yet:\n  const entityFromList = entities.find((e) => e.subjectQname === entityQname)\n  if (entityFromList && entityFromList.shapeQname) {\n    const shapeQname = entityFromList.shapeQname\n    props.history.replace(\"/edit/\" + entityQname + \"/\" + shapeQname)\n    return (\n      <div>\n        <div><>{i18n.t(\"types.redirect\")}</></div>\n      </div>\n    )\n  }\n  const { entityLoadingState, entity } = EntityFetcher(entityQname, \"\", config, unmounting)\n\n  if (entity) {\n    const possibleShapes = config.possibleShapeRefsForEntity(entity.node)\n    if (entityLoadingState.status === \"fetching\") {\n      return (\n        <div>\n          <div><>{i18n.t(\"types.loading\")}</></div>\n        </div>\n      )\n    } else if (entityLoadingState.error === \"not found\") {\n      return (\n        <div className=\"error\">\n          <div>\n            <span><>{i18n.t(\"error.exist\", { id: entityQname })}</></span>\n            <br />\n            <Link style={{ fontWeight: 700 }} to=\"/new\">\n              <>{i18n.t(\"error.redirect\")}</>\n            </Link>\n          </div>\n        </div>\n      )\n    } else if (!possibleShapes) {\n      debug(\"cannot find\", entity, entityLoadingState)\n      return (\n        <div className=\"error\">\n          <div>\n            <span><>{i18n.t(\"error.shape\", { id: entityQname })}</></span>\n            <br />\n            <Link style={{ fontWeight: 700 }} to=\"/new\">\n              <>{i18n.t(\"error.redirect\")}</>\n            </Link>\n          </div>\n        </div>\n      )\n    }\n    if (possibleShapes.length > 1) {\n      const handleClick = (event: React.MouseEvent<HTMLAnchorElement>, shape: RDFResourceWithLabel) => {\n        const newEntities = [...entities]\n        for (const i in newEntities) {\n          const e = newEntities[i]\n          if (e.subjectQname === entityQname) {\n            newEntities[i] = { ...e, shapeQname: shape.qname }\n            setEntities(newEntities)\n            break\n          }\n        }\n      }\n\n      return (\n        <div className=\"centered-ctn\">\n          <div>\n            <b>Choose a shape:</b>\n            <TextField\n              select\n              helperText={\"List of all possible shapes\"}\n              id=\"shapeSelec\"\n              className=\"shapeSelector\"\n              value={config.possibleShapeRefs[0].qname}\n              style={{ marginTop: \"3px\", marginLeft: \"10px\" }}\n            >\n              { config.possibleShapeRefs.map((shape: RDFResourceWithLabel, index: number) => (\n                <MenuItem key={shape.qname} value={shape.qname} style={{ padding: 0 }}>\n                  <Link\n                    to={\"/edit/\" + entityQname + \"/\" + shape.qname}\n                    className=\"popLink\"\n                    onClick={(ev) => handleClick(ev, shape)}\n                  >\n                    {lang.ValueByLangToStrPrefLang(shape.prefLabels, uiLang)}\n                  </Link>\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n        </div>\n      )\n    } else {\n      return <Redirect to={\"/edit/\" + entityQname + \"/\" + possibleShapes[0].qname} />\n    }\n  }\n\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.loading\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport default EntityShapeChooserContainer\n","import React from \"react\"\nimport { Img } from \"react-image\"\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\"\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\"\nexport { default as ErrorIcon } from \"@material-ui/icons/Error\"\nexport { default as CloseIcon } from \"@material-ui/icons/Close\"\nexport { default as SearchIcon } from \"@material-ui/icons/FindReplace\"\nexport { default as LookupIcon } from \"@material-ui/icons/Search\"\nexport { default as LaunchIcon } from \"@material-ui/icons/Launch\"\nexport { default as InfoIcon } from \"@material-ui/icons/Info\"\nexport { default as InfoOutlinedIcon } from \"@material-ui/icons/InfoOutlined\"\nexport { default as SettingsIcon } from \"@material-ui/icons/Settings\"\nexport { default as VisibilityIcon } from \"@material-ui/icons/Visibility\"\nexport { default as VisibilityOffIcon } from \"@material-ui/icons/VisibilityOff\"\nexport { default as EditIcon } from \"@material-ui/icons/Edit\"\nexport { default as KeyboardIcon } from \"@material-ui/icons/Keyboard\"\nexport { default as HelpIcon } from \"@material-ui/icons/Help\"\nexport { default as ContentPasteIcon } from \"@material-ui/icons/AssignmentReturned\"\n\nexport const PersonIcon = (props) => <Img src=\"/icons/person.svg\" {...props} />\nexport const WorkIcon = (props) => <Img src=\"/icons/work.svg\" {...props} />\nexport const PlaceIcon = (props) => <Img src=\"/icons/place.svg\" {...props} />\nexport const VersionIcon = (props) => <Img src=\"/icons/instance.svg\" {...props} />\n\nexport const MDIcon = (props) => <Img src=\"/icons/Markdown-mark.svg\" {...props} />\n\nexport const AddIcon = AddCircleOutlineIcon\nexport const RemoveIcon = RemoveCircleOutlineIcon\n","const debug = require(\"debug\")(\"rde:rdf:lang\")\n\nexport type Lang = {\n  value: string\n  keyboard?: string[]\n}\n\n// default function, can be overridden in config\nexport const ValueByLangToStrPrefLang = (vbl: Record<string, string> | null, prefLang: string | Array<string>) => {\n  if (vbl == null) return \"\"\n  if (!Array.isArray(prefLang)) prefLang = [prefLang]\n  for (const pL of prefLang) {\n    if (pL in vbl) return vbl[pL]\n  }\n  const vals = Object.values(vbl)\n  if (vals[0]) return vals[0]\n  return \"\"\n}\n\n// a little memoization\nconst cache: Record<string, Lang[]> = {}\n\nexport const langsWithDefault = (defaultLanguage: string, langs: Array<Lang>): Array<Lang> => {\n  if (defaultLanguage in cache) return cache[defaultLanguage]\n  let res = langs.filter((l) => l.value === defaultLanguage)\n  if (!res?.length) {\n    debug(\"can't find defaultLanguage \", defaultLanguage, \" in languages\")\n    return langs\n  }\n  res = res.concat(langs.filter((l) => l.value !== defaultLanguage))\n  cache[defaultLanguage] = res\n  return res\n}\n","import { uiReadyState, uiHistoryState, uiTabState, uiUndosState, noUndo, noUndoRedo, undoState } from \"../atoms/common\"\nimport { LiteralWithId, RDFResourceWithLabel, ExtRDFResourceWithLabel, Value, Subject } from \"./rdf/types\"\n\nconst debug = require(\"debug\")(\"bdrc:observer\")\n\n// global variable, should be in config?\nexport const history: Record<string, Array<Record<string, any>>> = {}\n\nexport type HistoryStatus = {\n  top?: number\n  first?: number\n  current?: number\n}\n\n// get info from history (values modified? values undone?)\nexport const getHistoryStatus = (entityUri: string): HistoryStatus => {\n  if (!history[entityUri]) return {}\n\n  // DONE: optimizing a bit (1 for instead of 2 .findIndex + 1 .some)\n  const top = history[entityUri].length - 1\n  let first = -1,\n    current = -1\n  for (const [i, h] of history[entityUri].entries()) {\n    if (h[\"tmp:allValuesLoaded\"]) first = i\n    else if (h[\"tmp:undone\"]) current = i - 1\n    if (first != -1 && current != -1) break\n  }\n  return { top, first, current }\n}\n\nexport const updateHistory = (\n  entity: string,\n  qname: string,\n  prop: string,\n  val: Array<Value>,\n  noHisto: boolean | number = true\n) => {\n  if (!history[entity]) history[entity] = []\n  else {\n    while (history[entity].length && history[entity][history[entity].length - 1][\"tmp:undone\"]) {\n      history[entity].pop()\n    }\n  }\n  const newVal = {\n    [qname]: { [prop]: val },\n    ...entity != qname ? { \"tmp:parentPath\": getParentPath(entity, qname) } : {},\n  }\n\n  // don't add empty value to history (fix adding undo steps when showing secondary properties in Person/Kinship)\n  if (val.length === 1 && !(val[0] instanceof LiteralWithId) && val[0].uri === \"tmp:uri\" || val[0].value === \"\") return\n\n  // some value modifications must not be added to history (some autocreation of empty values for example)\n  if (noHisto === -1) {\n    const first = history[entity].findIndex((h) => h[\"tmp:allValuesLoaded\"])\n    if (first > 0) history[entity].splice(first, 0, newVal)\n    else history[entity].push(newVal)\n  } else history[entity].push(newVal)\n\n  //debug(\"history:\", entity, qname, prop, val, history, noHisto)\n}\n\nexport function getParentPath(entityUri: string, sub: string) {\n  let parentPath: Array<string> = []\n  // manually check which property has this subnode as value\n  for (const h of history[entityUri]) {\n    const subSubj = Object.keys(h).filter((k) => ![\"tmp:parent\", \"tmp:undone\"].includes(k))\n    for (const s of subSubj) {\n      const subprop = Object.keys(h[s]).filter((k) => ![\"tmp:parent\", \"tmp:undone\"].includes(k))\n      for (const p of subprop) {\n        if (typeof h[s][p] !== \"string\")\n          for (const v of h[s][p]) {\n            if (v instanceof Subject && v.uri === sub) {\n              if (parentPath.length > 1 && parentPath[1] !== p)\n                throw new Error(\"multiple property (\" + parentPath + \",\" + p + \") for node \" + sub)\n              if (s !== entityUri) parentPath = getParentPath(entityUri, s)\n              parentPath.push(s)\n              parentPath.push(p)\n            }\n          }\n      }\n    }\n  }\n  return parentPath\n}\n","import * as rdf from \"rdflib\"\nimport * as ns from \"./ns\"\nimport { PropertyShape, Path, defaultLabelProperties, defaultDescriptionProperties } from \"./shapes\"\nimport { Memoize } from \"typescript-memoize\"\nimport {\n  atom,\n  DefaultValue,\n  AtomEffect,\n  RecoilState,\n} from \"recoil\"\nimport { history, updateHistory } from \"../observer\"\nimport { nanoid } from \"nanoid\"\n\nconst debug = require(\"debug\")(\"rde:rdf:types\")\n\nconst defaultGraphNode = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n\nexport const errors: Record<string, Record<string, boolean>> = {}\n\nexport const rdfLitAsNumber = (lit: rdf.Literal): number | null => {\n  const n = Number(lit.value)\n  if (!isNaN(n)) {\n    return +n\n  }\n  return null\n}\n\n// an EntityGraphValues represents the global state of an entity we're editing, in a javascript object (and not an RDF store)\nexport class EntityGraphValues {\n  oldSubjectProps: Record<string, Record<string, Array<Value>>> = {}\n  newSubjectProps: Record<string, Record<string, Array<Value>>> = {}\n  subjectUri = \"\"\n  /* eslint-disable no-magic-numbers */\n  idHash = Date.now() //getRandomIntInclusive(1000, 9999).toString()\n  noHisto: boolean | number = false\n\n  constructor(subjectUri: string) {\n    this.subjectUri = subjectUri\n  }\n\n  onGetInitialValues = (subjectUri: string, pathString: string, values: Array<Value>) => {\n    if (!(subjectUri in this.oldSubjectProps)) this.oldSubjectProps[subjectUri] = {}\n    if (!(subjectUri in this.newSubjectProps)) this.newSubjectProps[subjectUri] = {}\n    this.oldSubjectProps[subjectUri][pathString] = values\n    this.newSubjectProps[subjectUri][pathString] = values\n  }\n\n  onUpdateValues = (subjectUri: string, pathString: string, values: Array<Value>) => {\n    if (!(subjectUri in this.newSubjectProps)) this.newSubjectProps[subjectUri] = {}\n    this.newSubjectProps[subjectUri][pathString] = values\n    // disable history for current modification (autocreation of new empty simple value)\n    if (this.noHisto === true) {\n      this.noHisto = false\n      return\n    }\n    updateHistory(this.subjectUri, subjectUri, pathString, values, this.noHisto)\n    // there are some modifications that are chained and we need only first not to be stored\n    // (case of creation of new property with subproperties)\n    if (this.noHisto === 1) this.noHisto = -1\n  }\n\n  isInitialized = (subjectUri: string, pathString: string) => {\n    return subjectUri in this.oldSubjectProps && pathString in this.oldSubjectProps[subjectUri]\n  }\n\n  addNewValuestoStore(store: rdf.Store, subjectUri: string) {\n    if (!(subjectUri in this.newSubjectProps)) return\n    const subject = new rdf.NamedNode(subjectUri)\n    for (const pathString in this.newSubjectProps[subjectUri]) {\n      // handling inverse path vs. direct path\n      if (pathString.startsWith(\"^\")) {\n        const property = new rdf.NamedNode(pathString.substring(1))\n        const values: Array<Value> = this.newSubjectProps[subjectUri][pathString]\n        for (const val of values) {\n          if (val instanceof LiteralWithId) {\n            throw \"can't add literals in inverse path, something's wrong with the data!\"\n          } else {\n            if (val.node?.value == \"tmp:uri\" || val.node?.value == \"tmp:none\") continue\n            store.add(val.node, property, subject, defaultGraphNode)\n            if (val instanceof Subject) {\n              this.addNewValuestoStore(store, val.uri)\n            }\n          }\n        }\n      } else {\n        const listMode = pathString.endsWith(\"[]\")\n        const property = new rdf.NamedNode(listMode ? pathString.substring(0, pathString.length - 2) : pathString)\n        const values: Array<Value> = this.newSubjectProps[subjectUri][pathString]\n        const collection = new rdf.Collection()\n        for (const val of values) {\n          //debug(\"val:\", val, listMode)\n          if (val instanceof LiteralWithId) {\n            // do not add empty strings\n            if (val.value == \"\") continue\n            if (listMode) collection.append(val)\n            else store.add(subject, property, val, defaultGraphNode)\n          } else {\n            //debug(\"saving:\", val)\n            if (val.node?.value == \"tmp:uri\" || val.node?.value == \"tmp:none\") continue\n            if (listMode) {\n              // val.node happens to be undefined when list has been updated in UI\n              if (val.node) {\n                collection.append(val.node)\n              } \n              // TODO: ???                 \n              else if(val instanceof rdf.Literal) {\n                collection.append(val)\n              } else throw \"could not add \"+val+\" to collection \"+collection\n            } else store.add(subject, property, val.node, defaultGraphNode)\n            if (val instanceof Subject) {\n              this.addNewValuestoStore(store, val.uri)\n            }\n          }\n        }\n        if (listMode && collection.elements.length) {\n          collection.close()\n          store.add(subject, property, collection, defaultGraphNode)\n        }\n      }\n    }\n  }\n\n  propsUpdateEffect: (subjectUri: string, pathString: string) => AtomEffect<Array<Value>> =\n    (subjectUri: string, pathString: string) =>\n    ({ setSelf, onSet }: setSelfOnSelf) => {\n      onSet((newValues: Array<Value> | DefaultValue): void => {\n        if (!(newValues instanceof DefaultValue)) {\n          //debug(\"updating:\",subjectUri, pathString, newValues)\n          this.onUpdateValues(subjectUri, pathString, newValues)\n        }\n      })\n    }\n\n  @Memoize((pathString: string, subjectUri: string) => {\n    return subjectUri + pathString\n  })\n  getAtomForSubjectProperty(pathString: string, subjectUri: string) {\n    return atom<Array<Value>>({\n      key: this.idHash + subjectUri + pathString,\n      default: [],\n      effects_UNSTABLE: [this.propsUpdateEffect(subjectUri, pathString)],\n      // disable immutability in production\n      dangerouslyAllowMutability: true,\n    })\n  }\n\n  hasSubject(subjectUri: string): boolean {\n    return subjectUri in this.newSubjectProps\n  }\n}\n\ntype setSelfOnSelf = {\n  setSelf: (arg: any) => void\n  onSet: (newValues: (arg: Array<Value> | DefaultValue) => void) => void\n}\n\n// a proxy to an EntityGraph that updates the entity graph but is purely read-only, so that React is happy\nexport class EntityGraph {\n  onGetInitialValues: (subjectUri: string, pathString: string, values: Array<Value>) => void\n  getAtomForSubjectProperty: (pathString: string, subjectUri: string) => RecoilState<Array<Value>>\n\n  getValues: () => EntityGraphValues\n\n  get values(): EntityGraphValues {\n    return this.getValues()\n  }\n\n  // where to start when reconstructing the tree\n  topSubjectUri: string\n  store: rdf.Store\n  // connexGraph is the store that contains the labels of associated resources\n  // (ex: students, teachers, etc.), it's not present in all circumstances\n  connexGraph?: rdf.Store\n  prefixMap: ns.PrefixMap\n  labelProperties: Array<rdf.NamedNode>\n  descriptionProperties: Array<rdf.NamedNode>\n\n  constructor(\n    store: rdf.Store,\n    topSubjectUri: string,\n    prefixMap = ns.defaultPrefixMap,\n    connexGraph: rdf.Store = rdf.graph(),\n    labelProperties = defaultLabelProperties,\n    descriptionProperties = defaultDescriptionProperties\n  ) {\n    this.store = store\n    this.prefixMap = prefixMap\n    this.descriptionProperties = descriptionProperties\n    this.labelProperties = labelProperties\n    // strange code: we're keeping values in the closure so that when the object freezes\n    // the freeze doesn't proagate to it\n    const values = new EntityGraphValues(topSubjectUri)\n    this.topSubjectUri = topSubjectUri\n    this.onGetInitialValues = values.onGetInitialValues\n    this.getAtomForSubjectProperty = (pathString, subjectUri) =>\n      values.getAtomForSubjectProperty(pathString, subjectUri)\n    this.connexGraph = connexGraph\n    this.getValues = () => {\n      return values\n    }\n  }\n\n  addNewValuestoStore(store: rdf.Store): void {\n    this.values.addNewValuestoStore(store, this.topSubjectUri)\n  }\n\n  static addIdToLitList = (litList: Array<rdf.Literal>): Array<LiteralWithId> => {\n    return litList.map((lit: rdf.Literal): LiteralWithId => {\n      return new LiteralWithId(lit.value, lit.language, lit.datatype)\n    })\n  }\n\n  static addLabelsFromGraph = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<RDFResourceWithLabel> => {\n    return resList.map((res: rdf.NamedNode): RDFResourceWithLabel => {\n      return new RDFResourceWithLabel(res, graph)\n    })\n  }\n\n  static addExtDataFromGraph = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<RDFResourceWithLabel> => {\n    return resList.map((res: rdf.NamedNode): RDFResourceWithLabel => {\n      if (!graph.connexGraph) {\n        throw \"trying to access inexistant associatedStore\"\n      }\n      const perLang: Record<string, string> = {}\n      for (const p of graph.labelProperties) {\n        const lits: Array<rdf.Literal> = graph.connexGraph.each(res, p, null) as Array<rdf.Literal>\n        for (const lit of lits) {\n          if (lit.language in perLang) continue\n          perLang[lit.language] = lit.value\n        }\n      }\n      return new ExtRDFResourceWithLabel(res.uri, perLang)\n    })\n  }\n\n  hasSubject(subjectUri: string): boolean {\n    if (this.values.hasSubject(subjectUri)) return true\n    return this.store.any(new rdf.NamedNode(subjectUri), null, null) != null\n  }\n\n  static subjectify = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<Subject> => {\n    return resList.map((res: rdf.NamedNode): Subject => {\n      return new Subject(res, graph)\n    })\n  }\n\n  // only returns the values that were not initalized before\n  getUnitializedValues(s: RDFResource, p: PropertyShape): Array<Value> | null {\n    const path = p.path\n    if (!path) return null\n    if (this.values.isInitialized(s.uri, path.sparqlString)) {\n      return null\n    }\n    return this.getPropValuesFromStore(s, p)\n  }\n\n  getPropValuesFromStore(s: RDFResource, p: PropertyShape): Array<Value> {\n    if (!p.path) {\n      throw \"can't find path of \" + p.uri\n    }\n    switch (p.objectType) {\n      case ObjectType.ResExt:\n        if (!p.path.directPathNode) {\n          // I'm not so sure about this exception but well... it's ok in our current rules\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        const fromRDFResExt: Array<rdf.NamedNode> = s.getPropResValuesFromPath(p.path)\n        const fromRDFResExtwData = EntityGraph.addExtDataFromGraph(fromRDFResExt, s.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFResExtwData)\n        return fromRDFResExtwData\n        break\n      case ObjectType.Internal:\n        const fromRDFSubNode: Array<rdf.NamedNode> = s.getPropResValuesFromPath(p.path)\n        const fromRDFSubs = EntityGraph.subjectify(fromRDFSubNode, s.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFSubs)\n        return fromRDFSubs\n        break\n      case ObjectType.ResInList:\n        if (!p.path.directPathNode) {\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        const fromRDFResList: Array<rdf.NamedNode> = s.getPropResValues(p.path.directPathNode)\n        // TODO: p.graph should be the graph of the ontology instead\n        const fromRDFReswLabels = EntityGraph.addLabelsFromGraph(fromRDFResList, p.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFReswLabels)\n        return fromRDFReswLabels\n        break\n      case ObjectType.Literal:\n      case ObjectType.LitInList:\n      default:\n        if (!p.path.directPathNode) {\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        let fromRDFLits: Array<rdf.Literal>\n        if (p.hasListAsObject) {\n          const fromRDFLitsList = s.getPropLitValuesFromList(p.path.directPathNode)\n          fromRDFLits = fromRDFLitsList === null ? [] : fromRDFLitsList\n        } else {\n          fromRDFLits = s.getPropLitValues(p.path.directPathNode)\n        }\n        const fromRDFLitIDs = EntityGraph.addIdToLitList(fromRDFLits)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFLitIDs)\n        return fromRDFLitIDs\n        break\n    }\n  }\n}\n\nexport class RDFResource {\n  node: rdf.NamedNode | rdf.BlankNode | rdf.Collection\n  graph: EntityGraph\n  isCollection: boolean\n\n  constructor(node: rdf.NamedNode | rdf.BlankNode | rdf.Collection, graph: EntityGraph) {\n    this.node = node\n    this.graph = graph\n    this.isCollection = node instanceof rdf.Collection\n  }\n\n  public get id(): string {\n    return this.node.value\n  }\n\n  public get value(): string {\n    return this.node.value\n  }\n\n  public get lname(): string {\n    return this.graph.prefixMap.lnameFromUri(this.node.value)\n  }\n\n  public get namespace(): string {\n    return this.graph.prefixMap.namespaceFromUri(this.node.value)\n  }\n\n  public get qname(): string {\n    return this.graph.prefixMap.qnameFromUri(this.node.value)\n  }\n\n  public get uri(): string {\n    return this.node.value\n  }\n\n  static valuesByLang(values: Array<Value>): Record<string, string> {\n    const res: Record<string, string> = {}\n    for (const value of values) {\n      if (value instanceof LiteralWithId) {\n        res[value.language] = value.value\n      }\n    }\n    return res\n  }\n\n  public getPropValueByLang(p: rdf.NamedNode): Record<string, string> {\n    if (this.node instanceof rdf.Collection) return {}\n    const lits: Array<rdf.Literal> = this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n    const res: Record<string, string> = {}\n    for (const lit of lits) {\n      res[lit.language] = lit.value\n    }\n    return res\n  }\n\n  public getPropValueOrNullByLang(p: rdf.NamedNode): Record<string, string> | null {\n    if (this.node instanceof rdf.Collection) return {}\n    const lits: Array<rdf.Literal> = this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n    const res: Record<string, string> = {}\n    let i = 0\n    for (const lit of lits) {\n      i += 1\n      res[lit.language] = lit.value\n    }\n    if (i == 0) return null\n    return res\n  }\n\n  public getPropLitValues(p: rdf.NamedNode): Array<rdf.Literal> {\n    if (this.node instanceof rdf.Collection) return []\n    return this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n  }\n\n  public getPropResValues(p: rdf.NamedNode): Array<rdf.NamedNode> {\n    if (this.node instanceof rdf.Collection) return []\n    return this.graph.store.each(this.node, p, null) as Array<rdf.NamedNode>\n  }\n\n  public getPropResValuesFromList(p: rdf.NamedNode): Array<rdf.NamedNode> | null {\n    if (this.node instanceof rdf.Collection) return null\n    const colls = this.graph.store.each(this.node, p, null) as Array<rdf.Collection>\n    for (const coll of colls) {\n      return coll.elements as Array<rdf.NamedNode>\n    }\n    return null\n  }\n\n  public getPropLitValuesFromList(p: rdf.NamedNode): Array<rdf.Literal> | null {\n    if (this.node instanceof rdf.Collection) return null\n    const colls = this.graph.store.each(this.node, p, null) as Array<rdf.Collection>\n    for (const coll of colls) {\n      return coll.elements as Array<rdf.Literal>\n    }\n    return null\n  }\n\n  public getPropIntValue(p: rdf.NamedNode): number | null {\n    if (this.node instanceof rdf.Collection) return null\n    const lit: rdf.Literal | null = this.graph.store.any(this.node, p, null) as rdf.Literal | null\n    if (lit === null) return null\n    return rdfLitAsNumber(lit)\n  }\n\n  public getPropStringValue(p: rdf.NamedNode): string | null {\n    if (this.node instanceof rdf.Collection) return null\n    const lit: rdf.Literal | null = this.graph.store.any(this.node, p, null) as rdf.Literal | null\n    if (lit === null) return null\n    return lit.value\n  }\n\n  public getPropResValue(p: rdf.NamedNode): rdf.NamedNode | null {\n    if (this.node instanceof rdf.Collection) return null\n    const res: rdf.NamedNode | null = this.graph.store.any(this.node, p, null) as rdf.NamedNode | null\n    return res\n  }\n\n  public getPropResValuesFromPath(p: Path): Array<rdf.NamedNode> {\n    if (this.node instanceof rdf.Collection) return []\n    if (p.directPathNode) {\n      return this.graph.store.each(this.node, p.directPathNode, null) as Array<rdf.NamedNode>\n    }\n    return this.graph.store.each(null, p.inversePathNode, this.node) as Array<rdf.NamedNode>\n  }\n\n  public getPropResValueFromPath(p: Path): rdf.NamedNode | null {\n    if (this.node instanceof rdf.Collection) return null\n    if (p.directPathNode) {\n      return this.graph.store.any(this.node, p.directPathNode, null) as rdf.NamedNode | null\n    }\n    return this.graph.store.any(this.node, p.inversePathNode, null) as rdf.NamedNode | null\n  }\n\n  public getPropBooleanValue(p: rdf.NamedNode, dflt = false): boolean {\n    if (this.node instanceof rdf.Collection) return dflt\n    const lit: rdf.Literal = this.graph.store.any(this.node, p, null) as rdf.Literal\n    if (!lit) return dflt\n    const n = Boolean(lit.value)\n    if (n) {\n      return n\n    }\n    return dflt\n  }\n}\n\nexport class RDFResourceWithLabel extends RDFResource {\n\n  node: rdf.NamedNode\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph, labelProp?: rdf.NamedNode) {\n    super(node, graph)\n    this.node = node\n  }\n\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    for (const p of this.graph.labelProperties) {\n      const res = this.getPropValueOrNullByLang(p)\n      if (res != null) return res\n    }\n    return { en: this.node.uri }\n  }\n\n  @Memoize()\n  public get description(): Record<string, string> | null {\n    for (const p of this.graph.descriptionProperties) {\n      const res = this.getPropValueOrNullByLang(p)\n      if (res != null) return res\n    }\n    return null\n  }\n}\n\n// this class allows to create a resource from just a URI and labels, we need it for external entities\nexport class ExtRDFResourceWithLabel extends RDFResourceWithLabel {\n  private _prefLabels: Record<string, string>\n  private _description: Record<string, string> | null\n  private _otherData: Record<string, any>\n\n  public get prefLabels(): Record<string, string> {\n    return this._prefLabels\n  }\n\n  public get description(): Record<string, string> | null {\n    return this._description\n  }\n\n  public get otherData(): Record<string, any> {\n    return this._otherData\n  }\n\n  constructor(\n    uri: string,\n    prefLabels: Record<string, string>,\n    data: Record<string, any> = {},\n    description: Record<string, any> | null = null\n  ) {\n    super(new rdf.NamedNode(uri), new EntityGraph(new rdf.Store(), uri))\n    this._prefLabels = prefLabels\n    this._description = description\n    //debug(\"data\", data)\n    this._otherData = data\n  }\n\n  public addOtherData(key: string, value: any): ExtRDFResourceWithLabel {\n    return new ExtRDFResourceWithLabel(this.uri, this._prefLabels, { ...this._otherData, [key]: value })\n  }\n}\n\nexport enum ObjectType {\n  Literal,\n  Internal,\n  ResInList,\n  ResExt,\n  ResIgnore,\n  LitInList,\n}\n\nexport class LiteralWithId extends rdf.Literal {\n  id: string\n\n  constructor(value: string, language?: string | null, datatype?: rdf.NamedNode, id?: string) {\n    super(value, language, datatype)\n    if (id) {\n      this.id = id\n    } else {\n      this.id = nanoid()\n    }\n  }\n\n  public copy() {\n    return new LiteralWithId(this.value, this.language, this.datatype, this.id)\n  }\n\n  public copyWithUpdatedValue(value: string) {\n    return new LiteralWithId(value, this.language, this.datatype, this.id)\n  }\n\n  public copyWithUpdatedLanguage(language: string) {\n    return new LiteralWithId(this.value, language, this.datatype, this.id)\n  }\n}\n\nexport type Value = Subject | LiteralWithId | RDFResourceWithLabel\n\nexport class Subject extends RDFResource {\n\n  node: rdf.NamedNode\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph)\n    this.node = node\n  }\n\n  getUnitializedValues(property: PropertyShape): Array<Value> | null {\n    return this.graph.getUnitializedValues(this, property)\n  }\n\n  getAtomForProperty(pathString: string) {\n    return this.graph.getAtomForSubjectProperty(pathString, this.uri)\n  }\n\n  /*\n  // sets the flag to store to history or not according to the case,\n  // allows to store value modification not on top of history,\n  // \n  // ex: noHisto(false, -1)    // put empty subnodes in history before tmp:allValuesLoaded\n  //     noHisto(false, 1)     // allow parent node in history but default empty subnodes before tmp:allValuesLoaded\n  //     noHisto(false, false) // history back to normal => not exactly... must also use resetNoHisto()\n  //     noHisto(true)         // disable value storing when doing undo/redo\n  */\n  noHisto(force = false, start: boolean | number = true) {\n    const current = this.graph.getValues().noHisto\n    //debug(\"noHisto:\", force, start, this.qname, this, current)\n    if (!force && current === -1) return\n    // DONE: default values need to be added to history when entity is loading\n    if (start !== true) this.graph.getValues().noHisto = start\n    // TODO: update test to be true when adding empty val after having selected ExtEntity in a Facet (use getParentPath?)\n    else if (force || history[this.uri] && history[this.uri].some((h) => h[\"tmp:allValuesLoaded\"]))\n      this.graph.getValues().noHisto = true\n  }\n  resetNoHisto() {\n    this.graph.getValues().noHisto = false\n  }\n\n  static createEmpty(): Subject {\n    return new Subject(new rdf.NamedNode(\"tmp:uri\"), new EntityGraph(new rdf.Store(), \"tmp:uri\"))\n  }\n\n  isEmpty(): boolean {\n    return this.node.uri == \"tmp:uri\"\n  }\n}\n\nexport const noneSelected = new ExtRDFResourceWithLabel(\"tmp:none\", { en: \"–\" }, {}, { en: \"none provided\" })\nexport const emptyLiteral = new LiteralWithId(\"\")\n\nexport const sameLanguage = (lang1: string, lang2: string): boolean => {\n  // TODO: ignore suffixes\n  return lang1 == lang2\n}\n","import * as rdf from \"rdflib\"\nimport {\n  RDFResource,\n  RDFResourceWithLabel,\n  EntityGraph,\n  ExtRDFResourceWithLabel,\n  Subject,\n  rdfLitAsNumber,\n  LiteralWithId,\n  ObjectType,\n  Value,\n} from \"./types\"\nimport * as ns from \"./ns\"\nimport { Memoize } from \"typescript-memoize\"\nimport { nanoid, customAlphabet } from \"nanoid\"\n\nconst debug = require(\"debug\")(\"rde:rdf:shapes\")\n\nexport const rdfType = ns.RDF(\"type\") as rdf.NamedNode\nexport const shProperty = ns.SH(\"property\")\nexport const shGroup = ns.SH(\"group\")\nexport const shOrder = ns.SH(\"order\") as rdf.NamedNode\nexport const rdfsLabel = ns.RDFS(\"label\") as rdf.NamedNode\nexport const prefLabel = ns.SKOS(\"prefLabel\") as rdf.NamedNode\nexport const shName = ns.SH(\"name\") as rdf.NamedNode\nexport const shPath = ns.SH(\"path\") as rdf.NamedNode\nexport const dashEditor = ns.DASH(\"editor\") as rdf.NamedNode\nexport const shNode = ns.SH(\"node\") as rdf.NamedNode\nexport const dashListShape = ns.DASH(\"ListShape\") as rdf.NamedNode\nexport const dashEnumSelectEditor = ns.DASH(\"EnumSelectEditor\") as rdf.NamedNode\nexport const shMessage = ns.SH(\"message\") as rdf.NamedNode\nexport const rdeDisplayPriority = ns.RDE(\"displayPriority\") as rdf.NamedNode\nexport const shMinCount = ns.SH(\"minCount\") as rdf.NamedNode\nexport const shMinInclusive = ns.SH(\"minInclusive\") as rdf.NamedNode\nexport const shMinExclusive = ns.SH(\"minExclusive\") as rdf.NamedNode\nexport const shClass = ns.SH(\"class\") as rdf.NamedNode\nexport const shMaxCount = ns.SH(\"maxCount\") as rdf.NamedNode\nexport const shMaxInclusive = ns.SH(\"maxInclusive\") as rdf.NamedNode\nexport const shMaxExclusive = ns.SH(\"maxExclusive\") as rdf.NamedNode\nexport const shDatatype = ns.SH(\"datatype\") as rdf.NamedNode\nexport const dashSingleLine = ns.DASH(\"singleLine\") as rdf.NamedNode\nexport const shTargetClass = ns.SH(\"targetClass\") as rdf.NamedNode\nexport const shTargetObjectsOf = ns.SH(\"targetObjectsOf\") as rdf.NamedNode\nexport const shTargetSubjectsOf = ns.SH(\"targetSubjectsOf\") as rdf.NamedNode\nexport const rdePropertyShapeType = ns.RDE(\"propertyShapeType\") as rdf.NamedNode\nexport const rdeInternalShape = ns.RDE(\"InternalShape\") as rdf.NamedNode\nexport const rdeExternalShape = ns.RDE(\"ExternalShape\") as rdf.NamedNode\nexport const rdeIgnoreShape = ns.RDE(\"IgnoreShape\") as rdf.NamedNode\nexport const rdeClassIn = ns.RDE(\"classIn\") as rdf.NamedNode\nexport const shIn = ns.SH(\"in\") as rdf.NamedNode\nexport const shInversePath = ns.SH(\"inversePath\") as rdf.NamedNode\nexport const shUniqueLang = ns.SH(\"uniqueLang\") as rdf.NamedNode\nexport const rdeReadOnly = ns.RDE(\"readOnly\") as rdf.NamedNode\nexport const rdeIdentifierPrefix = ns.RDE(\"identifierPrefix\") as rdf.NamedNode\nexport const rdeAllowMarkDown = ns.RDE(\"allowMarkDown\") as rdf.NamedNode\nexport const shNamespace = ns.SH(\"namespace\") as rdf.NamedNode\nexport const rdeDefaultLanguage = ns.RDE(\"defaultLanguage\") as rdf.NamedNode\nexport const rdeDefaultValue = ns.RDE(\"defaultValue\") as rdf.NamedNode\nexport const shLanguageIn = ns.SH(\"languageIn\") as rdf.NamedNode\nexport const shPattern = ns.SH(\"pattern\") as rdf.NamedNode\nexport const rdeSortOnProperty = ns.RDE(\"sortOnProperty\") as rdf.NamedNode\nexport const rdeAllowPushToTopLevelLabel = ns.RDE(\"allowPushToTopLevelLabel\") as rdf.NamedNode\nexport const rdeIndependentIdentifiers = ns.RDE(\"independentIdentifiers\") as rdf.NamedNode\nexport const rdeSpecialPattern = ns.RDE(\"specialPattern\") as rdf.NamedNode\nexport const rdeConnectIDs = ns.RDE(\"connectIDs\") as rdf.NamedNode\nexport const rdeAllowBatchManagement = ns.RDE(\"allowBatchManagement\") as rdf.NamedNode\nexport const rdeCopyObjectsOfProperty = ns.RDE(\"copyObjectsOfProperty\") as rdf.NamedNode\nexport const rdeUniqueValueAmongSiblings = ns.RDE(\"uniqueValueAmongSiblings\") as rdf.NamedNode\nexport const rdfLangString = ns.RDF(\"langString\") as rdf.NamedNode\nexport const skosDefinition = ns.SKOS(\"definition\") as rdf.NamedNode\nexport const rdfsComment = ns.RDFS(\"comment\") as rdf.NamedNode\nexport const shDescription = ns.SH(\"description\") as rdf.NamedNode\n\nexport const defaultLabelProperties = [prefLabel, rdfsLabel, shName]\nexport const defaultDescriptionProperties = [skosDefinition, rdfsComment, shDescription]\n\nexport const sortByPropValue = (\n  nodelist: Array<rdf.NamedNode>,\n  property: rdf.NamedNode,\n  store: rdf.Store\n): Array<rdf.NamedNode> => {\n  const nodeUriToPropValue: Record<string,number> = {}\n  for (const node of nodelist) {\n    const ordern: rdf.Literal | null = store.any(node, property, null) as rdf.Literal\n    if (!ordern) nodeUriToPropValue[node.uri] = 0\n    const asnum = rdfLitAsNumber(ordern)\n    nodeUriToPropValue[node.uri] = asnum == null ? 0 : asnum\n  }\n  // TODO: untested\n  return [...nodelist].sort((a: rdf.NamedNode, b: rdf.NamedNode) => {\n    return nodeUriToPropValue[a.uri] - nodeUriToPropValue[b.uri]\n  })\n}\n\nexport class Path {\n  sparqlString: string\n\n  directPathNode: rdf.NamedNode | null = null\n  inversePathNode: rdf.NamedNode | null = null\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph, listMode: boolean) {\n    const invpaths = graph.store.each(node, shInversePath, null) as Array<rdf.NamedNode>\n    if (invpaths.length > 1) {\n      throw \"too many inverse path in shacl path:\" + invpaths\n    }\n    if (invpaths.length == 1) {\n      const invpath = invpaths[0]\n      this.sparqlString = \"^\" + invpath.value\n      this.inversePathNode = invpath\n    } else {\n      // if this is a list we add \"[]\" at the end\n      if (listMode) {\n        this.sparqlString = node.value + \"[]\"\n      } else {\n        this.sparqlString = node.value\n      }\n      this.directPathNode = node as rdf.NamedNode\n    }\n  }\n}\n\nexport class PropertyShape extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  // different property for prefLabels, property shapes are using sh:name, otherwise use\n  // labels of the property\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    let res = {}\n    if (this.path && (this.path.directPathNode || this.path.inversePathNode)) {\n      const pathNode = this.path.directPathNode || this.path.inversePathNode\n      if (pathNode) {\n        const propInOntology = new RDFResourceWithLabel(pathNode, this.graph)\n        res = propInOntology.prefLabels\n      }\n    }\n    const resFromShape = this.getPropValueByLang(shName)\n    res = { ...res, ...resFromShape }\n    return res\n  }\n\n  // helpMessage directly from shape or from the property\n  @Memoize()\n  public get helpMessage(): Record<string, string> | null {\n    let res = this.description\n    if (res == null && this.path && (this.path.directPathNode || this.path.inversePathNode)) {\n      const pathNode = this.path.directPathNode || this.path.inversePathNode\n      if (pathNode) {\n        const propInOntology = new RDFResourceWithLabel(pathNode, this.graph)\n        res = propInOntology.description\n      }\n    }\n    return res\n  }\n\n  // error message?\n  @Memoize()\n  public get errorMessage(): Record<string, string> | null {\n    const res = this.getPropValueByLang(shMessage)\n    return res\n  }\n\n  @Memoize()\n  public get defaultValue(): rdf.Node | null {\n    return this.graph.store.any(this.node, rdeDefaultValue, null)\n  }\n\n  @Memoize()\n  public get singleLine(): boolean {\n    return this.getPropBooleanValue(dashSingleLine)\n  }\n\n  @Memoize()\n  public get connectIDs(): boolean {\n    return this.getPropBooleanValue(rdeConnectIDs, false)\n  }\n\n  @Memoize()\n  public get displayPriority(): number | null {\n    return this.getPropIntValue(rdeDisplayPriority)\n  }\n\n  @Memoize()\n  public get minCount(): number | null {\n    return this.getPropIntValue(shMinCount)\n  }\n\n  @Memoize()\n  public get maxCount(): number | null {\n    return this.getPropIntValue(shMaxCount)\n  }\n\n  @Memoize()\n  public get minInclusive(): number | null {\n    return this.getPropIntValue(shMinInclusive)\n  }\n\n  @Memoize()\n  public get maxInclusive(): number | null {\n    return this.getPropIntValue(shMaxInclusive)\n  }\n\n  @Memoize()\n  public get minExclusive(): number | null {\n    return this.getPropIntValue(shMinExclusive)\n  }\n\n  @Memoize()\n  public get maxExclusive(): number | null {\n    return this.getPropIntValue(shMaxExclusive)\n  }\n\n  @Memoize()\n  public get allowMarkDown(): boolean | null {\n    return this.getPropBooleanValue(rdeAllowMarkDown)\n  }\n\n  @Memoize()\n  public get allowBatchManagement(): boolean | null {\n    return this.getPropBooleanValue(rdeAllowBatchManagement)\n  }\n\n  @Memoize()\n  public get uniqueValueAmongSiblings(): boolean | null {\n    return this.getPropBooleanValue(rdeUniqueValueAmongSiblings)\n  }\n\n  @Memoize()\n  public get uniqueLang(): boolean | null {\n    return this.getPropBooleanValue(shUniqueLang)\n  }\n\n  @Memoize()\n  public get readOnly(): boolean {\n    return this.getPropBooleanValue(rdeReadOnly)\n  }\n\n  @Memoize()\n  public get defaultLanguage(): string | null {\n    return this.getPropStringValue(rdeDefaultLanguage)\n  }\n\n  @Memoize()\n  public get editorLname(): string | null {\n    const val = this.getPropResValue(dashEditor)\n    if (!val) return null\n    return ns.defaultPrefixMap.lnameFromUri(val.value)\n  }\n\n  @Memoize()\n  public get group(): rdf.NamedNode | null {\n    return this.getPropResValue(shGroup as rdf.NamedNode)\n  }\n\n  @Memoize()\n  public get copyObjectsOfProperty(): Array<rdf.NamedNode> | null {\n    const res: Array<PropertyShape> = []\n    return this.graph.store.each(this.node, rdeCopyObjectsOfProperty, null) as Array<rdf.NamedNode>\n  }\n\n  @Memoize()\n  public get datatype(): rdf.NamedNode | null {\n    const res = this.getPropResValue(shDatatype)\n    if (res === null && this.hasListAsObject) {\n      const propNodes: Array<rdf.NamedNode | rdf.BlankNode> = this.graph.store.each(\n        this.node,\n        shProperty,\n        null\n      ) as Array<rdf.NamedNode | rdf.BlankNode>\n      if (!propNodes) return null\n      const props: Array<RDFResource> = PropertyShape.resourcizeWithInit(propNodes, this.graph)\n      for (const p of props) {\n        return p.getPropResValue(shDatatype)\n      }\n    }\n    return res\n  }\n\n  @Memoize()\n  public get pattern(): string | null {\n    return this.getPropStringValue(shPattern)\n  }\n\n  @Memoize()\n  public get sortOnProperty(): rdf.NamedNode | null {\n    return this.getPropResValue(rdeSortOnProperty)\n  }\n\n  @Memoize()\n  public get allowPushToTopLevelLabel(): boolean {\n    return this.getPropBooleanValue(rdeAllowPushToTopLevelLabel)\n  }\n\n  @Memoize()\n  public get specialPattern(): rdf.NamedNode | null {\n    return this.getPropResValue(rdeSpecialPattern)\n  }\n\n  public static resourcizeWithInit(\n    nodes: Array<rdf.NamedNode | rdf.BlankNode>,\n    graph: EntityGraph\n  ): Array<RDFResourceWithLabel> {\n    const res: Array<RDFResourceWithLabel> = []\n    for (const node of nodes) if(node instanceof rdf.NamedNode) {\n      const r = new RDFResourceWithLabel(node, graph)\n      // just a way to intialize the value before the object gets frozen like a yogurt by Recoil\n      let justforinit = r.description\n      justforinit = r.prefLabels\n      res.push(r)\n    }\n    return res\n  }\n\n  @Memoize()\n  public get hasListAsObject(): boolean {\n    const res = this.graph.store.each(this.node, shNode, dashListShape)\n    if (res == null || res.length == 0) return false\n    return true\n  }\n\n  @Memoize()\n  public get in(): Array<RDFResourceWithLabel | LiteralWithId> | null {\n    if (this.hasListAsObject) {\n      // if no direct in, let's look at the sh:property objects (quite counter intuitive, but it follows the shacl examples)\n      const propNodes: Array<rdf.NamedNode | rdf.BlankNode> = this.graph.store.each(\n        this.node,\n        shProperty,\n        null\n      ) as Array<rdf.NamedNode | rdf.BlankNode>\n      if (!propNodes) return null\n      const props: Array<RDFResource> = PropertyShape.resourcizeWithInit(propNodes, this.graph)\n      for (const p of props) {\n        if (p.getPropResValue(shDatatype)) {\n          const nodes = p.getPropLitValuesFromList(shIn)\n          if (nodes) return EntityGraph.addIdToLitList(nodes)\n        } else {\n          const nodes = p.getPropResValuesFromList(shIn)\n          if (nodes) return PropertyShape.resourcizeWithInit(nodes, this.graph)\n        }\n      }\n    }\n    if (this.datatype) {\n      const nodes = this.getPropLitValuesFromList(shIn)\n      if (nodes) return EntityGraph.addIdToLitList(nodes)\n    } else {\n      // if no datatype, then it's res\n      const nodes = this.getPropResValuesFromList(shIn)\n      if (nodes) return PropertyShape.resourcizeWithInit(nodes, this.graph)\n    }\n    return null\n  }\n\n  @Memoize()\n  public get expectedObjectTypes(): Array<RDFResourceWithLabel> | null {\n    let nodes = this.getPropResValuesFromList(rdeClassIn)\n    if (!nodes) {\n      const cl = this.getPropResValues(shClass)\n      if (cl.length) nodes = cl\n    }\n    if (!nodes) return null\n    return PropertyShape.resourcizeWithInit(nodes, this.graph)\n  }\n\n  @Memoize()\n  public get path(): Path | null {\n    const pathNode = this.getPropResValue(shPath)\n    if (!pathNode) return null\n    return new Path(pathNode, this.graph, this.hasListAsObject)\n  }\n\n  @Memoize()\n  public get objectType(): ObjectType {\n    const propertyShapeType = this.getPropResValue(rdePropertyShapeType)\n    if (!propertyShapeType) {\n      const editor = this.getPropResValue(dashEditor)\n      if (!editor) return ObjectType.Literal\n      if (editor.value == dashEnumSelectEditor.value) {\n        if (this.datatype) return ObjectType.LitInList\n        return ObjectType.ResInList\n      }\n      return ObjectType.Literal\n    }\n    // for some reason direct comparison doesn't work...\n    if (propertyShapeType.value == rdeInternalShape.value) return ObjectType.Internal\n    else if (propertyShapeType.value == rdeExternalShape.value) return ObjectType.ResExt\n    else if (propertyShapeType.value == rdeIgnoreShape.value) return ObjectType.ResIgnore\n    throw \"can't handle property shape type \" + propertyShapeType.value + \" for property shape \" + this.qname\n  }\n\n  @Memoize()\n  public get targetShape(): NodeShape | null {\n    const path = this.path\n    if (!path) {\n      debug(\"can't find path for \" + this.uri)\n      return null\n    }\n    let val: rdf.NamedNode | null\n    if (path.directPathNode) {\n      val = this.graph.store.any(null, shTargetObjectsOf, path.directPathNode) as rdf.NamedNode | null\n      if (val == null) return null\n      return new NodeShape(val, this.graph)\n    }\n    if (path.inversePathNode) {\n      val = this.graph.store.any(null, shTargetSubjectsOf, path.inversePathNode) as rdf.NamedNode | null\n      if (val == null) return null\n      return new NodeShape(val, this.graph)\n    }\n    return null\n  }\n}\n\nexport class PropertyGroup extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  @Memoize()\n  public get properties(): Array<PropertyShape> {\n    const res: Array<PropertyShape> = []\n    let propsingroup: Array<rdf.NamedNode> = this.graph.store.each(null, shGroup, this.node) as Array<rdf.NamedNode>\n    propsingroup = sortByPropValue(propsingroup, shOrder, this.graph.store)\n    for (const prop of propsingroup) {\n      res.push(new PropertyShape(prop, this.graph))\n    }\n    return res\n  }\n\n  // different property for prefLabels, property shapes are using sh:name\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    return this.getPropValueByLang(rdfsLabel)\n  }\n}\n\nexport class NodeShape extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  @Memoize()\n  public get targetClassPrefLabels(): Record<string, string> | null {\n    const targetClass: rdf.NamedNode | null = this.graph.store.any(this.node, shTargetClass, null) as rdf.NamedNode\n    if (targetClass == null) return null\n    const classInOntology = new RDFResourceWithLabel(targetClass, this.graph)\n    return classInOntology.prefLabels\n  }\n\n  @Memoize()\n  public get properties(): Array<PropertyShape> {\n    const res: Array<PropertyShape> = []\n    // get all ?shape sh:property/sh:group ?group\n    let props: Array<rdf.NamedNode> = this.graph.store.each(this.node, shProperty, null) as Array<rdf.NamedNode>\n    props = sortByPropValue(props, shOrder, this.graph.store)\n    for (const prop of props) {\n      res.push(new PropertyShape(prop, this.graph))\n    }\n    return res\n  }\n\n  @Memoize()\n  public get independentIdentifiers(): boolean {\n    return this.getPropBooleanValue(rdeIndependentIdentifiers, false)\n  }\n\n  @Memoize()\n  public get groups(): Array<PropertyGroup> {\n    const res: Array<PropertyGroup> = []\n    // get all ?shape sh:property/sh:group ?group\n    const props: Array<rdf.NamedNode> = this.graph.store.each(this.node, shProperty, null) as Array<rdf.NamedNode>\n    let grouplist: Array<rdf.NamedNode> = []\n    for (const prop of props) {\n      // we assume there's only one group per property, by construction of the shape (maybe it's wrong?)\n      const group: rdf.NamedNode | null = this.graph.store.any(prop, shGroup, null) as rdf.NamedNode\n      // for some reason grouplist.includes(group) doesn't work, I suppose new objects are created by rdflib\n      if (group && !grouplist.some((e) => e.value === group.value)) {\n        grouplist.push(group)\n      }\n    }\n    grouplist = sortByPropValue(grouplist, shOrder, this.graph.store)\n    for (const group of grouplist) {\n      res.push(new PropertyGroup(group, this.graph))\n    }\n    return res\n  }\n}\n\n// default implementation, can be overridden through config\nconst nanoidCustom = customAlphabet(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", 8) // eslint-disable-line no-magic-numbers\n\nexport const generateSubnode = async (subshape: NodeShape, parent: RDFResource): Promise<Subject> => {\n  const prefix = subshape.getPropStringValue(rdeIdentifierPrefix)\n  if (prefix == null) throw \"cannot find entity prefix for \" + subshape.qname\n  let namespace = subshape.getPropStringValue(shNamespace)\n  if (namespace == null) namespace = parent.namespace\n  let uri = namespace + prefix + parent.lname + nanoidCustom()\n  while (parent.graph.hasSubject(uri)) {\n    uri = namespace + prefix + nanoidCustom()\n  }\n  const res = new Subject(new rdf.NamedNode(uri), parent.graph)\n  return Promise.resolve(res)\n}\n"],"sourceRoot":""}