{"version":3,"file":"index.mjs","sources":["../src/helpers/rdf/ns.ts","../src/helpers/observer.ts","../src/helpers/rdf/types.ts","../src/helpers/rdf/shapes.ts","../src/routes/layout/icons.jsx","../src/helpers/lang.ts","../src/containers/EntityInEntitySelectorContainer.tsx","../src/containers/EntitySelectorContainer.tsx","../src/atoms/common.ts","../src/helpers/rdf/io.ts","../src/containers/ValueList.tsx","../src/containers/PropertyContainer.tsx","../src/containers/PropertyGroupContainer.tsx","../src/containers/EntityEditContainer.tsx","../src/containers/NewEntityContainer.tsx","../src/containers/Dialog.tsx","../src/containers/EntityCreationContainer.tsx","../src/containers/EntityShapeChooserContainer.tsx","../src/containers/BUDAResourceSelector.tsx"],"sourcesContent":["import * as rdf from \"rdflib\"\n\nexport const DASH_uri = \"http://datashapes.org/dash#\"\nexport const DASH = rdf.Namespace(DASH_uri)\nexport const OWL_uri = \"http://www.w3.org/2002/07/owl#\"\nexport const OWL = rdf.Namespace(OWL_uri)\nexport const RDFS_uri = \"http://www.w3.org/2000/01/rdf-schema#\"\nexport const RDFS = rdf.Namespace(RDFS_uri)\nexport const SH_uri = \"http://www.w3.org/ns/shacl#\"\nexport const SH = rdf.Namespace(SH_uri)\nexport const RDF_uri = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\nexport const RDF = rdf.Namespace(RDF_uri)\nexport const SKOS_uri = \"http://www.w3.org/2004/02/skos/core#\"\nexport const SKOS = rdf.Namespace(SKOS_uri)\nexport const XSD_uri = \"http://www.w3.org/2001/XMLSchema#\"\nexport const XSD = rdf.Namespace(XSD_uri)\nexport const FOAF_uri = \"http://xmlns.com/foaf/0.1/\"\nexport const FOAF = rdf.Namespace(FOAF_uri)\nexport const RDE_uri = \"https://github.com/buda-base/rdf-document-editor/\"\nexport const RDE = rdf.Namespace(RDE_uri)\n\nconst debug = require(\"debug\")(\"rde:rdf:ns\")\n\nconst defaultPrefixToURI: { [key: string]: string } = {\n  dash: DASH_uri,\n  owl: OWL_uri,\n  rde: RDE_uri,\n  rdfs: RDFS_uri,\n  sh: SH_uri,\n  rdf: RDF_uri,\n  skos: SKOS_uri,\n  xsd: XSD_uri,\n  foaf: FOAF_uri,\n}\n\nexport class PrefixMap {\n\n  prefixToURI: { [key: string]: string }\n  URItoPrefix: { [key: string]: string }\n\n  constructor(prefixToURI: { [key: string]: string }) {\n    this.prefixToURI = { ... defaultPrefixToURI, ... prefixToURI }\n    this.URItoPrefix = {}\n    for (const [prefix, uri] of Object.entries(this.prefixToURI)) {\n      this.URItoPrefix[uri] = prefix\n    }\n  }\n\n  setDefaultPrefixes = (s: rdf.Store): void => {\n    for (const [prefix, uri] of Object.entries(this.prefixToURI)) {\n      s.setPrefixForURI(prefix, uri)\n    }\n  }\n\n  qnameFromUri = (uri = \"\"): string => {\n    if (uri.match(/^[^:/#]+:[^:/#]+$/)) return uri\n\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    const localid = uri.slice(j + 1)\n    const namesp = uri.slice(0, j + 1)\n    const prefix = this.URItoPrefix[namesp]\n    if (!prefix) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    return prefix + \":\" + localid\n  }\n\n  lnameFromUri = (uri: string): string => {\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make qname out of <\" + uri + \">\")\n\n    return uri.slice(j + 1)\n  }\n\n  namespaceFromUri = (uri: string): string => {\n    let j = uri.indexOf(\"#\")\n    if (j < 0) j = uri.lastIndexOf(\"/\")\n    if (j < 0) throw new Error(\"Cannot make namespace out of <\" + uri + \">\")\n\n    return uri.slice(0, j + 1)\n  }\n\n  uriFromQname = (qname = \"\"): string => {\n    const j = qname.indexOf(\":\")\n\n    if (j < 0) throw new Error(\"Cannot make uri out of <\" + qname + \">\")\n\n    const localid = qname.slice(j + 1)\n    const prefix = qname.slice(0, j)\n    const uri_base = this.prefixToURI[prefix]\n\n    if (!uri_base) throw new Error(\"Cannot make uri out of <\" + qname + \">\")\n\n    return uri_base + localid\n  }\n\n  lnameFromQname = (qname = \"\"): string => {\n    const j = qname.indexOf(\":\")\n\n    if (j < 0) throw new Error(\"Cannot make lname out of <\" + qname + \">\")\n\n    return qname.slice(j + 1)\n  }\n}\n\nexport const defaultPrefixMap = new PrefixMap({})\n","import { uiReadyState, uiHistoryState, uiTabState, uiUndosState, noUndo, noUndoRedo, undoState } from \"../atoms/common\"\nimport { LiteralWithId, RDFResourceWithLabel, ExtRDFResourceWithLabel, Value, Subject } from \"./rdf/types\"\n\nconst debug = require(\"debug\")(\"bdrc:observer\")\n\n// global variable, should be in config?\nexport const history: Record<string, Array<Record<string, any>>> = {}\n\nexport type HistoryStatus = {\n  top?: number\n  first?: number\n  current?: number\n}\n\n// get info from history (values modified? values undone?)\nexport const getHistoryStatus = (entityUri: string): HistoryStatus => {\n  if (!history[entityUri]) return {}\n\n  // DONE: optimizing a bit (1 for instead of 2 .findIndex + 1 .some)\n  const top = history[entityUri].length - 1\n  let first = -1,\n    current = -1\n  for (const [i, h] of history[entityUri].entries()) {\n    if (h[\"tmp:allValuesLoaded\"]) first = i\n    else if (h[\"tmp:undone\"]) current = i - 1\n    if (first != -1 && current != -1) break\n  }\n  return { top, first, current }\n}\n\nexport const updateHistory = (\n  entity: string,\n  qname: string,\n  prop: string,\n  val: Array<Value>,\n  noHisto: boolean | number = true\n) => {\n  if (!history[entity]) history[entity] = []\n  else {\n    while (history[entity].length && history[entity][history[entity].length - 1][\"tmp:undone\"]) {\n      history[entity].pop()\n    }\n  }\n  const newVal = {\n    [qname]: { [prop]: val },\n    ...entity != qname ? { \"tmp:parentPath\": getParentPath(entity, qname) } : {},\n  }\n\n  // don't add empty value to history (fix adding undo steps when showing secondary properties in Person/Kinship)\n  if (val.length === 1 && !(val[0] instanceof LiteralWithId) && val[0].uri === \"tmp:uri\" || val[0].value === \"\") return\n\n  // some value modifications must not be added to history (some autocreation of empty values for example)\n  if (noHisto === -1) {\n    const first = history[entity].findIndex((h) => h[\"tmp:allValuesLoaded\"])\n    if (first > 0) history[entity].splice(first, 0, newVal)\n    else history[entity].push(newVal)\n  } else history[entity].push(newVal)\n\n  //debug(\"history:\", entity, qname, prop, val, history, noHisto)\n}\n\nexport function getParentPath(entityUri: string, sub: string) {\n  let parentPath: Array<string> = []\n  // manually check which property has this subnode as value\n  for (const h of history[entityUri]) {\n    const subSubj = Object.keys(h).filter((k) => ![\"tmp:parent\", \"tmp:undone\"].includes(k))\n    for (const s of subSubj) {\n      const subprop = Object.keys(h[s]).filter((k) => ![\"tmp:parent\", \"tmp:undone\"].includes(k))\n      for (const p of subprop) {\n        if (typeof h[s][p] !== \"string\")\n          for (const v of h[s][p]) {\n            if (v instanceof Subject && v.uri === sub) {\n              if (parentPath.length > 1 && parentPath[1] !== p)\n                throw new Error(\"multiple property (\" + parentPath + \",\" + p + \") for node \" + sub)\n              if (s !== entityUri) parentPath = getParentPath(entityUri, s)\n              parentPath.push(s)\n              parentPath.push(p)\n            }\n          }\n      }\n    }\n  }\n  return parentPath\n}\n","import * as rdf from \"rdflib\"\nimport * as ns from \"./ns\"\nimport { PropertyShape, Path, defaultLabelProperties, defaultDescriptionProperties } from \"./shapes\"\nimport { Memoize } from \"typescript-memoize\"\nimport {\n  atom,\n  DefaultValue,\n  AtomEffect,\n  RecoilState,\n} from \"recoil\"\nimport { history, updateHistory } from \"../observer\"\nimport { nanoid } from \"nanoid\"\n\nconst debug = require(\"debug\")(\"rde:rdf:types\")\n\nconst defaultGraphNode = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n\nexport const errors: Record<string, Record<string, boolean>> = {}\n\nexport const rdfLitAsNumber = (lit: rdf.Literal): number | null => {\n  const n = Number(lit.value)\n  if (!isNaN(n)) {\n    return +n\n  }\n  return null\n}\n\n// an EntityGraphValues represents the global state of an entity we're editing, in a javascript object (and not an RDF store)\nexport class EntityGraphValues {\n  oldSubjectProps: Record<string, Record<string, Array<Value>>> = {}\n  newSubjectProps: Record<string, Record<string, Array<Value>>> = {}\n  subjectUri = \"\"\n  /* eslint-disable no-magic-numbers */\n  idHash = Date.now() //getRandomIntInclusive(1000, 9999).toString()\n  noHisto: boolean | number = false\n\n  constructor(subjectUri: string) {\n    this.subjectUri = subjectUri\n  }\n\n  onGetInitialValues = (subjectUri: string, pathString: string, values: Array<Value>) => {\n    if (!(subjectUri in this.oldSubjectProps)) this.oldSubjectProps[subjectUri] = {}\n    if (!(subjectUri in this.newSubjectProps)) this.newSubjectProps[subjectUri] = {}\n    this.oldSubjectProps[subjectUri][pathString] = values\n    this.newSubjectProps[subjectUri][pathString] = values\n  }\n\n  onUpdateValues = (subjectUri: string, pathString: string, values: Array<Value>) => {\n    if (!(subjectUri in this.newSubjectProps)) this.newSubjectProps[subjectUri] = {}\n    this.newSubjectProps[subjectUri][pathString] = values\n    // disable history for current modification (autocreation of new empty simple value)\n    if (this.noHisto === true) {\n      this.noHisto = false\n      return\n    }\n    updateHistory(this.subjectUri, subjectUri, pathString, values, this.noHisto)\n    // there are some modifications that are chained and we need only first not to be stored\n    // (case of creation of new property with subproperties)\n    if (this.noHisto === 1) this.noHisto = -1\n  }\n\n  isInitialized = (subjectUri: string, pathString: string) => {\n    return subjectUri in this.oldSubjectProps && pathString in this.oldSubjectProps[subjectUri]\n  }\n\n  addNewValuestoStore(store: rdf.Store, subjectUri: string) {\n    if (!(subjectUri in this.newSubjectProps)) return\n    const subject = new rdf.NamedNode(subjectUri)\n    for (const pathString in this.newSubjectProps[subjectUri]) {\n      // handling inverse path vs. direct path\n      if (pathString.startsWith(\"^\")) {\n        const property = new rdf.NamedNode(pathString.substring(1))\n        const values: Array<Value> = this.newSubjectProps[subjectUri][pathString]\n        for (const val of values) {\n          if (val instanceof LiteralWithId) {\n            throw \"can't add literals in inverse path, something's wrong with the data!\"\n          } else {\n            if (val.node?.value == \"tmp:uri\" || val.node?.value == \"tmp:none\") continue\n            store.add(val.node, property, subject, defaultGraphNode)\n            if (val instanceof Subject) {\n              this.addNewValuestoStore(store, val.uri)\n            }\n          }\n        }\n      } else {\n        const listMode = pathString.endsWith(\"[]\")\n        const property = new rdf.NamedNode(listMode ? pathString.substring(0, pathString.length - 2) : pathString)\n        const values: Array<Value> = this.newSubjectProps[subjectUri][pathString]\n        const collection = new rdf.Collection()\n        for (const val of values) {\n          //debug(\"val:\", val, listMode)\n          if (val instanceof LiteralWithId) {\n            // do not add empty strings\n            if (val.value == \"\") continue\n            if (listMode) collection.append(val)\n            else store.add(subject, property, val, defaultGraphNode)\n          } else {\n            //debug(\"saving:\", val)\n            if (val.node?.value == \"tmp:uri\" || val.node?.value == \"tmp:none\") continue\n            if (listMode) {\n              // val.node happens to be undefined when list has been updated in UI\n              if (val.node) {\n                collection.append(val.node)\n              } \n              // TODO: ???                 \n              else if(val instanceof rdf.Literal) {\n                collection.append(val)\n              } else throw \"could not add \"+val+\" to collection \"+collection\n            } else store.add(subject, property, val.node, defaultGraphNode)\n            if (val instanceof Subject) {\n              this.addNewValuestoStore(store, val.uri)\n            }\n          }\n        }\n        if (listMode && collection.elements.length) {\n          collection.close()\n          store.add(subject, property, collection, defaultGraphNode)\n        }\n      }\n    }\n  }\n\n  propsUpdateEffect: (subjectUri: string, pathString: string) => AtomEffect<Array<Value>> =\n    (subjectUri: string, pathString: string) =>\n    ({ setSelf, onSet }: setSelfOnSelf) => {\n      onSet((newValues: Array<Value> | DefaultValue): void => {\n        if (!(newValues instanceof DefaultValue)) {\n          //debug(\"updating:\",subjectUri, pathString, newValues)\n          this.onUpdateValues(subjectUri, pathString, newValues)\n        }\n      })\n    }\n\n  @Memoize((pathString: string, subjectUri: string) => {\n    return subjectUri + pathString\n  })\n  getAtomForSubjectProperty(pathString: string, subjectUri: string) {\n    return atom<Array<Value>>({\n      key: this.idHash + subjectUri + pathString,\n      default: [],\n      effects_UNSTABLE: [this.propsUpdateEffect(subjectUri, pathString)],\n      // disable immutability in production\n      dangerouslyAllowMutability: true,\n    })\n  }\n\n  hasSubject(subjectUri: string): boolean {\n    return subjectUri in this.newSubjectProps\n  }\n}\n\ntype setSelfOnSelf = {\n  setSelf: (arg: any) => void\n  onSet: (newValues: (arg: Array<Value> | DefaultValue) => void) => void\n}\n\n// a proxy to an EntityGraph that updates the entity graph but is purely read-only, so that React is happy\nexport class EntityGraph {\n  onGetInitialValues: (subjectUri: string, pathString: string, values: Array<Value>) => void\n  getAtomForSubjectProperty: (pathString: string, subjectUri: string) => RecoilState<Array<Value>>\n\n  getValues: () => EntityGraphValues\n\n  get values(): EntityGraphValues {\n    return this.getValues()\n  }\n\n  // where to start when reconstructing the tree\n  topSubjectUri: string\n  store: rdf.Store\n  // connexGraph is the store that contains the labels of associated resources\n  // (ex: students, teachers, etc.), it's not present in all circumstances\n  connexGraph?: rdf.Store\n  prefixMap: ns.PrefixMap\n  labelProperties: Array<rdf.NamedNode>\n  descriptionProperties: Array<rdf.NamedNode>\n\n  constructor(\n    store: rdf.Store,\n    topSubjectUri: string,\n    prefixMap = ns.defaultPrefixMap,\n    connexGraph: rdf.Store = rdf.graph(),\n    labelProperties = defaultLabelProperties,\n    descriptionProperties = defaultDescriptionProperties\n  ) {\n    this.store = store\n    this.prefixMap = prefixMap\n    this.descriptionProperties = descriptionProperties\n    this.labelProperties = labelProperties\n    // strange code: we're keeping values in the closure so that when the object freezes\n    // the freeze doesn't proagate to it\n    const values = new EntityGraphValues(topSubjectUri)\n    this.topSubjectUri = topSubjectUri\n    this.onGetInitialValues = values.onGetInitialValues\n    this.getAtomForSubjectProperty = (pathString, subjectUri) =>\n      values.getAtomForSubjectProperty(pathString, subjectUri)\n    this.connexGraph = connexGraph\n    this.getValues = () => {\n      return values\n    }\n  }\n\n  addNewValuestoStore(store: rdf.Store): void {\n    this.values.addNewValuestoStore(store, this.topSubjectUri)\n  }\n\n  static addIdToLitList = (litList: Array<rdf.Literal>): Array<LiteralWithId> => {\n    return litList.map((lit: rdf.Literal): LiteralWithId => {\n      return new LiteralWithId(lit.value, lit.language, lit.datatype)\n    })\n  }\n\n  static addLabelsFromGraph = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<RDFResourceWithLabel> => {\n    return resList.map((res: rdf.NamedNode): RDFResourceWithLabel => {\n      return new RDFResourceWithLabel(res, graph)\n    })\n  }\n\n  static addExtDataFromGraph = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<RDFResourceWithLabel> => {\n    return resList.map((res: rdf.NamedNode): RDFResourceWithLabel => {\n      if (!graph.connexGraph) {\n        throw \"trying to access inexistant associatedStore\"\n      }\n      const perLang: Record<string, string> = {}\n      for (const p of graph.labelProperties) {\n        const lits: Array<rdf.Literal> = graph.connexGraph.each(res, p, null) as Array<rdf.Literal>\n        for (const lit of lits) {\n          if (lit.language in perLang) continue\n          perLang[lit.language] = lit.value\n        }\n      }\n      return new ExtRDFResourceWithLabel(res.uri, perLang)\n    })\n  }\n\n  hasSubject(subjectUri: string): boolean {\n    if (this.values.hasSubject(subjectUri)) return true\n    return this.store.any(new rdf.NamedNode(subjectUri), null, null) != null\n  }\n\n  static subjectify = (resList: Array<rdf.NamedNode>, graph: EntityGraph): Array<Subject> => {\n    return resList.map((res: rdf.NamedNode): Subject => {\n      return new Subject(res, graph)\n    })\n  }\n\n  // only returns the values that were not initalized before\n  getUnitializedValues(s: RDFResource, p: PropertyShape): Array<Value> | null {\n    const path = p.path\n    if (!path) return null\n    if (this.values.isInitialized(s.uri, path.sparqlString)) {\n      return null\n    }\n    return this.getPropValuesFromStore(s, p)\n  }\n\n  getPropValuesFromStore(s: RDFResource, p: PropertyShape): Array<Value> {\n    if (!p.path) {\n      throw \"can't find path of \" + p.uri\n    }\n    switch (p.objectType) {\n      case ObjectType.ResExt:\n        if (!p.path.directPathNode) {\n          // I'm not so sure about this exception but well... it's ok in our current rules\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        const fromRDFResExt: Array<rdf.NamedNode> = s.getPropResValuesFromPath(p.path)\n        const fromRDFResExtwData = EntityGraph.addExtDataFromGraph(fromRDFResExt, s.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFResExtwData)\n        return fromRDFResExtwData\n        break\n      case ObjectType.Internal:\n        const fromRDFSubNode: Array<rdf.NamedNode> = s.getPropResValuesFromPath(p.path)\n        const fromRDFSubs = EntityGraph.subjectify(fromRDFSubNode, s.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFSubs)\n        return fromRDFSubs\n        break\n      case ObjectType.ResInList:\n        if (!p.path.directPathNode) {\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        const fromRDFResList: Array<rdf.NamedNode> = s.getPropResValues(p.path.directPathNode)\n        // TODO: p.graph should be the graph of the ontology instead\n        const fromRDFReswLabels = EntityGraph.addLabelsFromGraph(fromRDFResList, p.graph)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFReswLabels)\n        return fromRDFReswLabels\n        break\n      case ObjectType.Literal:\n      case ObjectType.LitInList:\n      default:\n        if (!p.path.directPathNode) {\n          throw \"can't have non-direct path for property \" + p.uri\n        }\n        let fromRDFLits: Array<rdf.Literal>\n        if (p.hasListAsObject) {\n          const fromRDFLitsList = s.getPropLitValuesFromList(p.path.directPathNode)\n          fromRDFLits = fromRDFLitsList === null ? [] : fromRDFLitsList\n        } else {\n          fromRDFLits = s.getPropLitValues(p.path.directPathNode)\n        }\n        const fromRDFLitIDs = EntityGraph.addIdToLitList(fromRDFLits)\n        this.onGetInitialValues(s.uri, p.path.sparqlString, fromRDFLitIDs)\n        return fromRDFLitIDs\n        break\n    }\n  }\n}\n\nexport class RDFResource {\n  node: rdf.NamedNode | rdf.BlankNode | rdf.Collection\n  graph: EntityGraph\n  isCollection: boolean\n\n  constructor(node: rdf.NamedNode | rdf.BlankNode | rdf.Collection, graph: EntityGraph) {\n    this.node = node\n    this.graph = graph\n    this.isCollection = node instanceof rdf.Collection\n  }\n\n  public get id(): string {\n    return this.node.value\n  }\n\n  public get value(): string {\n    return this.node.value\n  }\n\n  public get lname(): string {\n    return this.graph.prefixMap.lnameFromUri(this.node.value)\n  }\n\n  public get namespace(): string {\n    return this.graph.prefixMap.namespaceFromUri(this.node.value)\n  }\n\n  public get qname(): string {\n    return this.graph.prefixMap.qnameFromUri(this.node.value)\n  }\n\n  public get uri(): string {\n    return this.node.value\n  }\n\n  static valuesByLang(values: Array<Value>): Record<string, string> {\n    const res: Record<string, string> = {}\n    for (const value of values) {\n      if (value instanceof LiteralWithId) {\n        res[value.language] = value.value\n      }\n    }\n    return res\n  }\n\n  public getPropValueByLang(p: rdf.NamedNode): Record<string, string> {\n    if (this.node instanceof rdf.Collection) return {}\n    const lits: Array<rdf.Literal> = this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n    const res: Record<string, string> = {}\n    for (const lit of lits) {\n      res[lit.language] = lit.value\n    }\n    return res\n  }\n\n  public getPropValueOrNullByLang(p: rdf.NamedNode): Record<string, string> | null {\n    if (this.node instanceof rdf.Collection) return {}\n    const lits: Array<rdf.Literal> = this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n    const res: Record<string, string> = {}\n    let i = 0\n    for (const lit of lits) {\n      i += 1\n      res[lit.language] = lit.value\n    }\n    if (i == 0) return null\n    return res\n  }\n\n  public getPropLitValues(p: rdf.NamedNode): Array<rdf.Literal> {\n    if (this.node instanceof rdf.Collection) return []\n    return this.graph.store.each(this.node, p, null) as Array<rdf.Literal>\n  }\n\n  public getPropResValues(p: rdf.NamedNode): Array<rdf.NamedNode> {\n    if (this.node instanceof rdf.Collection) return []\n    return this.graph.store.each(this.node, p, null) as Array<rdf.NamedNode>\n  }\n\n  public getPropResValuesFromList(p: rdf.NamedNode): Array<rdf.NamedNode> | null {\n    if (this.node instanceof rdf.Collection) return null\n    const colls = this.graph.store.each(this.node, p, null) as Array<rdf.Collection>\n    for (const coll of colls) {\n      return coll.elements as Array<rdf.NamedNode>\n    }\n    return null\n  }\n\n  public getPropLitValuesFromList(p: rdf.NamedNode): Array<rdf.Literal> | null {\n    if (this.node instanceof rdf.Collection) return null\n    const colls = this.graph.store.each(this.node, p, null) as Array<rdf.Collection>\n    for (const coll of colls) {\n      return coll.elements as Array<rdf.Literal>\n    }\n    return null\n  }\n\n  public getPropIntValue(p: rdf.NamedNode): number | null {\n    if (this.node instanceof rdf.Collection) return null\n    const lit: rdf.Literal | null = this.graph.store.any(this.node, p, null) as rdf.Literal | null\n    if (lit === null) return null\n    return rdfLitAsNumber(lit)\n  }\n\n  public getPropStringValue(p: rdf.NamedNode): string | null {\n    if (this.node instanceof rdf.Collection) return null\n    const lit: rdf.Literal | null = this.graph.store.any(this.node, p, null) as rdf.Literal | null\n    if (lit === null) return null\n    return lit.value\n  }\n\n  public getPropResValue(p: rdf.NamedNode): rdf.NamedNode | null {\n    if (this.node instanceof rdf.Collection) return null\n    const res: rdf.NamedNode | null = this.graph.store.any(this.node, p, null) as rdf.NamedNode | null\n    return res\n  }\n\n  public getPropResValuesFromPath(p: Path): Array<rdf.NamedNode> {\n    if (this.node instanceof rdf.Collection) return []\n    if (p.directPathNode) {\n      return this.graph.store.each(this.node, p.directPathNode, null) as Array<rdf.NamedNode>\n    }\n    return this.graph.store.each(null, p.inversePathNode, this.node) as Array<rdf.NamedNode>\n  }\n\n  public getPropResValueFromPath(p: Path): rdf.NamedNode | null {\n    if (this.node instanceof rdf.Collection) return null\n    if (p.directPathNode) {\n      return this.graph.store.any(this.node, p.directPathNode, null) as rdf.NamedNode | null\n    }\n    return this.graph.store.any(this.node, p.inversePathNode, null) as rdf.NamedNode | null\n  }\n\n  public getPropBooleanValue(p: rdf.NamedNode, dflt = false): boolean {\n    if (this.node instanceof rdf.Collection) return dflt\n    const lit: rdf.Literal = this.graph.store.any(this.node, p, null) as rdf.Literal\n    if (!lit) return dflt\n    const n = Boolean(lit.value)\n    if (n) {\n      return n\n    }\n    return dflt\n  }\n}\n\nexport class RDFResourceWithLabel extends RDFResource {\n\n  node: rdf.NamedNode\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph, labelProp?: rdf.NamedNode) {\n    super(node, graph)\n    this.node = node\n  }\n\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    for (const p of this.graph.labelProperties) {\n      const res = this.getPropValueOrNullByLang(p)\n      if (res != null) return res\n    }\n    return { en: this.node.uri }\n  }\n\n  @Memoize()\n  public get description(): Record<string, string> | null {\n    for (const p of this.graph.descriptionProperties) {\n      const res = this.getPropValueOrNullByLang(p)\n      if (res != null) return res\n    }\n    return null\n  }\n}\n\n// this class allows to create a resource from just a URI and labels, we need it for external entities\nexport class ExtRDFResourceWithLabel extends RDFResourceWithLabel {\n  private _prefLabels: Record<string, string>\n  private _description: Record<string, string> | null\n  private _otherData: Record<string, any>\n\n  public get prefLabels(): Record<string, string> {\n    return this._prefLabels\n  }\n\n  public get description(): Record<string, string> | null {\n    return this._description\n  }\n\n  public get otherData(): Record<string, any> {\n    return this._otherData\n  }\n\n  constructor(\n    uri: string,\n    prefLabels: Record<string, string>,\n    data: Record<string, any> = {},\n    description: Record<string, any> | null = null\n  ) {\n    super(new rdf.NamedNode(uri), new EntityGraph(new rdf.Store(), uri))\n    this._prefLabels = prefLabels\n    this._description = description\n    //debug(\"data\", data)\n    this._otherData = data\n  }\n\n  public addOtherData(key: string, value: any): ExtRDFResourceWithLabel {\n    return new ExtRDFResourceWithLabel(this.uri, this._prefLabels, { ...this._otherData, [key]: value })\n  }\n}\n\nexport enum ObjectType {\n  Literal,\n  Internal,\n  ResInList,\n  ResExt,\n  ResIgnore,\n  LitInList,\n}\n\nexport class LiteralWithId extends rdf.Literal {\n  id: string\n\n  constructor(value: string, language?: string | null, datatype?: rdf.NamedNode, id?: string) {\n    super(value, language, datatype)\n    if (id) {\n      this.id = id\n    } else {\n      this.id = nanoid()\n    }\n  }\n\n  public copy() {\n    return new LiteralWithId(this.value, this.language, this.datatype, this.id)\n  }\n\n  public copyWithUpdatedValue(value: string) {\n    return new LiteralWithId(value, this.language, this.datatype, this.id)\n  }\n\n  public copyWithUpdatedLanguage(language: string) {\n    return new LiteralWithId(this.value, language, this.datatype, this.id)\n  }\n}\n\nexport type Value = Subject | LiteralWithId | RDFResourceWithLabel\n\nexport class Subject extends RDFResource {\n\n  node: rdf.NamedNode\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph)\n    this.node = node\n  }\n\n  getUnitializedValues(property: PropertyShape): Array<Value> | null {\n    return this.graph.getUnitializedValues(this, property)\n  }\n\n  getAtomForProperty(pathString: string) {\n    return this.graph.getAtomForSubjectProperty(pathString, this.uri)\n  }\n\n  /*\n  // sets the flag to store to history or not according to the case,\n  // allows to store value modification not on top of history,\n  // \n  // ex: noHisto(false, -1)    // put empty subnodes in history before tmp:allValuesLoaded\n  //     noHisto(false, 1)     // allow parent node in history but default empty subnodes before tmp:allValuesLoaded\n  //     noHisto(false, false) // history back to normal => not exactly... must also use resetNoHisto()\n  //     noHisto(true)         // disable value storing when doing undo/redo\n  */\n  noHisto(force = false, start: boolean | number = true) {\n    const current = this.graph.getValues().noHisto\n    //debug(\"noHisto:\", force, start, this.qname, this, current)\n    if (!force && current === -1) return\n    // DONE: default values need to be added to history when entity is loading\n    if (start !== true) this.graph.getValues().noHisto = start\n    // TODO: update test to be true when adding empty val after having selected ExtEntity in a Facet (use getParentPath?)\n    else if (force || history[this.uri] && history[this.uri].some((h) => h[\"tmp:allValuesLoaded\"]))\n      this.graph.getValues().noHisto = true\n  }\n  resetNoHisto() {\n    this.graph.getValues().noHisto = false\n  }\n\n  static createEmpty(): Subject {\n    return new Subject(new rdf.NamedNode(\"tmp:uri\"), new EntityGraph(new rdf.Store(), \"tmp:uri\"))\n  }\n\n  isEmpty(): boolean {\n    return this.node.uri == \"tmp:uri\"\n  }\n}\n\nexport const noneSelected = new ExtRDFResourceWithLabel(\"tmp:none\", { en: \"–\" }, {}, { en: \"none provided\" })\nexport const emptyLiteral = new LiteralWithId(\"\")\n\nexport const sameLanguage = (lang1: string, lang2: string): boolean => {\n  // TODO: ignore suffixes\n  return lang1 == lang2\n}\n","import * as rdf from \"rdflib\"\nimport {\n  RDFResource,\n  RDFResourceWithLabel,\n  EntityGraph,\n  ExtRDFResourceWithLabel,\n  Subject,\n  rdfLitAsNumber,\n  LiteralWithId,\n  ObjectType,\n  Value,\n} from \"./types\"\nimport * as ns from \"./ns\"\nimport { Memoize } from \"typescript-memoize\"\nimport { nanoid, customAlphabet } from \"nanoid\"\n\nconst debug = require(\"debug\")(\"rde:rdf:shapes\")\n\nexport const rdfType = ns.RDF(\"type\") as rdf.NamedNode\nexport const shProperty = ns.SH(\"property\")\nexport const shGroup = ns.SH(\"group\")\nexport const shOrder = ns.SH(\"order\") as rdf.NamedNode\nexport const rdfsLabel = ns.RDFS(\"label\") as rdf.NamedNode\nexport const prefLabel = ns.SKOS(\"prefLabel\") as rdf.NamedNode\nexport const shName = ns.SH(\"name\") as rdf.NamedNode\nexport const shPath = ns.SH(\"path\") as rdf.NamedNode\nexport const dashEditor = ns.DASH(\"editor\") as rdf.NamedNode\nexport const shNode = ns.SH(\"node\") as rdf.NamedNode\nexport const dashListShape = ns.DASH(\"ListShape\") as rdf.NamedNode\nexport const dashEnumSelectEditor = ns.DASH(\"EnumSelectEditor\") as rdf.NamedNode\nexport const shMessage = ns.SH(\"message\") as rdf.NamedNode\nexport const rdeDisplayPriority = ns.RDE(\"displayPriority\") as rdf.NamedNode\nexport const shMinCount = ns.SH(\"minCount\") as rdf.NamedNode\nexport const shMinInclusive = ns.SH(\"minInclusive\") as rdf.NamedNode\nexport const shMinExclusive = ns.SH(\"minExclusive\") as rdf.NamedNode\nexport const shClass = ns.SH(\"class\") as rdf.NamedNode\nexport const shMaxCount = ns.SH(\"maxCount\") as rdf.NamedNode\nexport const shMaxInclusive = ns.SH(\"maxInclusive\") as rdf.NamedNode\nexport const shMaxExclusive = ns.SH(\"maxExclusive\") as rdf.NamedNode\nexport const shDatatype = ns.SH(\"datatype\") as rdf.NamedNode\nexport const dashSingleLine = ns.DASH(\"singleLine\") as rdf.NamedNode\nexport const shTargetClass = ns.SH(\"targetClass\") as rdf.NamedNode\nexport const shTargetObjectsOf = ns.SH(\"targetObjectsOf\") as rdf.NamedNode\nexport const shTargetSubjectsOf = ns.SH(\"targetSubjectsOf\") as rdf.NamedNode\nexport const rdePropertyShapeType = ns.RDE(\"propertyShapeType\") as rdf.NamedNode\nexport const rdeInternalShape = ns.RDE(\"InternalShape\") as rdf.NamedNode\nexport const rdeExternalShape = ns.RDE(\"ExternalShape\") as rdf.NamedNode\nexport const rdeIgnoreShape = ns.RDE(\"IgnoreShape\") as rdf.NamedNode\nexport const rdeClassIn = ns.RDE(\"classIn\") as rdf.NamedNode\nexport const shIn = ns.SH(\"in\") as rdf.NamedNode\nexport const shInversePath = ns.SH(\"inversePath\") as rdf.NamedNode\nexport const shUniqueLang = ns.SH(\"uniqueLang\") as rdf.NamedNode\nexport const rdeReadOnly = ns.RDE(\"readOnly\") as rdf.NamedNode\nexport const rdeIdentifierPrefix = ns.RDE(\"identifierPrefix\") as rdf.NamedNode\nexport const rdeAllowMarkDown = ns.RDE(\"allowMarkDown\") as rdf.NamedNode\nexport const shNamespace = ns.SH(\"namespace\") as rdf.NamedNode\nexport const rdeDefaultLanguage = ns.RDE(\"defaultLanguage\") as rdf.NamedNode\nexport const rdeDefaultValue = ns.RDE(\"defaultValue\") as rdf.NamedNode\nexport const shLanguageIn = ns.SH(\"languageIn\") as rdf.NamedNode\nexport const shPattern = ns.SH(\"pattern\") as rdf.NamedNode\nexport const rdeSortOnProperty = ns.RDE(\"sortOnProperty\") as rdf.NamedNode\nexport const rdeAllowPushToTopLevelLabel = ns.RDE(\"allowPushToTopLevelLabel\") as rdf.NamedNode\nexport const rdeIndependentIdentifiers = ns.RDE(\"independentIdentifiers\") as rdf.NamedNode\nexport const rdeSpecialPattern = ns.RDE(\"specialPattern\") as rdf.NamedNode\nexport const rdeConnectIDs = ns.RDE(\"connectIDs\") as rdf.NamedNode\nexport const rdeAllowBatchManagement = ns.RDE(\"allowBatchManagement\") as rdf.NamedNode\nexport const rdeCopyObjectsOfProperty = ns.RDE(\"copyObjectsOfProperty\") as rdf.NamedNode\nexport const rdeUniqueValueAmongSiblings = ns.RDE(\"uniqueValueAmongSiblings\") as rdf.NamedNode\nexport const rdfLangString = ns.RDF(\"langString\") as rdf.NamedNode\nexport const skosDefinition = ns.SKOS(\"definition\") as rdf.NamedNode\nexport const rdfsComment = ns.RDFS(\"comment\") as rdf.NamedNode\nexport const shDescription = ns.SH(\"description\") as rdf.NamedNode\n\nexport const defaultLabelProperties = [prefLabel, rdfsLabel, shName]\nexport const defaultDescriptionProperties = [skosDefinition, rdfsComment, shDescription]\n\nexport const sortByPropValue = (\n  nodelist: Array<rdf.NamedNode>,\n  property: rdf.NamedNode,\n  store: rdf.Store\n): Array<rdf.NamedNode> => {\n  const nodeUriToPropValue: Record<string,number> = {}\n  for (const node of nodelist) {\n    const ordern: rdf.Literal | null = store.any(node, property, null) as rdf.Literal\n    if (!ordern) nodeUriToPropValue[node.uri] = 0\n    const asnum = rdfLitAsNumber(ordern)\n    nodeUriToPropValue[node.uri] = asnum == null ? 0 : asnum\n  }\n  // TODO: untested\n  return [...nodelist].sort((a: rdf.NamedNode, b: rdf.NamedNode) => {\n    return nodeUriToPropValue[a.uri] - nodeUriToPropValue[b.uri]\n  })\n}\n\nexport class Path {\n  sparqlString: string\n\n  directPathNode: rdf.NamedNode | null = null\n  inversePathNode: rdf.NamedNode | null = null\n\n  constructor(node: rdf.NamedNode, graph: EntityGraph, listMode: boolean) {\n    const invpaths = graph.store.each(node, shInversePath, null) as Array<rdf.NamedNode>\n    if (invpaths.length > 1) {\n      throw \"too many inverse path in shacl path:\" + invpaths\n    }\n    if (invpaths.length == 1) {\n      const invpath = invpaths[0]\n      this.sparqlString = \"^\" + invpath.value\n      this.inversePathNode = invpath\n    } else {\n      // if this is a list we add \"[]\" at the end\n      if (listMode) {\n        this.sparqlString = node.value + \"[]\"\n      } else {\n        this.sparqlString = node.value\n      }\n      this.directPathNode = node as rdf.NamedNode\n    }\n  }\n}\n\nexport class PropertyShape extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  // different property for prefLabels, property shapes are using sh:name, otherwise use\n  // labels of the property\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    let res = {}\n    if (this.path && (this.path.directPathNode || this.path.inversePathNode)) {\n      const pathNode = this.path.directPathNode || this.path.inversePathNode\n      if (pathNode) {\n        const propInOntology = new RDFResourceWithLabel(pathNode, this.graph)\n        res = propInOntology.prefLabels\n      }\n    }\n    const resFromShape = this.getPropValueByLang(shName)\n    res = { ...res, ...resFromShape }\n    return res\n  }\n\n  // helpMessage directly from shape or from the property\n  @Memoize()\n  public get helpMessage(): Record<string, string> | null {\n    let res = this.description\n    if (res == null && this.path && (this.path.directPathNode || this.path.inversePathNode)) {\n      const pathNode = this.path.directPathNode || this.path.inversePathNode\n      if (pathNode) {\n        const propInOntology = new RDFResourceWithLabel(pathNode, this.graph)\n        res = propInOntology.description\n      }\n    }\n    return res\n  }\n\n  // error message?\n  @Memoize()\n  public get errorMessage(): Record<string, string> | null {\n    const res = this.getPropValueByLang(shMessage)\n    return res\n  }\n\n  @Memoize()\n  public get defaultValue(): rdf.Node | null {\n    return this.graph.store.any(this.node, rdeDefaultValue, null)\n  }\n\n  @Memoize()\n  public get singleLine(): boolean {\n    return this.getPropBooleanValue(dashSingleLine)\n  }\n\n  @Memoize()\n  public get connectIDs(): boolean {\n    return this.getPropBooleanValue(rdeConnectIDs, false)\n  }\n\n  @Memoize()\n  public get displayPriority(): number | null {\n    return this.getPropIntValue(rdeDisplayPriority)\n  }\n\n  @Memoize()\n  public get minCount(): number | null {\n    return this.getPropIntValue(shMinCount)\n  }\n\n  @Memoize()\n  public get maxCount(): number | null {\n    return this.getPropIntValue(shMaxCount)\n  }\n\n  @Memoize()\n  public get minInclusive(): number | null {\n    return this.getPropIntValue(shMinInclusive)\n  }\n\n  @Memoize()\n  public get maxInclusive(): number | null {\n    return this.getPropIntValue(shMaxInclusive)\n  }\n\n  @Memoize()\n  public get minExclusive(): number | null {\n    return this.getPropIntValue(shMinExclusive)\n  }\n\n  @Memoize()\n  public get maxExclusive(): number | null {\n    return this.getPropIntValue(shMaxExclusive)\n  }\n\n  @Memoize()\n  public get allowMarkDown(): boolean | null {\n    return this.getPropBooleanValue(rdeAllowMarkDown)\n  }\n\n  @Memoize()\n  public get allowBatchManagement(): boolean | null {\n    return this.getPropBooleanValue(rdeAllowBatchManagement)\n  }\n\n  @Memoize()\n  public get uniqueValueAmongSiblings(): boolean | null {\n    return this.getPropBooleanValue(rdeUniqueValueAmongSiblings)\n  }\n\n  @Memoize()\n  public get uniqueLang(): boolean | null {\n    return this.getPropBooleanValue(shUniqueLang)\n  }\n\n  @Memoize()\n  public get readOnly(): boolean {\n    return this.getPropBooleanValue(rdeReadOnly)\n  }\n\n  @Memoize()\n  public get defaultLanguage(): string | null {\n    return this.getPropStringValue(rdeDefaultLanguage)\n  }\n\n  @Memoize()\n  public get editorLname(): string | null {\n    const val = this.getPropResValue(dashEditor)\n    if (!val) return null\n    return ns.defaultPrefixMap.lnameFromUri(val.value)\n  }\n\n  @Memoize()\n  public get group(): rdf.NamedNode | null {\n    return this.getPropResValue(shGroup as rdf.NamedNode)\n  }\n\n  @Memoize()\n  public get copyObjectsOfProperty(): Array<rdf.NamedNode> | null {\n    const res: Array<PropertyShape> = []\n    return this.graph.store.each(this.node, rdeCopyObjectsOfProperty, null) as Array<rdf.NamedNode>\n  }\n\n  @Memoize()\n  public get datatype(): rdf.NamedNode | null {\n    const res = this.getPropResValue(shDatatype)\n    if (res === null && this.hasListAsObject) {\n      const propNodes: Array<rdf.NamedNode | rdf.BlankNode> = this.graph.store.each(\n        this.node,\n        shProperty,\n        null\n      ) as Array<rdf.NamedNode | rdf.BlankNode>\n      if (!propNodes) return null\n      const props: Array<RDFResource> = PropertyShape.resourcizeWithInit(propNodes, this.graph)\n      for (const p of props) {\n        return p.getPropResValue(shDatatype)\n      }\n    }\n    return res\n  }\n\n  @Memoize()\n  public get pattern(): string | null {\n    return this.getPropStringValue(shPattern)\n  }\n\n  @Memoize()\n  public get sortOnProperty(): rdf.NamedNode | null {\n    return this.getPropResValue(rdeSortOnProperty)\n  }\n\n  @Memoize()\n  public get allowPushToTopLevelLabel(): boolean {\n    return this.getPropBooleanValue(rdeAllowPushToTopLevelLabel)\n  }\n\n  @Memoize()\n  public get specialPattern(): rdf.NamedNode | null {\n    return this.getPropResValue(rdeSpecialPattern)\n  }\n\n  public static resourcizeWithInit(\n    nodes: Array<rdf.NamedNode | rdf.BlankNode>,\n    graph: EntityGraph\n  ): Array<RDFResourceWithLabel> {\n    const res: Array<RDFResourceWithLabel> = []\n    for (const node of nodes) if(node instanceof rdf.NamedNode) {\n      const r = new RDFResourceWithLabel(node, graph)\n      // just a way to intialize the value before the object gets frozen like a yogurt by Recoil\n      let justforinit = r.description\n      justforinit = r.prefLabels\n      res.push(r)\n    }\n    return res\n  }\n\n  @Memoize()\n  public get hasListAsObject(): boolean {\n    const res = this.graph.store.each(this.node, shNode, dashListShape)\n    if (res == null || res.length == 0) return false\n    return true\n  }\n\n  @Memoize()\n  public get in(): Array<RDFResourceWithLabel | LiteralWithId> | null {\n    if (this.hasListAsObject) {\n      // if no direct in, let's look at the sh:property objects (quite counter intuitive, but it follows the shacl examples)\n      const propNodes: Array<rdf.NamedNode | rdf.BlankNode> = this.graph.store.each(\n        this.node,\n        shProperty,\n        null\n      ) as Array<rdf.NamedNode | rdf.BlankNode>\n      if (!propNodes) return null\n      const props: Array<RDFResource> = PropertyShape.resourcizeWithInit(propNodes, this.graph)\n      for (const p of props) {\n        if (p.getPropResValue(shDatatype)) {\n          const nodes = p.getPropLitValuesFromList(shIn)\n          if (nodes) return EntityGraph.addIdToLitList(nodes)\n        } else {\n          const nodes = p.getPropResValuesFromList(shIn)\n          if (nodes) return PropertyShape.resourcizeWithInit(nodes, this.graph)\n        }\n      }\n    }\n    if (this.datatype) {\n      const nodes = this.getPropLitValuesFromList(shIn)\n      if (nodes) return EntityGraph.addIdToLitList(nodes)\n    } else {\n      // if no datatype, then it's res\n      const nodes = this.getPropResValuesFromList(shIn)\n      if (nodes) return PropertyShape.resourcizeWithInit(nodes, this.graph)\n    }\n    return null\n  }\n\n  @Memoize()\n  public get expectedObjectTypes(): Array<RDFResourceWithLabel> | null {\n    let nodes = this.getPropResValuesFromList(rdeClassIn)\n    if (!nodes) {\n      const cl = this.getPropResValues(shClass)\n      if (cl.length) nodes = cl\n    }\n    if (!nodes) return null\n    return PropertyShape.resourcizeWithInit(nodes, this.graph)\n  }\n\n  @Memoize()\n  public get path(): Path | null {\n    const pathNode = this.getPropResValue(shPath)\n    if (!pathNode) return null\n    return new Path(pathNode, this.graph, this.hasListAsObject)\n  }\n\n  @Memoize()\n  public get objectType(): ObjectType {\n    const propertyShapeType = this.getPropResValue(rdePropertyShapeType)\n    if (!propertyShapeType) {\n      const editor = this.getPropResValue(dashEditor)\n      if (!editor) return ObjectType.Literal\n      if (editor.value == dashEnumSelectEditor.value) {\n        if (this.datatype) return ObjectType.LitInList\n        return ObjectType.ResInList\n      }\n      return ObjectType.Literal\n    }\n    // for some reason direct comparison doesn't work...\n    if (propertyShapeType.value == rdeInternalShape.value) return ObjectType.Internal\n    else if (propertyShapeType.value == rdeExternalShape.value) return ObjectType.ResExt\n    else if (propertyShapeType.value == rdeIgnoreShape.value) return ObjectType.ResIgnore\n    throw \"can't handle property shape type \" + propertyShapeType.value + \" for property shape \" + this.qname\n  }\n\n  @Memoize()\n  public get targetShape(): NodeShape | null {\n    const path = this.path\n    if (!path) {\n      debug(\"can't find path for \" + this.uri)\n      return null\n    }\n    let val: rdf.NamedNode | null\n    if (path.directPathNode) {\n      val = this.graph.store.any(null, shTargetObjectsOf, path.directPathNode) as rdf.NamedNode | null\n      if (val == null) return null\n      return new NodeShape(val, this.graph)\n    }\n    if (path.inversePathNode) {\n      val = this.graph.store.any(null, shTargetSubjectsOf, path.inversePathNode) as rdf.NamedNode | null\n      if (val == null) return null\n      return new NodeShape(val, this.graph)\n    }\n    return null\n  }\n}\n\nexport class PropertyGroup extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  @Memoize()\n  public get properties(): Array<PropertyShape> {\n    const res: Array<PropertyShape> = []\n    let propsingroup: Array<rdf.NamedNode> = this.graph.store.each(null, shGroup, this.node) as Array<rdf.NamedNode>\n    propsingroup = sortByPropValue(propsingroup, shOrder, this.graph.store)\n    for (const prop of propsingroup) {\n      res.push(new PropertyShape(prop, this.graph))\n    }\n    return res\n  }\n\n  // different property for prefLabels, property shapes are using sh:name\n  @Memoize()\n  public get prefLabels(): Record<string, string> {\n    return this.getPropValueByLang(rdfsLabel)\n  }\n}\n\nexport class NodeShape extends RDFResourceWithLabel {\n  constructor(node: rdf.NamedNode, graph: EntityGraph) {\n    super(node, graph, rdfsLabel)\n  }\n\n  @Memoize()\n  public get targetClassPrefLabels(): Record<string, string> | null {\n    const targetClass: rdf.NamedNode | null = this.graph.store.any(this.node, shTargetClass, null) as rdf.NamedNode\n    if (targetClass == null) return null\n    const classInOntology = new RDFResourceWithLabel(targetClass, this.graph)\n    return classInOntology.prefLabels\n  }\n\n  @Memoize()\n  public get properties(): Array<PropertyShape> {\n    const res: Array<PropertyShape> = []\n    // get all ?shape sh:property/sh:group ?group\n    let props: Array<rdf.NamedNode> = this.graph.store.each(this.node, shProperty, null) as Array<rdf.NamedNode>\n    props = sortByPropValue(props, shOrder, this.graph.store)\n    for (const prop of props) {\n      res.push(new PropertyShape(prop, this.graph))\n    }\n    return res\n  }\n\n  @Memoize()\n  public get independentIdentifiers(): boolean {\n    return this.getPropBooleanValue(rdeIndependentIdentifiers, false)\n  }\n\n  @Memoize()\n  public get groups(): Array<PropertyGroup> {\n    const res: Array<PropertyGroup> = []\n    // get all ?shape sh:property/sh:group ?group\n    const props: Array<rdf.NamedNode> = this.graph.store.each(this.node, shProperty, null) as Array<rdf.NamedNode>\n    let grouplist: Array<rdf.NamedNode> = []\n    for (const prop of props) {\n      // we assume there's only one group per property, by construction of the shape (maybe it's wrong?)\n      const group: rdf.NamedNode | null = this.graph.store.any(prop, shGroup, null) as rdf.NamedNode\n      // for some reason grouplist.includes(group) doesn't work, I suppose new objects are created by rdflib\n      if (group && !grouplist.some((e) => e.value === group.value)) {\n        grouplist.push(group)\n      }\n    }\n    grouplist = sortByPropValue(grouplist, shOrder, this.graph.store)\n    for (const group of grouplist) {\n      res.push(new PropertyGroup(group, this.graph))\n    }\n    return res\n  }\n}\n\n// default implementation, can be overridden through config\nconst nanoidCustom = customAlphabet(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", 8) // eslint-disable-line no-magic-numbers\n\nexport const generateSubnode = async (subshape: NodeShape, parent: RDFResource): Promise<Subject> => {\n  const prefix = subshape.getPropStringValue(rdeIdentifierPrefix)\n  if (prefix == null) throw \"cannot find entity prefix for \" + subshape.qname\n  let namespace = subshape.getPropStringValue(shNamespace)\n  if (namespace == null) namespace = parent.namespace\n  let uri = namespace + prefix + parent.lname + nanoidCustom()\n  while (parent.graph.hasSubject(uri)) {\n    uri = namespace + prefix + nanoidCustom()\n  }\n  const res = new Subject(new rdf.NamedNode(uri), parent.graph)\n  return Promise.resolve(res)\n}\n","import React from \"react\"\nimport { Img } from \"react-image\"\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\"\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\"\nexport { default as ErrorIcon } from \"@material-ui/icons/Error\"\nexport { default as CloseIcon } from \"@material-ui/icons/Close\"\nexport { default as SearchIcon } from \"@material-ui/icons/FindReplace\"\nexport { default as LookupIcon } from \"@material-ui/icons/Search\"\nexport { default as LaunchIcon } from \"@material-ui/icons/Launch\"\nexport { default as InfoIcon } from \"@material-ui/icons/Info\"\nexport { default as InfoOutlinedIcon } from \"@material-ui/icons/InfoOutlined\"\nexport { default as SettingsIcon } from \"@material-ui/icons/Settings\"\nexport { default as VisibilityIcon } from \"@material-ui/icons/Visibility\"\nexport { default as VisibilityOffIcon } from \"@material-ui/icons/VisibilityOff\"\nexport { default as EditIcon } from \"@material-ui/icons/Edit\"\nexport { default as KeyboardIcon } from \"@material-ui/icons/Keyboard\"\nexport { default as HelpIcon } from \"@material-ui/icons/Help\"\nexport { default as ContentPasteIcon } from \"@material-ui/icons/AssignmentReturned\"\n\nexport const PersonIcon = (props) => <Img src=\"/icons/person.svg\" {...props} />\nexport const WorkIcon = (props) => <Img src=\"/icons/work.svg\" {...props} />\nexport const PlaceIcon = (props) => <Img src=\"/icons/place.svg\" {...props} />\nexport const VersionIcon = (props) => <Img src=\"/icons/instance.svg\" {...props} />\n\nexport const MDIcon = (props) => <Img src=\"/icons/Markdown-mark.svg\" {...props} />\n\nexport const AddIcon = AddCircleOutlineIcon\nexport const RemoveIcon = RemoveCircleOutlineIcon\n","const debug = require(\"debug\")(\"rde:rdf:lang\")\n\nexport type Lang = {\n  value: string\n  keyboard?: string[]\n}\n\n// default function, can be overridden in config\nexport const ValueByLangToStrPrefLang = (vbl: Record<string, string> | null, prefLang: string | Array<string>) => {\n  if (vbl == null) return \"\"\n  if (!Array.isArray(prefLang)) prefLang = [prefLang]\n  for (const pL of prefLang) {\n    if (pL in vbl) return vbl[pL]\n  }\n  const vals = Object.values(vbl)\n  if (vals[0]) return vals[0]\n  return \"\"\n}\n\n// a little memoization\nconst cache: Record<string, Lang[]> = {}\n\nexport const langsWithDefault = (defaultLanguage: string, langs: Array<Lang>): Array<Lang> => {\n  if (defaultLanguage in cache) return cache[defaultLanguage]\n  let res = langs.filter((l) => l.value === defaultLanguage)\n  if (!res?.length) {\n    debug(\"can't find defaultLanguage \", defaultLanguage, \" in languages\")\n    return langs\n  }\n  res = res.concat(langs.filter((l) => l.value !== defaultLanguage))\n  cache[defaultLanguage] = res\n  return res\n}\n","/* eslint-disable no-extra-parens */\nimport React, { useState, FC, useEffect, ChangeEvent } from \"react\"\nimport { Subject, RDFResourceWithLabel, RDFResource } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { FiPower as LogoutIcon } from \"react-icons/fi\"\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport i18n from \"i18next\"\nimport { atom, useRecoilState, useRecoilValue, selectorFamily } from \"recoil\"\nimport { FormHelperText, FormControl } from \"@material-ui/core\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport { history as undoHistory } from \"../helpers/observer\"\nimport { BrowserRouter as Router, Routes, Route, Link, useNavigate } from \"react-router-dom\"\nimport {\n  uiDisabledTabsState,\n  uiLangState,\n  uiLitLangState,\n  uiTabState,\n  userIdState,\n  savePopupState,\n} from \"../atoms/common\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { Entity, EditedEntityState, entitiesAtom, defaultEntityLabelAtom } from \"./EntitySelectorContainer\"\nimport * as rdf from \"rdflib\"\nimport { CloseIcon } from \"../routes/layout/icons\"\n\nconst debug = require(\"debug\")(\"rde:entity:selector\")\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  }\n}\n\nexport const EntityInEntitySelectorContainer: FC<{ entity: Entity, index: number, config: RDEConfig }> = ({ entity, index, config }) => {\n  const [uiLang] = useRecoilState(uiLangState)\n  const [uiLitLang] = useRecoilState(uiLitLangState)\n  const [labelValues] = useRecoilState(!entity.preloadedLabel ? entity.subjectLabelState : defaultEntityLabelAtom)\n  const [tab, setTab] = useRecoilState(uiTabState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [popupOn, setPopupOn] = useRecoilState(savePopupState)\n\n  const navigate = useNavigate()\n\n  const prefLabels = labelValues ? RDFResource.valuesByLang(labelValues) : null\n  const label = !entity.preloadedLabel ? lang.ValueByLangToStrPrefLang(prefLabels, uiLitLang) : entity.preloadedLabel\n  const icon = config.iconFromEntity(entity)\n  const shapeQname = entity.shapeQname\n    ? entity.shapeQname\n    : entities[index] && entities[index].shapeQname\n    ? entities[index].shapeQname\n    : null\n\n  //debug(\"sQn:\", icon) //, index, tab, shapeQname, entity.shapeRef?.qname, entity.shapeRef, entity.subjectQname)\n\n  const link =\n    icon && icon.startsWith(\"user\") ? \"/profile\" : \"/edit/\" + entity.subjectQname + (shapeQname ? \"/\" + shapeQname : \"\")\n\n  const allLoaded = entities.reduce((acc, e) => acc && e.state !== EditedEntityState.Loading, true)\n\n  const handleClick = (event: ChangeEvent<unknown>, newTab: number): void => {\n    if (newTab !== tab) {\n      setDisabled(true)\n      setTab(newTab)\n      setPopupOn(false)\n    }\n  }\n\n  const closeEntity = async (ev: React.MouseEvent) => {\n    ev.persist()\n    if (entity.state === EditedEntityState.NeedsSaving || entity.state === EditedEntityState.Error) {\n      const go = window.confirm(\"unsaved data will be lost\")\n      if (!go) return\n    }\n    // update user session\n    config.setUserMenuState(\n      entity.subjectQname,\n      shapeQname,\n      !entity.preloadedLabel ? (label && entity.subject?.lname ? entity.subject?.lname : label) : entity.preloadedLabel,\n      true,\n      null\n    )\n    // remove data in local storage\n    await config.setUserLocalEntity(entity.subjectQname, shapeQname, \"\", true, userId, entity.etag, false)\n    // remove history for entity\n    if (undoHistory) {\n      const uri = config.prefixMap.uriFromQname(entity.subjectQname)\n      if (undoHistory[uri]) delete undoHistory[uri]\n    }\n\n    // prevent click event\n    ev.preventDefault()\n    ev.stopPropagation()\n\n    const newList = [...entities.filter((e, i) => i !== index)]\n    setEntities(newList)\n\n    // if closing self, go back to home page\n    if (index === tab) {\n      setTab(-1)\n      navigate(\"/\")\n    } else if (tab <= newList.length && tab !== -1) {\n      // keep current tab open\n      const newIndex = newList.findIndex((e) => e.subjectQname === entities[index].subjectQname)\n      setTab(newIndex)\n    } else {\n      // case of closing from /new route\n      setTab(-1)\n    }\n    return false\n  }\n\n  //debug(\"entity?\", entity.alreadySaved, entity, tab, entities[tab], entities.map(e => e.subjectQname+\":\"+e.alreadySaved))\n\n  // update user session\n  config.setUserMenuState(\n    entity.subjectQname,\n    shapeQname,\n    !entity.preloadedLabel ? (entity.subject?.lname ? entity.subject?.lname : label) : entity.preloadedLabel,\n    false,\n    entity.etag\n  )\n\n  return (\n    <>\n      <Tab\n        key={entity.subjectQname}\n        {...a11yProps(index)}\n        className={index === tab ? \"Mui-selected\" : \"\"}\n        onClick={(e) => handleClick(e, index)}\n        {...(disabled ? { disabled: true } : {})}\n        label={\n          <>\n            <Link to={link}>\n              {icon && (\n                <img\n                  className=\"entity-type\"\n                  src={\n                    \"/icons/\" +\n                    icon.toLowerCase() +\n                    (index === tab ? \"_\" : \"\") +\n                    (icon && icon.startsWith(\"User\") ? \".png\" : \".svg\")\n                  }\n                />\n              )}\n              <span style={{ marginLeft: 30, marginRight: \"auto\", textAlign: \"left\" }}>\n                <span>{label && label != \"...\" ? label : entity.subject?.lname ? entity.subject.lname : label}</span>\n                <br />\n                <span className=\"RID\">{entity.subjectQname}</span>\n              </span>\n            </Link>\n            <span className={\"state state-\" + entity.state}></span>\n            <CloseIcon className=\"close-facet-btn\" onClick={closeEntity} />\n          </>\n        }\n      />\n    </>\n  )\n}\n\nexport default EntityInEntitySelectorContainer\n","/* eslint-disable no-extra-parens */\nimport React, { useState, FC, useEffect, ChangeEvent } from \"react\"\nimport {\n  Subject,\n  RDFResourceWithLabel,\n  RDFResource,\n  Value,\n  LiteralWithId,\n} from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { FiPower as LogoutIcon } from \"react-icons/fi\"\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport { CloseIcon } from \"../routes/layout/icons\"\nimport i18n from \"i18next\"\nimport { atom, useRecoilState, useRecoilValue, selectorFamily, RecoilState } from \"recoil\"\nimport { useAuth0 } from \"@auth0/auth0-react\"\nimport { FormHelperText, FormControl } from \"@material-ui/core\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport { history as undoHistory } from \"../helpers/observer\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { BrowserRouter as Router, Routes, Route, Link, useNavigate, useLocation } from \"react-router-dom\"\nimport {\n  uiLangState,\n  uiTabState,\n  uiEditState,\n  profileIdState,\n  uiGroupState,\n  uiDisabledTabsState,\n  userIdState,\n} from \"../atoms/common\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport * as lang from \"../helpers/lang\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { EntityInEntitySelectorContainer } from \"./EntityInEntitySelectorContainer\"\nimport { sessionLoadedState } from \"../atoms/common\"\n\nconst debug = require(\"debug\")(\"rde:entity:selector\")\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nexport enum EditedEntityState {\n  Error,\n  Saved,\n  NeedsSaving,\n  Loading,\n  NotLoaded,\n}\n\nexport type Entity = {\n  subjectQname: string\n  subject: Subject | null\n  shapeQname: string\n  state: EditedEntityState\n  subjectLabelState: RecoilState<Array<Value>>\n  preloadedLabel?: string\n  etag: string | null\n  loadedUnsavedFromLocalStorage: boolean // true when localStorage has unsaved changes\n}\n\nexport const entitiesAtom = atom<Array<Entity>>({\n  key: \"entities\",\n  default: [],\n})\n\nexport const defaultEntityLabelAtom = atom<Array<Value>>({\n  key: \"defaultEntityLabelAtom\",\n  default: [new LiteralWithId(\"...\", \"en\")], // TODO: use the i18n stuff\n})\n\nexport function EntitySelector(props: RDEProps) {\n  const config = props.config\n  const classes = useStyles()\n  const { user, isAuthenticated, isLoading, logout } = useAuth0()\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [sessionLoaded, setSessionLoaded] = useRecoilState(sessionLoadedState)\n  const [uiLang] = useRecoilState(uiLangState)\n  const [tab, setTab] = useRecoilState(uiTabState)\n  const handleChange = (event: ChangeEvent<unknown>, newTab: number): void => {\n    //debug(\"newTab:\", newTab)\n    setTab(newTab)\n  }\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  // restore user session on startup\n  useEffect(() => {\n    const session = config.getUserMenuState()\n    session.then((entities) => {\n      //debug(\"session:\", obj, props, props.location)\n      if (!entities) return\n      const newEntities: Entity[] = []\n      for (const k of Object.keys(entities)) {\n        newEntities.push({\n          subjectQname: k,\n          subject: null,\n          shapeQname: entities[k].shapeQname,\n          subjectLabelState: defaultEntityLabelAtom,\n          state: EditedEntityState.NotLoaded,\n          preloadedLabel: entities[k].preloadedLabel,\n          etag: entities[k].etag,\n          loadedUnsavedFromLocalStorage: true\n        })\n      }\n      if (newEntities.length) {\n        setEntities(newEntities)\n      }\n      if (!sessionLoaded) setSessionLoaded(true)\n      if (location?.pathname == \"/new\") setTab(newEntities.length)\n      if (location?.pathname.startsWith(\"/edit/\")) {\n        const id = location.pathname.split(\"/\")[2] // eslint-disable-line no-magic-numbers\n        let found = false\n        newEntities.map((e, i) => {\n          if (e.subjectQname === id) {\n            found = true\n            setTab(i)\n          }\n        })\n        // case of opening an entity not in session yet\n        if (!found) setTab(newEntities.length)\n      }\n    })\n  }, [])\n\n  const closeEntities = async (ev: React.MouseEvent) => {\n    let warn = false\n    for (const entity of entities) {\n      if (entity.state === EditedEntityState.NeedsSaving || entity.state === EditedEntityState.Error) {\n        warn = true\n        break\n      }\n    }\n    if (warn) {\n      const go = window.confirm(\"unsaved data will be lost\")\n      if (!go) return\n    }\n    for (const entity of entities) {\n      const shapeQname = entity.shapeQname\n\n      // update user session\n      await config.setUserMenuState(entity.subjectQname, shapeQname, \"\", true, null)\n\n      // remove data in local storage\n      await config.setUserLocalEntity(entity.subjectQname, shapeQname, \"\", true, userId, entity.etag, false)\n\n      // remove history for entity\n      if (undoHistory) {\n        const uri = config.prefixMap.uriFromQname(entity.subjectQname)\n        if (undoHistory[uri]) delete undoHistory[uri]\n      }\n    }\n\n    setEntities([])\n    setTab(-1)\n    navigate(\"/\")\n\n    return false\n  }\n\n  return (\n    <div\n      className=\"tabs-select\"\n      onClick={() => {\n        setEdit(\"\")\n        setGroupEd(\"\")\n      }}\n    >\n      <h3>Edition</h3>\n      <h4>\n        Open entities\n        <span title={i18n.t(\"general.close\")}>\n          <CloseIcon className=\"close-facet-btn\" onClick={closeEntities} />\n        </span>\n      </h4>\n      <Tabs value={tab === -1 ? false : tab} onChange={handleChange} aria-label=\"entities\">\n        {entities.map((entity: Entity, index) => {\n          return <EntityInEntitySelectorContainer entity={entity} index={index} key={index} config={config} />\n        })}\n        <Tab\n          key=\"new\"\n          {...a11yProps(entities.length)}\n          id=\"new-load\"\n          label={\n            <Link to=\"/new\" className=\"btn-rouge\" onClick={() => setDisabled(false)}>\n              NEW / LOAD\n            </Link>\n          }\n        />\n      </Tabs>\n    </div>\n  )\n}\n\nexport default EntitySelector\n","import { atom, atomFamily, selectorFamily, RecoilValue, RecoilState } from \"recoil\"\nimport { FC } from \"react\"\nimport _ from \"lodash\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { Value, Subject, LiteralWithId, errors, emptyLiteral } from \"../helpers/rdf/types\"\nimport { HistoryStatus } from \"../helpers/observer\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"../containers/EntitySelectorContainer\"\n\nconst debug = require(\"debug\")(\"rde:common\")\n\nexport const uiLangState = atom<Array<string>>({\n  key: \"uiLangState\",\n  default: [\"en\"],\n})\n\nexport const uiLitLangState = atom<Array<string>>({\n  key: \"uiLitLangState\",\n  default: [\"en\"],\n})\n\nexport const uiReadyState = atom<boolean>({\n  key: \"uiReadyState\",\n  default: false,\n})\n\nexport const uiTabState = atom<number>({\n  key: \"uiTabState\",\n  default: -1,\n})\n\nexport const uiRIDState = atom<string[]>({\n  key: \"uiRIDState\",\n  default: [],\n})\n\nexport const uiEditState = atom<string>({\n  key: \"uiEditState\",\n  default: \"\",\n})\n\nexport const uiGroupState = atom<string>({\n  key: \"uiGroupState\",\n  default: \"\",\n})\n\nexport const uiHistoryState = atom<Record<string, never> | FC<{ string: { string: Array<Value> } }>>({\n  key: \"uiHistoryState\",\n  default: {},\n})\n\nexport type undoState = {\n  enabled: boolean\n  subjectUri: string\n  propertyPath: string\n  parentPath: Array<string>\n}\n\nconst sameUndoSub = (undo1: undoState, undo2: undoState) => {\n  const ret =\n    undo1.enabled === undo2.enabled &&\n    undo1.subjectUri === undo2.subjectUri &&\n    undo1.propertyPath === undo2.propertyPath &&\n    undo1.parentPath.length === undo2.parentPath.length &&\n    undo1.parentPath.filter((u, i) => u === undo2.parentPath[i]).length === undo1.parentPath.length\n  //debug(\"same?\",ret,undo1,undo2)\n  return ret\n}\n\nexport const sameUndo = (undo1: { prev: undoState; next: undoState }, undo2: { prev: undoState; next: undoState }) => {\n  return (\n    !undo1 && !undo2 || undo1 && undo2 && sameUndoSub(undo1.prev, undo2.prev) && sameUndoSub(undo1.next, undo2.next)\n  )\n}\n\nexport const noUndo = { enabled: false, subjectUri: \"\", propertyPath: \"\", parentPath: [] }\n\nexport const noUndoRedo = { prev: noUndo, next: noUndo }\n\nexport const uiUndosState = atom<Record<string, Record<string, undoState>>>({\n  key: \"uiUndosState\",\n  default: {},\n})\n\nexport const uiNavState = atom<string>({\n  key: \"uiNavState\",\n  default: \"\",\n})\n\nexport const sessionLoadedState = atom<boolean>({\n  key: \"sessionLoadedState\",\n  default: false,\n})\n\nexport const profileIdState = atom<string>({\n  key: \"profileIdState\",\n  default: \"\",\n})\n\nexport const uiDisabledTabsState = atom<boolean>({\n  key: \"uiDisabledTabsState\",\n  default: false,\n})\n\nexport const userIdState = atom<string>({\n  key: \"userIdState\",\n  default: \"\",\n})\n\nexport const reloadProfileState = atom<boolean>({\n  key: \"reloadProfileState\",\n  default: true,\n})\n\nexport const reloadEntityState = atom<string>({\n  key: \"reloadEntityState\",\n  default: \"\",\n})\n\nexport const RIDprefixState = atom<string | null>({\n  key: \"RIDprefixState\",\n  default: null,\n})\n\nexport type orderedByPropSelectorArgs = {\n  atom: RecoilValue<Array<Value>>\n  propertyPath: string\n  order: string\n}\n\n// I don't quite understand why TS complains here, but it does, see\n// https://stackoverflow.com/questions/37006008/typescript-index-signature-is-missing-in-type\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const orderedByPropSelector = selectorFamily<any,orderedByPropSelectorArgs>({\n  key: \"orderedByPropSelector\",\n  get:\n    (args: orderedByPropSelectorArgs) =>\n    ({ get }) => {\n      let { atom, propertyPath, order } = args // eslint-disable-line prefer-const\n      if (propertyPath) {\n        if (!order) order = \"asc\"\n        const unorderedList = get(atom)\n        const orderedList = _.orderBy(\n          unorderedList.map((w:Value) => {\n            if(w instanceof Subject) {\n              const s:Subject = w\n              let k\n              const v: Value[] = get(s.getAtomForProperty(propertyPath))\n              if (Array.isArray(v) && v.length) k = Number(v[0].value)\n              else if (order === \"desc\") k = Number.MIN_SAFE_INTEGER\n              else k = Number.MAX_SAFE_INTEGER\n              return { s, k }\n            }\n            return { s:w, k:order === \"asc\" ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER } \n          }),\n          [\"k\"],\n          [order === \"asc\" ? \"asc\" : \"desc\"]\n        ).map((i: {s: Subject|Value, k: number}) => i.s)\n        //debug(\"sort:\", atom, propertyPath, orderedList)\n        return orderedList\n      }\n      return []\n    },\n})\n\nexport type personNamesLabelsSelectorArgs = {\n  atom: RecoilValue<Array<Subject>>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const personNamesLabelsSelector = selectorFamily<any,personNamesLabelsSelectorArgs>({\n  key: \"personNamesLabelsSelector\",\n  get:\n    (args: personNamesLabelsSelectorArgs) =>\n    ({ get }) => {\n      const { atom } = args\n      if (atom) {\n        const names = get(atom)\n        const namesLabelsAtoms = names.map((n: Subject) => n.getAtomForProperty(shapes.rdfsLabel.uri))\n        const namesLabels = namesLabelsAtoms.reduce(\n          (acc: Value[], nl: RecoilState<Value[]>) => [...acc, ...get(nl)],\n          []\n        )\n        //debug(\"values:\", atom, names, namesLabelsAtoms,  namesLabels)\n        return namesLabels\n      }\n      return []\n    },\n})\n\nexport const initListAtom = atom<Array<Value>>({ key: \"initListAtom\", default: [] })\n\nexport const initStringAtom = atom<string>({ key: \"initStringAtom\", default: \"\" })\n\nexport const initMapAtom = atom<Record<string, Value[]>>({ key: \"initMapAtom\", default: {} })\n\n// TODO: the as is not great...\nexport const initkvAtom = atom<{k: string, val: Value[]}>({ key: \"initkvAtom\", default: {} as {k: string, val: Value[]} })\n\nexport type canPushPrefLabelGroupType = {\n  props?: RecoilState<Value[]>[]\n  subprops?: Record<string, { atom: RecoilState<Subject[]>; allowPush: string[] }>\n}\n\nexport type canPushPrefLabelGroupsType = {\n canPushPrefLabelGroups: Record<string,canPushPrefLabelGroupType>,\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const possiblePrefLabelsSelector = selectorFamily<Record<string,Value[]>,canPushPrefLabelGroupsType>({\n  key: \"possiblePrefLabelsSelector\",\n  get:\n    (args: canPushPrefLabelGroupsType) =>\n    ({ get }) => {\n      //debug(\"push:\",canPushPrefLabelGroups)\n      const res: Record<string, Value[]> = {}\n      for (const g of Object.keys(args.canPushPrefLabelGroups)) {\n        const labels: Value[] = [],\n          atoms = []\n        const canPushPrefLabelGroup: canPushPrefLabelGroupType = args.canPushPrefLabelGroups[g]\n        if (canPushPrefLabelGroup.subprops) {\n          Object.keys(canPushPrefLabelGroup.subprops).map((k: string) => {\n            if (!canPushPrefLabelGroup.subprops || !canPushPrefLabelGroup.subprops[k].atom) return []\n            const names = get(canPushPrefLabelGroup.subprops[k].atom)\n            for (const n of names) {\n              for (const a of canPushPrefLabelGroup.subprops[k].allowPush) {\n                const vals = get(n.getAtomForProperty(a))\n                vals.map((v: Value) => labels.push(v))\n              }\n            }\n            if (canPushPrefLabelGroup.props) {\n              canPushPrefLabelGroup.props.map((a: RecoilValue<Value[]>) => {\n                const vals: Value[] = get(a)\n                vals.map((v: Value) => labels.push(v))\n              })\n            }\n            return labels\n          })\n        }\n        if (labels.length) res[g] = labels\n      }\n      return res\n    },\n})\n\nexport type orderedNewValSelectorType = {\n  atom: RecoilState<Subject[]> | null\n  propertyPath: string\n  order?: \"asc\" | \"desc\"\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const orderedNewValSelector = selectorFamily<string,orderedNewValSelectorType>({\n  key: \"orderedNewValSelector\",\n  get:\n    (args: orderedNewValSelectorType) =>\n    ({ get }) => {\n      let newVal = -1\n      if (args.atom) {\n        const order = args.order ? args.order : \"asc\"\n\n        //debug(\"nV\")\n        const parentList = get(args.atom)\n        parentList.map((s, i) => {\n          if (i < parentList.length - 1 - 1) return // try to speed things as list is sorted\n          const k = get(s.getAtomForProperty(args.propertyPath))\n          let kint = 0\n          if (Array.isArray(k) && k.length) kint = Number(k[0].value)\n          //debug(\"k:\",k)\n          if (newVal === -1 || order === \"asc\" && kint >= newVal || order === \"desc\" && kint <= newVal) {\n            if (order === \"asc\") newVal = kint + 1\n            else newVal = kint - 1\n          }\n        })\n        //debug(\"newVal:\", newVal) //, atom, propertyPath, parentList)\n      }\n      return newVal.toString()\n    },\n})\n\nexport type toCopySelectorsType = Array<{\n  property: string\n  atom: RecoilState<Value[]>\n}>\n\nexport type toCopySelectorType = {\n  list?: toCopySelectorsType\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const toCopySelector = selectorFamily<{k: string, val:Value[]}[],toCopySelectorType>({\n  key: \"toCopySelector\",\n  get:\n    (args: toCopySelectorType) =>\n    ({ get }) => {\n      const res: {k: string, val:Value[]}[] = []\n      args.list?.map(({ property, atom }) => {\n        const val = get(atom)\n        //debug(\"copy:\",property, val, atom)\n        res.push({ k: property, val: val })\n      })\n      return res\n    },\n  set:\n    (args: toCopySelectorType) =>\n    ({ get, set }, [{ k, val }]: {k: string, val: Value[]}[]) => {\n      //debug(\"set:\", list, k, val)\n      args.list?.map(({ property, atom }) => {\n        if (k == property) set(atom, [...get(atom).filter((lit) => lit.value), ...val])\n      })\n    },\n})\n\nexport const savePopupState = atom<boolean>({\n  key: \"savePopupState\",\n  default: false,\n})\n\nexport type ESfromRecoilSelectorType = {\n  property: shapes.PropertyShape,\n  subject: Subject,\n  entityQname: string,\n  undo: Record<string,undoState>,\n  hStatus: HistoryStatus,\n  status: EditedEntityState\n  id: string\n  removingFacet: boolean\n  forceRemove: boolean\n}\n\nexport const ESfromRecoilSelector = selectorFamily<any,any>({\n  key: \"ESfromRecoilSelector\",\n  get:\n    ({}) =>\n    ({ get }) => {\n      return true\n    },\n  set:\n    ({}) =>\n    ({ get, set }, args: ESfromRecoilSelectorType) => {\n\n      const entities = get(entitiesAtom)\n      const setEntities = (val: Entity[]) => set(entitiesAtom, val)\n\n      //debug(\"UES:\", status, entityQname, id, removingFacet, forceRemove, undo, hStatus)\n\n      const n = entities.findIndex((e) => e.subjectQname === args.entityQname)\n\n      if (n > -1) {\n        const ent: Entity = entities[n]\n        if (args.status === EditedEntityState.Error) {\n          //debug(\"error:\", id, status, ent.state, ent, n, property.qname, errors)\n\n          if (!errors[ent.subjectQname]) errors[ent.subjectQname] = {}\n          errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id] = true\n\n          if (ent.state != args.status) {\n            const newEntities = [...entities]\n            newEntities[n] = { ...entities[n], state: args.status }\n            setEntities(newEntities)\n          }\n          return\n        }\n        // DONE: update status to NeedsSaving for newly created entity and not for loaded entity\n        const status =\n          ent.etag && (!args.undo || args.undo.prev && !args.undo.prev.enabled) && !ent.loadedUnsavedFromLocalStorage\n            ? EditedEntityState.Saved\n            : EditedEntityState.NeedsSaving\n\n        const hasError =\n          errors[ent.subjectQname] && errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id]\n\n        //debug(\"no error:\", hasError, forceRemove, id, status, ent.state, ent, n, property.qname, errors)\n        if (ent.state != status || hasError && args.forceRemove) {\n          //debug(\"status:\", ent.state, status)\n          if (args.removingFacet) {\n            //debug(\"rf:\", id)\n            if (errors[ent.subjectQname]) {\n              const keys = Object.keys(errors[ent.subjectQname])\n              for (const k of keys) {\n                if (k.startsWith(args.id)) delete errors[ent.subjectQname][k]\n              }\n            }\n          } else if (hasError) {\n            delete errors[ent.subjectQname][args.subject.qname + \";\" + args.property.qname + \";\" + args.id]\n          }\n          if (!errors[ent.subjectQname] || !Object.keys(errors[ent.subjectQname]).length) {\n            const newEntities = [...entities]\n            newEntities[n] = { ...entities[n], state: status }\n            setEntities(newEntities)\n            //debug(\"newEnt:\",newEntities[n].state)\n          }\n        }\n      }\n    },\n})\n\nexport type isUniqueTestSelectorType = {\n  checkUnique: boolean\n  siblingsAtom: RecoilState<Subject[]>,\n  propertyPath: string\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const isUniqueTestSelector = selectorFamily<boolean,isUniqueTestSelectorType>({\n  key: \"isUniqueTestSelector\",\n  get:\n    (args: isUniqueTestSelectorType) =>\n    ({ get }) => {\n      if (!args.checkUnique) return true\n      //debug(\"iUvS:\",siblingsAtom, propertyPath)\n      const siblings = get(args.siblingsAtom),\n        vals:string[] = []\n      for (const s of siblings) {\n        const lit:Value[] = get(s.getAtomForProperty(args.propertyPath))\n        if (lit.length) {\n          if (vals.includes(lit[0].value)) {\n            //debug(\"non unique:\",propertyPath,vals,lit,siblings)\n            return false\n          }\n          vals.push(lit[0].value)\n        }\n      }\n      //debug(\"unique:\",propertyPath,vals,siblings)\n      return true\n    },\n})\n\n","import * as rdf from \"rdflib\"\nimport i18n from \"i18next\"\nimport { useState, useEffect, useContext } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport { RDFResource, RDFResourceWithLabel, EntityGraph, Subject } from \"./types\"\nimport { NodeShape, prefLabel } from \"./shapes\"\nimport {\n  profileIdState,\n  uiReadyState,\n  sessionLoadedState,\n  reloadEntityState,\n  uiDisabledTabsState,\n} from \"../../atoms/common\"\nimport RDEConfig from \"../rde_config\"\nimport { entitiesAtom, EditedEntityState, defaultEntityLabelAtom } from \"../../containers/EntitySelectorContainer\"\n\ninterface StoreWithEtag {\n  store: rdf.Store\n  etag: string | null\n}\n\nconst debug = require(\"debug\")(\"rde:rdf:io\")\n\nconst defaultFetchTtlHeaders = new Headers()\ndefaultFetchTtlHeaders.set(\"Accept\", \"text/turtle\")\n\nexport const fetchTtl = async (\n  url: string,\n  allow404 = false,\n  headers = defaultFetchTtlHeaders,\n  allowEmptyEtag = true\n): Promise<StoreWithEtag> => {\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(url, { headers: headers })\n\n    // eslint-disable-next-line no-magic-numbers\n    if (allow404 && response.status == 404) {\n      resolve({ store: rdf.graph(), etag: null })\n      return\n    }\n    // eslint-disable-next-line no-magic-numbers\n    if (response.status != 200) {\n      reject(new Error(\"cannot fetch \" + url))\n      return\n    }\n\n    const etag = response.headers.get(\"etag\")\n    if (!allowEmptyEtag && !etag) {\n      reject(new Error(\"no etag returned from \" + url))\n      return\n    }\n\n    const body = await response.text()\n    const store: rdf.Store = rdf.graph()\n    try {\n      rdf.parse(body, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n    } catch {\n      reject(new Error(\"cannot parse result of \" + url + \" in ttl\"))\n      return\n    }\n    resolve({ store, etag })\n  })\n}\n\nconst defaultPutTtlHeaders = new Headers()\ndefaultPutTtlHeaders.set(\"Content-Type\", \"text/turtle\")\n\nexport const putTtl = async (\n  url: string,\n  s: rdf.Store,\n  method = \"PUT\",\n  headers = defaultPutTtlHeaders,\n  allowEmptyEtag = true\n): Promise<string|null> => {\n  return new Promise(async (resolve, reject) => {\n    const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n    rdf.serialize(defaultRef, s, undefined, \"text/turtle\", async function (err, str) {\n      if (err) {\n        reject(err)\n        return\n      }\n      const response = await fetch(url, { headers, method, body: str })\n      const etag = response.headers.get(\"etag\")\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status == 403) {\n        reject(new Error(i18n.t(\"error.unauthorized\", { url })))\n        return\n      }\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status == 412) {\n        reject(new Error(i18n.t(\"error.modified\")))\n        return\n      }\n\n      // eslint-disable-next-line no-magic-numbers\n      if (response.status > 400) {\n        reject(new Error(\"error \" + response.status + \" when saving \" + url))\n        return\n      }\n\n      if (!etag && !allowEmptyEtag) {\n        reject(new Error(\"no etag returned from \" + url))\n        return\n      }\n\n      resolve(etag)\n    })\n  })\n}\n\nexport interface IFetchState {\n  status: string\n  error?: string\n}\n\n// maps of the shapes and entities that have been downloaded so far, with no gc\nexport const shapesMap: Record<string, NodeShape> = {}\n\nexport function ShapeFetcher(shapeQname: string, entityQname: string, config: RDEConfig) {\n  const [loadingState, setLoadingState] = useState<IFetchState>({ status: \"idle\", error: undefined })\n  const [shape, setShape] = useState<NodeShape>()\n  const [current, setCurrent] = useState(shapeQname)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  //debug(\"fetcher: shape \", shapeQname, current, shape)\n\n  useEffect(() => {\n    if (current != shapeQname) {\n      reset()\n    }\n  })\n\n  const reset = () => {\n    setCurrent(shapeQname)\n    setShape(undefined)\n    setLoadingState({ status: \"idle\", error: undefined })\n  }\n\n  useEffect(() => {\n    //debug(\"shM:\", shapeQname, shapesMap, current)\n    if (shape && shapeQname === current && loadingState.status === \"fetched\") {\n      return\n    }\n    if (shapeQname in shapesMap) {\n      setLoadingState({ status: \"fetched\", error: undefined })\n      setShape(shapesMap[shapeQname])\n      return\n    }\n    async function fetchResource(shapeQname: string) {\n      setLoadingState({ status: \"fetching\", error: undefined })\n      const shapeNode = rdf.sym(config.prefixMap.uriFromQname(shapeQname))\n      const loadShape = config.getShapesDocument(shapeNode)\n      try {\n        const shape: NodeShape = await loadShape\n        shapesMap[shapeQname] = shape\n        setShape(shape)\n\n        if (entityQname && entityQname !== \"tmp:uri\") {\n          const index = entities.findIndex((e) => e.subjectQname === entityQname)\n          if (index !== -1) {\n            const newEntities = [...entities]\n            newEntities[index] = {\n              ...newEntities[index],\n              shapeQname: shape.qname,\n            }\n            //debug(\"shape:\", shape, entityQname, index, newEntities, newEntities[index])\n            setEntities(newEntities)\n          }\n        }\n\n        setLoadingState({ status: \"fetched\", error: undefined })\n      } catch (e) {\n        debug(\"shape error:\", e)\n        setLoadingState({ status: \"error\", error: \"error fetching shape or ontology\" })\n      }\n    }\n    if (current === shapeQname) fetchResource(shapeQname)\n  }, [current, entities])\n\n  const retVal =\n    shapeQname === current && shape && shapeQname == shape.qname\n      ? { loadingState, shape, reset }\n      : { loadingState: { status: \"loading\", error: undefined }, shape: undefined, reset }\n\n  return retVal //{ loadingState, shape, reset }\n}\n\nexport function EntityFetcher(entityQname: string, shapeQname: string, config: RDEConfig, unmounting = { val: false }) {\n  const [entityLoadingState, setEntityLoadingState] = useState<IFetchState>({ status: \"idle\", error: undefined })\n  const [entity, setEntity] = useState<Subject>(Subject.createEmpty())\n  const [uiReady, setUiReady] = useRecoilState(uiReadyState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [sessionLoaded, setSessionLoaded] = useRecoilState(sessionLoadedState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [profileId, setProfileId] = useRecoilState(profileIdState)\n  const [current, setCurrent] = useState(entityQname)\n  const [reloadEntity, setReloadEntity] = useRecoilState(reloadEntityState)\n  const [disabled, setDisabled] = useRecoilState(uiDisabledTabsState)\n\n  //debug(\"reload?\", reloadEntity, unmounting)\n\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ef\")\n      unmounting.val = true\n    }\n  }, [])\n\n  useEffect(() => {\n    if (unmounting.val) return\n    if (current != entityQname) {\n      reset()\n    }\n  })\n\n  const reset = () => {\n    setCurrent(entityQname)\n    setEntity(Subject.createEmpty())\n    setEntityLoadingState({ status: \"idle\", error: undefined })\n  }\n\n  useEffect(() => {\n    if (unmounting.val) return\n    async function fetchResource(entityQname: string) {\n      setEntityLoadingState({ status: \"fetching\", error: undefined })\n\n      debug(\"fetching\", entity, shapeQname, entityQname, entities) //, isAuthenticated, idToken)\n\n      // TODO: UI \"save draft\" / \"publish\"\n\n      let loadRes, loadLabels, localRes, useLocal, notFound, etag, res, needsSaving\n      const localEntities = await config.getUserLocalEntities()\n      // 1 - check if entity has local edits (once shape is defined)\n      //debug(\"local?\", shapeQname, reloadEntity,entityQname, localEntities[entityQname])\n      if (reloadEntity !== entityQname && shapeQname && localEntities[entityQname] !== undefined) {\n        useLocal = window.confirm(\"found previous local edits for this resource, load them?\")\n        const store: rdf.Store = rdf.graph()\n        if (useLocal) {\n          try {\n            rdf.parse(localEntities[entityQname].ttl, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n            etag = localEntities[entityQname].etag\n            needsSaving = localEntities[entityQname].needsSaving\n            debug(\"nS:\", needsSaving)\n          } catch (e) {\n            debug(e)\n            debug(localEntities[entityQname])\n            window.alert(\"could not load local data, fetching remote version\")\n            useLocal = false\n            delete localEntities[entityQname]\n          }\n        } else {\n          rdf.parse(\"\", store, rdf.Store.defaultGraphURI, \"text/turtle\")\n        }\n        res = { store, etag }\n      }\n\n      // 2 - try to load data from server if not or if user wants to\n\n      const entityUri = config.prefixMap.uriFromQname(entityQname)\n      const entityNode = rdf.sym(entityUri)\n\n      try {\n        if (!useLocal) {\n          res = await config.getDocument(entityNode)\n          needsSaving = false\n        }\n      } catch (e) {\n        // 3 - case when entity is not on server and user does not want to use local edits that already exist\n        if (localRes) res = { store: localRes, etag }\n        else notFound = true\n      }\n\n      // load session before updating entities\n      let _entities = entities\n      if (!sessionLoaded) {\n        const obj = await config.getUserMenuState()\n        //debug(\"session:\", obj)\n        if (obj) {\n          _entities = []\n          for (const k of Object.keys(obj)) {\n            _entities.push({\n              subjectQname: k,\n              subject: null,\n              shapeQname: obj[k].shapeQname,\n              subjectLabelState: defaultEntityLabelAtom,\n              state: EditedEntityState.NotLoaded,\n              preloadedLabel: obj[k].preloadedLabel,\n              etag: obj[k].etag,\n              loadedUnsavedFromLocalStorage: true\n            })\n          }\n        }\n      }\n\n      try {\n        // TODO: redirection to /new instead of \"error fetching entity\"? create missing entity?\n        if (notFound) throw Error(\"not found\")\n\n        const resInfo = await config.getDocument(entityNode)\n        const subject = resInfo.subject\n        etag = resInfo.etag\n        if (!res) res = await loadRes\n\n        const actualQname = entityQname,\n          actualUri = entityUri\n        /* TODO: refactor\n        if (entityQname === \"tmp:user\") {\n          // TODO: in several steps with tests to avoid crash\n          const keys = Object.keys(entityStore.subjectIndex)\n          actualQname = qnameFromUri(keys[0].replace(/(^<)|(>$)/g, \"\"))\n          actualUri = uriFromQname(actualQname)\n          if (!profileId) setProfileId(actualQname)\n        }*/\n\n        // update state with loaded entity\n        let index = _entities.findIndex((e) => e.subjectQname === actualQname)\n        const newEntities = [..._entities]\n        if (index === -1) {\n          newEntities.push({\n            subjectQname: actualQname,\n            state: EditedEntityState.Loading,\n            shapeQname: shapeQname,\n            subject: null,\n            subjectLabelState: defaultEntityLabelAtom,\n            etag: etag,\n            loadedUnsavedFromLocalStorage: false\n          })\n          index = newEntities.length - 1\n        }\n        if (index >= 0 && newEntities[index] && !newEntities[index].subject) {\n          newEntities[index] = {\n            ...newEntities[index],\n            subject,\n            state: EditedEntityState.Saved,\n            subjectLabelState: subject.getAtomForProperty(prefLabel.uri),\n            preloadedLabel: \"\",\n            etag: etag,\n            ...etag ? { loadedUnsavedFromLocalStorage: needsSaving } : {},\n          }\n\n          // DONE: issue #2 fixed, fully using getEntities\n          setEntities(newEntities)\n\n          //debug(\"fetched\")\n        }\n        setEntityLoadingState({ status: \"fetched\", error: undefined })\n        setEntity(subject)\n        setUiReady(true)\n\n        if (reloadEntity) setReloadEntity(\"\")\n      } catch (e:any) {\n        debug(\"e:\", e.message, e)\n        setDisabled(false)\n        setEntityLoadingState({\n          status: \"error\",\n          error: e.message !== \"not found\" ? \"error fetching entity\" : \"not found\",\n        })\n        if (!entities.length && _entities.length) {\n          setEntities(_entities)\n        }\n      }\n      if (!sessionLoaded) setSessionLoaded(true)\n    }\n    const index = entities.findIndex(\n      (e) => e.subjectQname === entityQname || entityQname == \"tmp:user\" && e.subjectQname === profileId\n    )\n\n    if (\n      reloadEntity === entityQname && !entities[index].subject ||\n      current === entityQname && (index === -1 || entities[index] && !entities[index].subject)\n    ) {\n      if (entityQname != \"tmp:user\" || idToken) fetchResource(entityQname)\n    } else {\n      if (unmounting.val) return\n      else setEntityLoadingState({ status: \"fetched\", error: undefined })\n\n      const subj: Subject | null = entities[index] ? entities[index].subject : null\n\n      if (unmounting.val) return\n      else if (subj) setEntity(subj)\n\n      if (unmounting.val) return\n      else setUiReady(true)\n    }\n  }, [current, shapeQname, idToken, profileId, reloadEntity])\n\n  const retVal =\n    entityQname === current\n      ? { entityLoadingState, entity, reset }\n      : { entityLoadingState: { status: \"loading\", error: undefined }, entity: Subject.createEmpty(), reset }\n\n  return retVal\n}\n","import React, { useEffect, FC, ChangeEvent, useState, useRef, useLayoutEffect, useCallback, useMemo } from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as rdf from \"rdflib\"\nimport {\n  LiteralWithId,\n  Subject,\n  Value,\n  ObjectType,\n  RDFResource,\n  RDFResourceWithLabel,\n  ExtRDFResourceWithLabel,\n  errors,\n  noneSelected,\n} from \"../helpers/rdf/types\"\nimport { putTtl } from \"../helpers/rdf/io\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { generateSubnode, NodeShape, PropertyShape } from \"../helpers/rdf/shapes\"\nimport * as ns from \"../helpers/rdf/ns\"\n// import { generateSubnode, reserveLname } from \"../../../helpers/rdf/construct\"\nimport { useRecoilState, useSetRecoilState, useRecoilValue, atomFamily, atom, selectorFamily } from \"recoil\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { TextField, MenuItem, Tooltip, IconButton, InputLabel, Select } from \"@material-ui/core\"\nimport {\n  AddIcon,\n  RemoveIcon,\n  ErrorIcon,\n  CloseIcon,\n  VisibilityIcon,\n  VisibilityOffIcon,\n  MDIcon,\n  EditIcon,\n  KeyboardIcon,\n  HelpIcon,\n} from \"../routes/layout/icons\"\nimport i18n from \"i18next\"\nimport PropertyContainer from \"./PropertyContainer\"\nimport { ValueByLangToStrPrefLang, langsWithDefault } from \"../helpers/lang\"\nimport { history, HistoryStatus, getHistoryStatus } from \"../helpers/observer\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport {\n  reloadEntityState,\n  uiTabState,\n  uiLangState,\n  uiLitLangState,\n  uiEditState,\n  uiUndosState,\n  orderedByPropSelector,\n  orderedByPropSelectorArgs,\n  initListAtom,\n  RIDprefixState,\n  orderedNewValSelector,\n  ESfromRecoilSelector,\n  isUniqueTestSelector,\n  orderedNewValSelectorType,\n  isUniqueTestSelectorType,\n  initStringAtom\n} from \"../atoms/common\"\nimport { entitiesAtom, Entity, EditedEntityState } from \"./EntitySelectorContainer\"\n\nimport MDEditor, { commands } from \"@uiw/react-md-editor\"\n\nimport { useAuth0 } from \"@auth0/auth0-react\"\n\nconst debug = require(\"debug\")(\"rde:entity:container:ValueList\")\n\nfunction replaceItemAtIndex(arr:Value[], index:number, newValue: Value): Value[] {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\n}\n\nfunction removeItemAtIndex(arr:Value[], index:number): Value[] {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)]\n}\n\nexport const MinimalAddButton: FC<{\n  add: (e:React.MouseEvent<HTMLButtonElement>, n:number) => Promise<void>\n  className: string\n  disable?: boolean\n}> = ({ add, className, disable }) => {\n  return (\n    <div\n      className={\n        \"minimalAdd \" + \"disable_\" + disable + (className !== undefined ? className : \" text-right\")\n      } /*style={{ width: \"100%\" }}*/\n    >\n      <button className=\"btn btn-link ml-2 px-0\" \n        onClick={(ev:React.MouseEvent<HTMLButtonElement>) => add(ev,1)} {...(disable ? { disabled: true } : {})}>\n        <AddIcon />\n      </button>\n    </div>\n  )\n}\n\nexport const BlockAddButton: FC<{ add: (e:React.MouseEvent<HTMLButtonElement>, n:number) => void;  label?: string; count: number }> = ({\n  add,\n  label,\n  count = 1,\n}) => {\n  const [n, setN] = useState(1)\n  const [disable, setDisable] = useState(false)\n\n  /* // TODO: disable batch operations in demo mode \n  const [demo, setDemo] = useRecoilState(demoAtom)\n\n  // #36 disable batch add in demo mode\n  useEffect(() => {\n    if (count > 1 && demo && !disable) setDisable(true)\n  })\n  */\n\n  return (\n    <div\n      className=\"blockAdd text-center pb-1 mt-3\"\n      style={{ width: \"100%\", ...count > 1 ? { display: \"flex\" } : {} }}\n    >\n      <button\n        className=\"btn btn-sm btn-block btn-outline-primary px-0\"\n        style={{\n          boxShadow: \"none\",\n          pointerEvents: disable ? \"none\" : \"auto\",\n          ...disable ? { opacity: 0.5, pointerEvents: \"none\" } : {},\n        }}\n        onClick={(e:React.MouseEvent<HTMLButtonElement>) => add(e, n)}\n        //disabled={disable}\n      >\n        <>\n          {i18n.t(\"general.add_another\", { val: label, count })}\n          &nbsp;\n          <AddIcon />\n        </>\n      </button>\n      {count > 1 && (\n        <TextField\n          label={<>{i18n.t(\"general.add_nb\", { val: label })}</>}\n          style={{ width: 200 }}\n          value={n}\n          className=\"ml-2\"\n          type=\"number\"\n          InputLabelProps={{ shrink: true }}\n          onChange={(e) => setN(Number(e.target.value))}\n          InputProps={{ inputProps: { min: 1, max: 500 } }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport const OtherButton: FC<{ onClick: React.MouseEventHandler<HTMLButtonElement>; label: string }> = ({\n  onClick,\n  label,\n}) => {\n  return (\n    <div className=\"blockAdd text-center pb-1\" style={{ margin: \"0 15px\" }}>\n      <button\n        className=\"btn btn-sm btn-block btn-outline-primary mb-2 px-0 py-2\"\n        style={{ boxShadow: \"none\" }}\n        onClick={onClick}\n      >\n        {label}\n      </button>\n    </div>\n  )\n}\n\nconst generateDefault = async (\n  property: PropertyShape,\n  parent: Subject,\n  RIDprefix: string | null,\n  idToken: string | null,\n  val = \"\",\n  config: RDEConfig\n): Promise<Value | Value[]> => {\n  //debug(\"genD:\", property, parent)\n  switch (property.objectType) {\n    case ObjectType.ResExt:\n      // TODO might be a better way but \"\" isn't authorized\n      return new ExtRDFResourceWithLabel(\"tmp:uri\", {}, {}, config)\n      break\n    case ObjectType.Internal:\n      if (property.targetShape == null) throw \"no target shape for \" + property.uri\n      return generateSubnode(property.targetShape, parent) //, RIDprefix, idToken) //, n)\n      break\n    case ObjectType.ResInList:\n      // DONE: fix save (default value for select like bdo:material)\n      if (property.defaultValue) return new ExtRDFResourceWithLabel(property.defaultValue.value, {}, {}, config)\n      // if a select property is not required, we don't select anything by default\n      if (!property.minCount) return noneSelected\n      // else we select the first one automatically\n      const propIn: Array<Value> | null = property.in\n      if (!propIn) throw \"can't find a list for \" + property.uri\n      return propIn[0]\n      break\n    case ObjectType.LitInList:\n      const defaultValueLiL = property.defaultValue as rdf.Literal | null\n      if (defaultValueLiL !== null)\n        return new LiteralWithId(defaultValueLiL.value, defaultValueLiL.language, defaultValueLiL.datatype)\n      if (!property.minCount) {\n        const datatype = property.datatype?.value\n        if (datatype === ns.RDF(\"langString\").value) {\n          // TODO: this should be a user preference, not urgent\n          return new LiteralWithId(\"\", property?.defaultLanguage ? property.defaultLanguage : \"bo-x-ewts\")\n        } else {\n          return new LiteralWithId(\"\", null, property.datatype ? property.datatype : undefined)\n        }\n      }\n      const propInLit: Array<Value> | null = property.in\n      if (!propInLit) throw \"can't find a list for \" + property.uri\n      return propInLit[0]\n      break\n    case ObjectType.Literal:\n    default:\n      const defaultValue = property.defaultValue as rdf.Literal | null\n      //debug(\"default:\", property.qname, defaultValue)\n      if (defaultValue !== null)\n        return new LiteralWithId(defaultValue.value, defaultValue.language, defaultValue.datatype)\n      const datatype = property.datatype?.value\n      if (datatype === ns.RDF(\"langString\").value) {\n        // TODO: this should be a user preference, not urgent\n        return new LiteralWithId(\"\", property?.defaultLanguage ? property.defaultLanguage : \"bo-x-ewts\")\n      } else if (datatype === ns.XSD(\"integer\").value) {\n        return new LiteralWithId(val, null, property.datatype ? property.datatype : undefined)\n      } else {\n        return new LiteralWithId(\"\", null, property.datatype ? property.datatype : undefined)\n      }\n      break\n  }\n}\n\n/**\n * List component\n */\n\nconst ValueList: FC<{\n  subject: Subject\n  property: PropertyShape\n  embedded?: boolean\n  force?: boolean\n  editable: boolean\n  owner?: Subject\n  topEntity?: Subject\n  shape: NodeShape\n  siblingsPath?: string\n  setCssClass?: (s:string, add: boolean) => void\n  config: RDEConfig\n}> = ({ subject, property, embedded, force, editable, owner, topEntity, shape, siblingsPath, setCssClass, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [unsortedList, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang] = useRecoilState(uiLangState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLang)\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const sortOnPath = property?.sortOnProperty?.value\n  const orderedList:Value[] = useRecoilValue(\n    orderedByPropSelector({\n      atom: subject.getAtomForProperty(property.path.sparqlString),\n      propertyPath: sortOnPath || \"\",\n      //order: \"desc\" // default is \"asc\"\n    } as orderedByPropSelectorArgs)\n  )\n  let list:Value[] = unsortedList\n  if (orderedList.length) list = orderedList\n\n  const withOrder = shape.properties.filter((p) => p.sortOnProperty?.value === property.path?.sparqlString)\n  let newVal:string|number = useRecoilValue(\n    orderedNewValSelector({\n      atom: withOrder.length && withOrder[0].path\n        ? (topEntity ? topEntity : subject).getAtomForProperty(withOrder[0].path.sparqlString)\n        : null,\n      propertyPath: property.path.sparqlString,\n      //order: \"desc\" // default is \"asc\"\n    } as orderedNewValSelectorType)\n  )\n  if (newVal != \"\") {\n    const newValNum = Number(newVal)\n    if (property.minInclusive && newValNum < property.minInclusive) newVal = property.minInclusive.toString()\n    if (property.maxInclusive && newValNum > property.maxInclusive) newVal = property.maxInclusive.toString()\n  }\n\n  const [getESfromRecoil, setESfromRecoil] = useRecoilState(ESfromRecoilSelector({}))\n  const updateEntityState = (status: EditedEntityState, id: string, removingFacet = false, forceRemove = false) => {\n    if (id === undefined) throw new Error(\"id undefined\")\n    const entityQname = topEntity ? topEntity.qname : subject.qname\n    const undo = undos[ns.defaultPrefixMap.uriFromQname(entityQname)]\n    const hStatus = getHistoryStatus(ns.defaultPrefixMap.uriFromQname(entityQname))\n    //debug(\"undo:\", undo, hStatus, history, entityQname, undos)\n\n    setESfromRecoil({ property, subject, entityQname, undo, hStatus, status, id, removingFacet, forceRemove })\n  }\n\n  const alreadyHasEmptyValue: () => boolean = (): boolean => {\n    for (const val of list) {\n      if (val instanceof LiteralWithId && val.value === \"\") return true\n      if (val instanceof RDFResourceWithLabel && val.node.value === \"tmp:none\") return true\n    }\n    return false\n  }\n\n  // TODO: handle the creation of a new value in a more sophisticated way (with the iframe and such)\n  const canAdd =\n    !editable ||\n    alreadyHasEmptyValue() ||\n    property.readOnly && property.readOnly === true ||\n    property.displayPriority && property.displayPriority > 1\n      ? false\n      : property.objectType != ObjectType.ResExt && property.maxCount\n      ? list.length < property.maxCount\n      : true\n\n  const canDel = (!property.minCount || property.minCount < list.length) && !property.readOnly && editable\n\n  // DONE save multiple external resource for property\n  const onChange: (value: RDFResourceWithLabel, idx: number, removeFirst: boolean | undefined) => void = (\n    value: RDFResourceWithLabel,\n    idx: number,\n    removeFirst: boolean | undefined\n  ) => {\n    const newList = replaceItemAtIndex(list, idx, value)\n    //if(removeFirst) newList.shift()\n    setList(newList)\n  }\n\n  // DONE prevent adding same resource twice\n  const exists = useCallback(\n    (uri: string) => {\n      //debug(\"set exists\",list)\n      //debug(\"exists?\", uri, list)\n      for (const val of list) {\n        if (val instanceof RDFResourceWithLabel && (val.qname === uri || val.uri === uri)) {\n          //debug(\"found \" + uri + \" in \", list)\n          return true\n        }\n      }\n      //debug(\"not found \" + uri + \" in \", list)\n      return false\n    },\n    [list]\n  )\n\n  let firstValueIsEmptyField = true\n\n  useEffect(() => {\n    //debug(\"vL/effect:\",subject.qname,property.qname,list)\n\n    // TODO: check maxCount\n    if (list.length) {\n      const first = list[0]\n      if (first instanceof ExtRDFResourceWithLabel && first.uri !== \"tmp:uri\" && first.uri !== \"tmp:none\")\n        firstValueIsEmptyField = false\n    }\n\n    // reinitializing the property values atom if it hasn't been initialized yet\n    const vals: Array<Value> | null = subject.getUnitializedValues(property)\n    if (vals && vals.length) {\n      if (property.minCount && vals.length < property.minCount) {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:1a\",subject,owner,topEntity)\n          setList(vals.concat(Array.isArray(res)?res:[res]))\n        }\n        setListAsync()\n      } else {\n        //debug(\"setNoH:1b\",subject,owner,topEntity)\n        setList(vals)\n      }\n    } else if (\n      property.objectType != ObjectType.ResInList &&\n      property.objectType != ObjectType.LitInList &&\n      property.objectType != ObjectType.Internal &&\n      (!property.displayPriority ||\n        property.displayPriority === 0 ||\n        property.displayPriority === 1 && (list.length || force)) &&\n      (property.minCount && list.length < property.minCount || !list.length || !firstValueIsEmptyField) &&\n      (!property.maxCount || property.maxCount >= list.length)\n    ) {\n      if (!firstValueIsEmptyField) {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(),config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:2\",subject,owner,topEntity)\n          setList((oldList) => (Array.isArray(res)?res:[res]).concat(oldList))\n        }\n        setListAsync()\n      } else {\n        const setListAsync = async () => {\n          const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(),config)\n          // dont store empty value autocreation\n          if (topEntity) topEntity.noHisto()\n          else if (owner) owner.noHisto()\n          else subject.noHisto()\n          //debug(\"setNoH:2\",subject,owner,topEntity)\n          setList((oldList) => oldList.concat(Array.isArray(res)?res:[res]))\n        }\n        setListAsync()\n      }\n    } else if (property.objectType == ObjectType.Internal && property.minCount && list.length < property.minCount) {\n      const setListAsync = async () => {\n        const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n        // dont store empty value autocreation\n        if (topEntity) topEntity.noHisto()\n        else if (owner) owner.noHisto()\n        else subject.noHisto()\n        //debug(\"setNoH:3\",subject,owner,topEntity)\n        setList((oldList) => (Array.isArray(res)?res:[res]).concat(oldList))\n      }\n      setListAsync()\n    } else if (\n      property.objectType != ObjectType.ResInList &&\n      property.objectType != ObjectType.LitInList &&\n      property.displayPriority &&\n      property.displayPriority === 1 &&\n      list.length === 1 &&\n      !force\n    ) {\n      //debug(\"setNoH:4\",subject,owner,topEntity)\n      // DONE: comment: what does it do?\n      // guess: it removes the first tmp:uri first object of hidden properties\n      // answer: indeed it removes empty value when displayPriority is 1\n      // but let's keep value then hide it in CSS when needed (fixes #16)\n      // if (firstValueIsEmptyField) setList([])\n    } else if (\n      !list.length &&\n      (property.objectType == ObjectType.ResInList || property.objectType == ObjectType.LitInList)\n    ) {\n      // this makes sure that there's at least one value for select forms, and the value is either\n      // the first one (when it's mandatory that there's a value), or tmp:none\n      const setListAsync = async () => {\n        const res = await generateDefault(property, subject, RIDprefix, idToken, newVal.toString(), config)\n        if (topEntity) topEntity.noHisto()\n        else if (owner) owner.noHisto()\n        else subject.noHisto()\n        //debug(\"setNoH:5\",subject,owner,topEntity)\n        setList(Array.isArray(res)?res:[res])\n      }\n      setListAsync()\n    }\n    //debug(\"end/vL/effect\")\n  }, [subject, list, force])\n\n  let addBtn = property.objectType === ObjectType.Internal\n\n  //debug(\"prop:\", property.qname, subject.qname, list) //property, force)\n\n  const isEmptyValue = (val: Value): boolean => {\n    if (val instanceof RDFResourceWithLabel) {\n      return val.uri === \"tmp:uri\" || val.uri === \"tmp:none\"\n    } else if (val instanceof LiteralWithId) {\n      // remove language part to fix hiding secondary properties in iinstance/volumes\n      return val.value === \"\" // && !val.language\n      //|| property.defaultValue === \"bds:ImagegroupShape-volumePagesTbrcIntro\" && val.value === \"0\" // no need\n    }\n    return false\n  }\n  const isErrorValue = (val: Value): boolean => {\n    // TODO: to be continue (or not? conflicts with hiding secondary properties, removing)\n    //       + not sure it should be hidden (in case of empty Person Name) but Names group should not be closed as well\n    //if (val instanceof LiteralWithId && property?.datatype?.value === ns.RDF(\"langString\").value) return !val.value\n\n    if (val instanceof LiteralWithId && errors[topEntity ? topEntity.qname : subject.qname]) {\n      const errorKeys = Object.keys(errors[topEntity ? topEntity.qname : subject.qname])\n      return errorKeys.some((k) => k.endsWith(\";\" + val.id))\n    }\n\n    return false\n  }\n\n  const hasNonEmptyValue = list.some((v) => !isEmptyValue(v) || isErrorValue(v))\n\n  useEffect(() => {\n    if (setCssClass) {\n      if (!hasNonEmptyValue) setCssClass(\"unset\", true)\n      else setCssClass(\"unset\", false)\n    }\n  }, [hasNonEmptyValue])\n\n  /* eslint-disable no-magic-numbers */\n  const showLabel =\n    !property.displayPriority ||\n    property.displayPriority === 0 ||\n    property.displayPriority === 1 && (force || list.length > 1 || hasNonEmptyValue) ||\n    property.displayPriority === 2 && (list.length >= 1 || hasNonEmptyValue)\n\n  // scroll back to top when loosing focus\n  const scrollElem = useRef<null | HTMLDivElement>(null)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  useEffect(() => {\n    if (property?.group?.value !== edit && scrollElem?.current) {\n      scrollElem.current.scrollTo({ top: 0, left: 0, behavior: \"smooth\" })\n    }\n  }, [edit])\n\n  const hasEmptyExtEntityAsFirst =\n    list.length > 0 &&\n    list[0] instanceof RDFResourceWithLabel &&\n    property.objectType == ObjectType.ResExt &&\n    list[0].uri === \"tmp:uri\"\n\n  const titleCase = (s: string) => {\n    if (!s) return s\n    return s[0].toUpperCase() + s.substring(1)\n  }\n\n  const canPush = property.allowPushToTopLevelLabel\n\n  const isUniqueValueAmongSiblings = useRecoilValue(\n    isUniqueTestSelector({\n      checkUnique: property.uniqueValueAmongSiblings,\n      siblingsAtom: siblingsPath ? (owner ? owner : subject).getAtomForProperty(siblingsPath) : initListAtom,\n      propertyPath: property.path.sparqlString,\n    } as isUniqueTestSelectorType)\n  )\n\n  // see https://stackoverflow.com/questions/55026139/whats-the-difference-between-usecallback-with-an-empty-array-as-inputs-and-u\n  const renderListElem = useMemo(() => (val: Value, i: number, nbvalues: number) => {\n    //debug(\"render:\", property.qname, isUniqueValueAmongSiblings, property, val, i)\n\n    if (\n      val instanceof RDFResourceWithLabel ||\n      property.objectType == ObjectType.ResInList ||\n      property.objectType == ObjectType.LitInList\n    ) {\n      if (property.objectType == ObjectType.ResExt)\n        return (\n          <ExtEntityComponent\n            key={val.id + \":\" + i}\n            subject={subject}\n            property={property}\n            extRes={val as ExtRDFResourceWithLabel}\n            canDel={canDel && (i > 0 || !(val instanceof LiteralWithId) && val.uri !== \"tmp:uri\")}\n            onChange={onChange}\n            idx={i}\n            exists={exists}\n            editable={editable}\n            {...(owner ? { owner } : {})}\n            title={titleCase(propLabel)}\n            updateEntityState={updateEntityState}\n            shape={shape}\n            config={config}\n          />\n        )\n      else if(val instanceof LiteralWithId || val instanceof RDFResourceWithLabel) {\n        addBtn = false\n        // eslint-disable-next-line no-extra-parens\n        const canSelectNone = (i == 0 && !property.minCount) || (i > 0 && i == nbvalues - 1)\n        return (\n          <SelectComponent\n            key={\"select_\" + val.id + \"_\" + i}\n            canSelectNone={canSelectNone}\n            subject={subject}\n            property={property}\n            res={val}\n            selectIdx={i}\n            canDel={canDel && val != noneSelected}\n            editable={editable}\n            create={\n              canAdd\n              ?  <Create subject={subject} property={property} embedded={embedded} newVal={Number(newVal)} shape={shape} config={config}/>\n              : undefined\n            }\n            updateEntityState={updateEntityState}\n          />\n        )\n      }\n    } else if (val instanceof Subject) {\n      addBtn = true\n      return (\n        <FacetComponent\n          key={val.id}\n          subject={subject}\n          property={property}\n          subNode={val}\n          canDel={canDel && editable}\n          {...(force ? { force } : {})}\n          editable={editable}\n          {...(topEntity ? { topEntity } : { topEntity: subject })}\n          updateEntityState={updateEntityState}\n          shape={shape}\n          config={config}\n        />\n      )\n    } else if (val instanceof LiteralWithId) {\n      addBtn = false\n      const isUniqueLang = list.filter((l) => l instanceof LiteralWithId && l.language === val.language).length === 1\n\n      return (\n        <LiteralComponent\n          key={val.id}\n          subject={subject}\n          property={property}\n          lit={val}\n          {...{ canDel, isUniqueLang, isUniqueValueAmongSiblings }}\n          create={\n            <Create\n              disable={!canAdd || !(val && val.value !== \"\")}\n              subject={subject}\n              property={property}\n              embedded={embedded}\n              newVal={Number(newVal)}\n              shape={shape}\n              config={config}\n            />\n          }\n          editable={editable}\n          topEntity={topEntity}\n          updateEntityState={updateEntityState}\n          config={config}\n        />\n      )\n    }\n  }, undefined)\n\n  return (\n    <React.Fragment>\n      <div\n        className={\n          \"ValueList \" +\n          (property.maxCount && property.maxCount < list.length ? \"maxCount\" : \"\") +\n          (hasNonEmptyValue ? \"\" : \"empty\") +\n          (property.objectType === ObjectType.ResExt ? \" ResExt\" : \"\") +\n          (embedded ? \"\" : \" main\") +\n          (canPush ? \" canPush\" : \"\")\n        }\n        data-priority={property.displayPriority ? property.displayPriority : 0}\n        role=\"main\"\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          ...list.length > 1 && firstValueIsEmptyField && property.path.sparqlString !== ns.SKOS(\"prefLabel\").value\n            ? {\n                /*borderBottom: \"2px solid #eee\", paddingBottom: \"16px\"*/\n              }\n            : {},\n        }}\n      >\n        {showLabel && (!property.in || property.in.length > 1) && (\n          <label\n            className={\"propLabel\"}\n            data-prop={property.qname}\n            data-type={property.objectType}\n            data-priority={property.displayPriority}\n          >\n            {titleCase(propLabel)}\n            {helpMessage && property.objectType === ObjectType.ResExt && (\n              <Tooltip title={helpMessage}>\n                <HelpIcon className=\"help label\" />\n              </Tooltip>\n            )}\n          </label>\n        )}\n        {hasEmptyExtEntityAsFirst && <div style={{ width: \"100%\" }}>{renderListElem(list[0], 0, list.length)}</div>}\n        <div\n          ref={scrollElem}\n          className={!embedded && property.objectType !== ObjectType.Internal ? \"overFauto\" : \"\"}\n          style={{\n            width: \"100%\",\n            //...!embedded && property.objectType !== ObjectType.Internal ? { maxHeight: \"338px\" } : {}, // overflow conflict with iframe...\n            ...property?.group?.value !== edit ? { paddingRight: \"0.5rem\" } : {},\n          }}\n        >\n          {list.map((val, i) => {\n            if (!hasEmptyExtEntityAsFirst || i > 0) return renderListElem(val, i, list.length)\n          })}\n        </div>\n      </div>\n      {canAdd && addBtn && (\n        <Create subject={subject} property={property} embedded={embedded} newVal={Number(newVal)} shape={shape} config={config}/>\n      )}\n    </React.Fragment>\n  )\n}\n\ntype CreateComponentType = FC<{\n  subject: Subject\n  property: PropertyShape\n  embedded?: boolean\n  disable?: boolean\n  newVal?: number\n  shape?: NodeShape\n  config: RDEConfig\n}>\n\n/**\n * Create component\n */\nconst Create: CreateComponentType = ({ subject, property, embedded, disable, newVal, shape, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  let collecNode:rdf.Collection|null = null\n  if(list.length === 1 && list[0] instanceof RDFResource\n     && list[0].node && list[0].node instanceof rdf.Collection) {\n    collecNode = list[0].node\n  }\n  const collec:any[]|undefined = collecNode?.termType === \"Collection\" ? collecNode?.elements : undefined\n  const listOrCollec = collec ? collec : list\n  const [uiLang] = useRecoilState(uiLangState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [uiTab] = useRecoilState(uiTabState)\n  const entity = entities.findIndex((e, i) => i === uiTab)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [idToken, setIdToken] = useState(localStorage.getItem(\"BLMPidToken\"))\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const { getIdTokenClaims } = useAuth0()\n  const [reloadEntity, setReloadEntity] = useRecoilState(reloadEntityState)\n\n  let nextVal = useRecoilValue(\n      property.sortOnProperty\n      ? orderedNewValSelector({\n          atom: property.sortOnProperty ? subject.getAtomForProperty(property.path.sparqlString) : null,\n          propertyPath: property.sortOnProperty.value,\n          //order: \"desc\" // default is \"asc\"\n        } as orderedNewValSelectorType)\n      : initStringAtom\n  )\n  const sortProps = property.targetShape?.properties.filter((p) => p.path?.sparqlString === property.sortOnProperty?.value)\n  if (sortProps?.length) {\n    const sortProp = sortProps[0]\n    if (sortProp?.minInclusive != null && Number(nextVal) < sortProp.minInclusive) nextVal = sortProp.minInclusive.toString()\n    if (sortProp?.maxInclusive != null && Number(nextVal) > sortProp.maxInclusive) nextVal = sortProp.maxInclusive.toString()\n    //debug(\"create:\",shape,nextVal,newVal,property.qname,property) //,subject.getAtomForProperty(property.path.sparqlString))\n  }\n  let waitForNoHisto = false\n\n  const addItem = async (event:React.MouseEvent<HTMLButtonElement>, n:number) => {\n    /* // refactoring needed\n\n    if (n > 1) {\n      let store = new rdf.Store()\n      ns.setDefaultPrefixes(store)\n      subject.graph.addNewValuestoStore(store)\n\n      const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n      rdf.serialize(defaultRef, store, undefined, \"text/turtle\", async function (err, str) {\n        if (!str) {\n          debug(err)\n          throw \"empty ttl serialization\"\n        }\n        let prefix = property.targetShape.getPropStringValue(shapes.bdsIdentifierPrefix)\n        if (prefix == null) throw \"cannot find entity prefix for \" + property.targetShape.qname\n        else prefix += RIDprefix\n        let reservedId = await reserveLname(prefix, null, idToken, n)\n        if (reservedId) reservedId = reservedId.split(/[ \\n]+/).map((id) => \"bdr:\" + id)\n        else throw \"error reserving ids\"\n        if (str.match(/bdo:instanceHasVolume/))\n          str = str.replace(/(bdo:instanceHasVolume([\\n\\r]|[^;.])+)([;.])/m, \"$1,\" + reservedId.join(\",\") + \"$3\")\n        else\n          str = str.replace(/(a bdo:ImageInstance)([;.])/m, \"$1; bdo:instanceHasVolume \" + reservedId.join(\",\") + \" $2\")\n        str = str.replace(\n          new RegExp(\"(\" + subject.qname + \"[\\n\\r +]*a )\"),\n          reservedId\n            .map((id) => id + \" a bdo:ImageGroup ; bdo:volumeNumber \" + nextVal++ + \" ; bdo:volumePagesTbrcIntro 0 .\")\n            .join(\"\\n\") + \"\\n$1\"\n        )\n\n        debug(\"ttl:\", newVal, str, err)\n\n        store = rdf.graph()\n        rdf.parse(str, store, rdf.Store.defaultGraphURI, \"text/turtle\")\n\n        const url = config.API_BASEURL + subject.qname + \"/focusgraph\"\n        try {\n          let alreadySaved = false\n          let loadRes\n          if (!demo) {\n            const idTokenF = await getIdTokenClaims()\n            loadRes = await putTtl(\n              url,\n              store,\n              idTokenF.__raw,\n              entities[entity]?.alreadySaved ? \"POST\" : \"PUT\",\n              '\"batch add volumes\"@en',\n              entities[entity]?.alreadySaved\n            )\n          } else loadRes = true\n          alreadySaved = loadRes\n\n          const newEntities = [...entities]\n          newEntities[entity] = {\n            ...newEntities[entity],\n            state: EditedEntityState.Saved,\n            alreadySaved,\n            subject: undefined,\n            loadedUnsavedFromLocalStorage: false,\n          }\n\n          delete history[entities[entity]?.subject?.uri]\n\n          setEntities(newEntities)\n\n          setTimeout(() => setReloadEntity(subject.qname), 300) //eslint-disable-line no-magic-numbers\n        } catch (e) {\n          debug(\"error add batch:\", e)\n        }\n      })\n\n      return\n    }\n    */\n\n    if (waitForNoHisto) return\n\n    if (property.objectType === ObjectType.Internal) {\n      waitForNoHisto = true\n      subject.noHisto(false, 1) // allow parent node in history but default empty subnodes before tmp:allValuesLoaded\n    }\n    const item = await generateDefault(property, subject, RIDprefix, idToken, newVal?.toString(), config)\n    setList([...listOrCollec, item]) //(oldList) => [...oldList, item])\n    if (property.objectType === ObjectType.Internal && item instanceof Subject) {\n      //setEdit(property.qname+item.qname)  // won't work...\n      setImmediate(() => {\n        // this must be \"delayed\" to work\n        setEdit(subject.qname + \" \" + property.qname + \" \" + item.qname)\n      })\n\n      setTimeout(() => {\n        subject.noHisto(false, false) // history back to normal\n        waitForNoHisto = false\n      }, 350) // *arbitrary long* delay during which add button can't be used\n    }\n  }\n\n  //debug(\"path/type:\", property.objectType, property.path.sparqlString, disable)\n\n  if (\n    property.objectType !== ObjectType.Internal &&\n    (embedded ||\n      property.objectType == ObjectType.Literal ||\n      property.objectType == ObjectType.ResInList ||\n      property.objectType == ObjectType.LitInList)\n    /*\n      // TODO: refactor\n      property.path.sparqlString === ns.SKOS(\"prefLabel\").value ||\n      property.path.sparqlString === ns.SKOS(\"altLabel\").value ||\n      property.path.sparqlString === ns.BDO(\"catalogInfo\").value ||\n      property.path.sparqlString === ns.RDFS(\"comment\").value)\n    */\n  )\n    return <MinimalAddButton disable={disable} add={addItem} className=\" \" />\n  else {\n    const targetShapeLabels = property.targetShape?.targetClassPrefLabels\n    const labels = targetShapeLabels ? targetShapeLabels : property.prefLabels\n    const count = property.allowBatchManagement ? 2 : 1\n    return <BlockAddButton add={addItem} label={ValueByLangToStrPrefLang(labels, uiLang)} count={count} />\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiFormHelperText-root\": {\n      color: theme.palette.secondary.main,\n    },\n  },\n}))\n\n/**\n * Edit component\n */\nconst EditLangString: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  globalError?: string\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  entity: Subject\n  index: number\n  config: RDEConfig\n}> = ({ property, lit, onChange, label, globalError, editable, updateEntityState, entity, index, config }) => {\n  const classes = useStyles()\n  const [editMD, setEditMD] = useState(false)\n  const [keyboard, setKeyboard] = useState(false)\n\n  const canPushPrefLabel = property.allowPushToTopLevelLabel\n\n  const getLangStringError = (val: string) => {\n    let err = \"\"\n    if (!val && property.minCount) err = i18n.t(\"error.empty\")\n    else if (globalError) err = globalError\n    return err\n  }\n\n  const [error, setError] = useState<React.ReactNode | null>(null)\n\n  //debug(\"val:\", lit.id, lit.value, error, globalError)\n\n  useEffect(() => {\n    const newError = getLangStringError(lit.value)\n    if (newError != error) {\n      //debug(\"newE:\",newError,error,errors,lit,lit.id)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n      setError(newError)\n    }\n  })\n\n  useEffect(() => {\n    return () => {\n      // some not state-dependent flag to know entity we currently are\n      const inOtherEntity = !window.location.href.includes(\"/\" + entity.qname + \"/\")\n\n      //debug(\"unmount\", entity.qname, window.location.href, lit.id, errors, inOtherEntity)\n      if (!inOtherEntity) updateEntityState(EditedEntityState.Saved, lit.id, false, !inOtherEntity)\n    }\n  }, [])\n\n  const errorData = {\n    helperText: (\n      <React.Fragment>\n        <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n        &nbsp;<i>{error}</i>\n      </React.Fragment>\n    ),\n    error: true,\n  }\n\n  const [preview, setPreview] = useState<string|null>(null)\n  useLayoutEffect(() => {\n    if (document.activeElement === inputRef.current) {\n      const { value, error } = config.previewLiteral(lit, uiLang)\n      setPreview(value)\n      setError(error)\n    } else {\n      setPreview(null)\n    }\n  })\n\n  let padBot = \"0px\"\n  if (preview) {\n    padBot = \"40px\"\n  } else if (property.singleLine && editMD) {\n    padBot = \"1px\"\n  }\n\n  const codeEdit = { ...commands.codeEdit, icon: <EditIcon style={{ width: \"12px\", height: \"12px\" }} /> },\n    codePreview = { ...commands.codePreview, icon: <VisibilityIcon style={{ width: \"12px\", height: \"12px\" }} /> }\n\n  const hasKB = config.possibleLiteralLangs.filter((l) => l.value === lit.language)\n\n  const inputRef = useRef<HTMLInputElement>()\n\n  const keepFocus = () => {\n    if (inputRef.current && document.activeElement != inputRef.current) inputRef.current.focus()\n  }\n\n  const insertChar = (str: string) => {\n    if (inputRef.current) {\n      const { selectionStart, selectionEnd, value } = inputRef.current\n      //debug(\"input:\", selectionStart, selectionEnd, value)\n      const newValue =\n        value.substring(0, selectionStart ? selectionStart : 0) + str + value.substring(selectionEnd ? selectionEnd : 0)\n      onChange(lit.copyWithUpdatedValue(newValue))\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.selectionStart = (selectionStart ? selectionStart : 0) + str.length\n          inputRef.current.selectionEnd = inputRef.current.selectionStart\n        }\n      }, 10)\n    }\n  }\n\n  let prefLabelAtom = entity?.getAtomForProperty(ns.SKOS(\"prefLabel\").value)\n  if (!prefLabelAtom) prefLabelAtom = initListAtom\n  const [prefLabels, setPrefLabels] = useRecoilState(prefLabelAtom)\n\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const pushAsPrefLabel = () => {\n    //debug(\"pL:\",prefLabels,lit)\n    let newPrefLabels:Value[] = [],\n      found = false\n    for (const l in prefLabels) {\n      if (prefLabels[l] instanceof LiteralWithId) { \n        const litWi = prefLabels[l] as LiteralWithId\n        if(litWi.language === lit.language) {\n          found = true\n          newPrefLabels = replaceItemAtIndex(prefLabels, Number(l), lit)\n          break\n        }\n      }\n    }\n    if (!found) newPrefLabels = [...prefLabels, lit.copy()]\n    if (newPrefLabels.length) setPrefLabels(newPrefLabels)\n  }\n\n  return (\n    <div\n      className={\"mb-0\" + (preview ? \" withPreview\" : \"\")}\n      style={{\n        display: \"flex\",\n        width: \"100%\",\n        alignItems: \"flex-end\",\n        paddingBottom: padBot,\n        position: \"relative\",\n      }}\n    >\n      {canPushPrefLabel && !error && !globalError && (\n        <span className=\"canPushPrefLabel\">\n          <span onClick={pushAsPrefLabel}>\n            <Tooltip key={lit.id} title={<>Use as the main name or title for this language</>}>\n              <span className=\"img\"></span>\n            </Tooltip>\n          </span>\n        </span>\n      )}\n      {(property.singleLine || !editMD) && (\n        <div style={{ width: \"100%\", position: \"relative\" }}>\n          <TextField\n            variant=\"standard\"\n            inputRef={inputRef}\n            className={lit.language === \"bo\" ? \" lang-bo\" : \"\"}\n            label={label}\n            style={{ width: \"100%\" }}\n            value={lit.value}\n            multiline={!property.singleLine}\n            InputLabelProps={{ shrink: true }}\n            inputProps={{ spellCheck: \"true\", lang: lit.language === \"en\" ? \"en_US\" : lit.language }}\n            onChange={(e) => {\n              const newError = getLangStringError(lit.value)\n              if (newError && error != newError) setError(newError)\n              else updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n              onChange(lit.copyWithUpdatedValue(e.target.value))\n            }}\n            {...(error ? { error: true, helperText: error } : {})}\n            {...(!editable ? { disabled: true } : {})}\n            onFocus={() => {\n              const { value, error } = config.previewLiteral(lit, uiLang)\n              setPreview(value)\n              setError(error)\n            }}\n            onBlur={() => {\n              setPreview(null)\n              setTimeout(() => {\n                if (inputRef.current && document.activeElement != inputRef.current) setKeyboard(false)\n              }, 350)\n            }}\n          />\n          {property.allowMarkDown && (\n            <span\n              className={\"opaHover\"}\n              style={{ position: \"absolute\", right: 0, top: 0, fontSize: \"0px\" }}\n              onClick={() => setEditMD(!editMD)}\n            >\n              {!editMD && <MDIcon style={{ height: \"16px\" }} />}\n              {editMD && <MDIcon style={{ height: \"16px\" }} />}\n            </span>\n          )}\n          {hasKB.length > 0 && hasKB[0].keyboard && (\n            <span\n              onClick={() => {\n                setKeyboard(!keyboard)\n                keepFocus()\n              }}\n              className={\"opaHover \" + (keyboard ? \"on\" : \"\")}\n              style={{\n                position: \"absolute\",\n                right: 0,\n                top: \"0px\",\n                height: \"100%\",\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <KeyboardIcon />\n            </span>\n          )}\n          {hasKB.length > 0 && hasKB[0].keyboard && keyboard && (\n            <div className=\"card px-2 py-2 hasKB\" style={{ display: \"block\", width: \"405px\" }} onClick={keepFocus}>\n              {hasKB[0].keyboard.map((k, i) => (\n                <span\n                  key={i}\n                  className=\"card mx-1 my-1\"\n                  style={{\n                    display: \"inline-flex\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => insertChar(k)}\n                >\n                  {k}\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {!property.singleLine && editMD && (\n        <div style={{ width: \"100%\", position: \"relative\", paddingBottom: \"1px\" }}>\n          <MDEditor\n            textareaProps={{ spellCheck: \"true\", lang: lit.language === \"en\" ? \"en_US\" : lit.language }}\n            value={lit.value}\n            preview=\"edit\"\n            onChange={(e) => {\n              if (e) onChange(lit.copyWithUpdatedValue(e))\n            }}\n            commands={[\n              commands.bold,\n              commands.italic,\n              commands.strikethrough,\n              commands.hr,\n              commands.title,\n              commands.divider,\n              commands.link,\n              commands.quote,\n              commands.code,\n              commands.image,\n              commands.divider,\n              commands.unorderedListCommand,\n              commands.orderedListCommand,\n              commands.checkedListCommand,\n              commands.divider,\n              codeEdit,\n              codePreview,\n            ]}\n            extraCommands={[]}\n          />\n          <span\n            className={\"opaHover on\"}\n            style={{ position: \"absolute\", right: \"5px\", top: \"7px\", fontSize: \"0px\", cursor: \"pointer\" }}\n            onClick={() => setEditMD(!editMD)}\n          >\n            <MDIcon style={{ height: \"15px\" }} title={\"Use rich text editor\"} />\n          </span>\n        </div>\n      )}\n      <LangSelect\n        onChange={(value) => {\n          onChange(lit.copyWithUpdatedLanguage(value))\n        }}\n        value={lit.language || \"\"}\n        property={property}\n        {...(error ? { error: true } : {})}\n        editable={editable}\n        config={config}\n      />\n      {preview && ( // TODO see if fromWylie & MD can both be used ('escape' some chars?)\n        <div className=\"preview-ewts\">\n          <TextField disabled value={preview} />\n          {/*editMD && <MDEditor.Markdown source={fromWylie(lit.value)} /> // not really working  */}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport const LangSelect: FC<{\n  onChange: (value: string) => void\n  value: string\n  property?: PropertyShape\n  disabled?: boolean\n  error?: boolean\n  editable?: boolean\n  config: RDEConfig\n}> = ({ onChange, value, property, disabled, error, editable, config }) => {\n  const onChangeHandler = (event: React.ChangeEvent<{ value: unknown }>) => {\n    onChange(event.target.value as string)\n  }\n\n  const languages = property?.defaultLanguage ? langsWithDefault(property.defaultLanguage, config.possibleLiteralLangs) : config.possibleLiteralLangs\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <TextField\n        select\n        InputLabelProps={{ shrink: true }}\n        className={\"ml-2\"}\n        value={value}\n        style={{ minWidth: 100, flexShrink: 0, marginTop: \"5px\" }}\n        onChange={onChangeHandler}\n        {...(disabled ? { disabled: true } : {})}\n        {...(error ? { error: true, helperText: <br /> } : {})}\n        {...(!editable ? { disabled: true } : {})}\n      >\n        {languages.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.value}\n          </MenuItem>\n        ))}\n        {!languages.some((l) => l.value === value) && (\n          <MenuItem key={value} value={value}>\n            {value}\n          </MenuItem>\n        )}\n      </TextField>\n    </div>\n  )\n}\n\nconst EditString: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  entity: Subject\n  index: number\n  config: RDEConfig\n}> = ({ property, lit, onChange, label, editable, updateEntityState, entity, index, config }) => {\n  const classes = useStyles()\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const dt = property.datatype\n  const pattern = property.pattern ? new RegExp(property.pattern) : undefined\n\n  const [error, setError] = useState<React.ReactNode|null>(null)\n  const [preview, setPreview] = useState<string|null>(null)\n\n  const getPatternError = (val: string) => {\n    let err = \"\"\n    if (pattern !== undefined && val !== \"\" && !val.match(pattern)) {\n      err = ValueByLangToStrPrefLang(property.errorMessage, uiLang)\n      debug(\"err:\", property.errorMessage)\n    }\n    return err\n  }\n\n  let timerPreview = 0\n  let changeCallback = (val: string):void => { return }\n  useEffect(() => {\n    changeCallback = (val: string) => {\n      if (val === \"\") {\n        setError(null)\n        setPreview(null)\n        updateEntityState(EditedEntityState.Saved, lit.id)\n      } else {\n        if (timerPreview) window.clearTimeout(timerPreview)\n        const delay = 350\n        timerPreview = window.setTimeout(() => {\n          const obj = config.previewLiteral(new rdf.Literal(val, lit.language, lit.datatype), uiLang)\n          const { value } = obj\n          let { error } = obj\n          setPreview(value)\n          if (!error)\n            error = getPatternError(val)\n          setError(error)\n          updateEntityState(error ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n        }, delay)\n      }\n      onChange(lit.copyWithUpdatedValue(val))\n    }\n  })\n\n  const getEmptyStringError = (val: string): React.ReactNode | null => {\n    if (!val && property.minCount)\n      return\n        <>\n          <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} /> <i><>{i18n.t(\"error.empty\")}</></i>\n        </>\n    return null\n  }\n\n  useEffect(() => {\n    const newError = error || getEmptyStringError(lit.value)\n    //debug(\"newE:\",newError,error,lit,lit.id)\n    if (newError != error) {\n      setError(newError)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n    }\n  })\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n      <TextField\n        variant=\"standard\"\n        //className={/*classes.root +*/ \" mt-2\"}\n        label={label}\n        style={{ width: \"100%\" }}\n        value={lit.value}\n        // TODO: refactor\n        {...(property.qname !== \"bds:NoteShape-contentLocationStatement\" ? { InputLabelProps: { shrink: true } } : {})}\n        onBlur={(e) => setPreview(null)}\n        onFocus={(e) => changeCallback(e.target.value)}\n        onChange={(e) => changeCallback(e.target.value)}\n        {...(!editable ? { disabled: true } : {})}\n        { ...error ? { error: true, helperText: error } : {} }\n      />\n      {preview && (\n        <div className=\"preview-EDTF\" style={{ width: \"100%\" }}>       \n          <pre>{preview}</pre>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst EditBool: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n}> = ({ property, lit, onChange, label, editable }) => {\n  const classes = useStyles()\n\n  const dt = property.datatype\n\n  let val: boolean | string = !lit.value || lit.value == \"false\" || lit.value == \"0\" ? false : true\n  if (property.defaultValue === null && lit.value == \"\") val = \"unset\"\n\n  //debug(\"bool:\",property.qname,property.defaultValue,lit)\n\n  const changeCallback = (val: string) => {\n    onChange(lit.copyWithUpdatedValue(val == \"false\" ? \"0\" : \"1\"))\n  }\n  return (\n    <TextField\n      select\n      style={{ padding: \"1px\", minWidth: \"250px\" }}\n      label={label}\n      value={val}\n      InputLabelProps={{ shrink: true }}\n      onChange={(e) => {\n        if (e.target.value != \"-\") changeCallback(e.target.value)\n      }}\n      {...(!editable ? { disabled: true } : {})}\n    >\n      {[\"true\", \"false\"].concat(val === \"unset\" ? [val] : []).map((v) => (\n        <MenuItem key={v} value={v}>\n          {i18n.t(\"types.\" + v)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n\nconst EditInt: FC<{\n  property: PropertyShape\n  lit: LiteralWithId\n  onChange: (value: LiteralWithId) => void\n  label: React.ReactNode\n  editable?: boolean\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  hasNoOtherValue: boolean\n  index: number\n  globalError?: string\n}> = ({ property, lit, onChange, label, editable, updateEntityState, hasNoOtherValue, index, globalError }) => {\n  // used for integers and gYear\n\n  const classes = useStyles()\n\n  const dt = property.datatype\n  const minInclusive = property.minInclusive\n  const maxInclusive = property.maxInclusive\n  const minExclusive = property.minExclusive\n  const maxExclusive = property.maxExclusive\n\n  const getIntError = (val: string) => {\n    let err = \"\"\n    if (globalError) {\n      err = globalError\n    } else if (hasNoOtherValue && val === \"\") {\n      err = i18n.t(\"error.empty\")\n    } else if (val !== undefined && val !== \"\") {\n      const valueInt = parseInt(val)\n      if (minInclusive && minInclusive > valueInt) {\n        err = i18n.t(\"error.superiorTo\", { val: minInclusive })\n      } else if (maxInclusive && maxInclusive < valueInt) {\n        err = i18n.t(\"error.inferiorTo\", { val: maxInclusive })\n      } else if (minExclusive && minExclusive >= valueInt) {\n        err = i18n.t(\"error.superiorToStrict\", { val: minExclusive })\n      } else if (maxExclusive && maxExclusive <= valueInt) {\n        err = i18n.t(\"error.inferiorToStrict\", { val: maxExclusive })\n      }\n    }\n    return err\n  }\n\n  const [error, setError] = useState(\"\") //getIntError(lit.value))\n\n  useEffect(() => {\n    if (!hasNoOtherValue && (lit.value === undefined || lit.value === null || lit.value === \"\")) return\n    const newError = getIntError(lit.value)\n    if (newError != error) {\n      setError(newError)\n      updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n    }\n  })\n\n  const changeCallback = (val: string) => {\n    const newError = getIntError(val)\n    if (newError != error) setError(newError)\n    else updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, lit.id)\n\n    //debug(\"change:\", newError)\n\n    if (dt && dt.value == xsdgYear) {\n      //pad to four digits in the case of xsdgYear\n      /* eslint-disable no-magic-numbers */\n      if (val.startsWith(\"-\")) {\n        val = \"-\" + val.substring(1).padStart(4, \"0\")\n      } else {\n        val = val.padStart(4, \"0\")\n      }\n    }\n    onChange(lit.copyWithUpdatedValue(val))\n  }\n\n  let value = lit.value\n  if (dt && dt.value == xsdgYear) {\n    // don't display the leading 0\n    //debug(\"val?\", value, lit)\n    value = value.replace(/^(-?)0+/, \"$1\")\n  }\n\n  return (\n    <TextField\n      label={label}\n      style={{ width: 240 }}\n      value={value}\n      {...(error\n        ? {\n            helperText: (\n              <React.Fragment>\n                <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n                <i> {error}</i>\n              </React.Fragment>\n            ),\n            error: true,\n          }\n        : {})}\n      type=\"number\"\n      InputProps={{ inputProps: { min: minInclusive, max: maxInclusive } }}\n      InputLabelProps={{ shrink: true }}\n      onChange={(e) => changeCallback(e.target.value)}\n      {...(!editable ? { disabled: true } : {})}\n    />\n  )\n}\n\nconst xsdgYear = ns.XSD(\"gYear\").value\nconst rdflangString = ns.RDF(\"langString\").value\nconst xsdinteger = ns.XSD(\"integer\").value\nconst xsddecimal = ns.XSD(\"decimal\").value\nconst xsdint = ns.XSD(\"int\").value\nconst xsdboolean = ns.XSD(\"boolean\").value\n\nconst intishTypeList = [xsdinteger, xsddecimal, xsdint]\n\n/**\n * Display component, with DeleteButton\n */\nconst LiteralComponent: FC<{\n  lit: LiteralWithId\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  isUniqueLang: boolean\n  isUniqueValueAmongSiblings: boolean\n  create?: JSX.Element\n  editable: boolean\n  topEntity?: Subject\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  config: RDEConfig\n}> = ({\n  lit,\n  subject,\n  property,\n  canDel,\n  isUniqueValueAmongSiblings,\n  isUniqueLang,\n  create,\n  editable,\n  topEntity,\n  updateEntityState,\n  config\n}) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const index = list.findIndex((listItem) => listItem === lit)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n  const [uiLang] = useRecoilState(uiLangState)\n\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLang)\n\n  //debug(\"lit:\", property.qname, isUniqueValueAmongSiblings, lit.val)\n\n  const onChange: (value: LiteralWithId) => void = (value: LiteralWithId) => {\n    const newList = replaceItemAtIndex(list, index, value)\n    setList(newList)\n  }\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n    updateEntityState(EditedEntityState.Saved, lit.id)\n  }\n\n  useEffect(() => {\n    let error = false\n    const entityQname = topEntity ? topEntity.qname : subject.qname\n    const n = entities.findIndex((e) => e.subjectQname === entityQname)\n    if (n > -1) {\n      const ent = entities[n]\n      if (ent.state === EditedEntityState.Error) error = true\n    }\n    if (!error && (!errors[entityQname] || !Object.keys(errors[entityQname]).length)) {\n      updateEntityState(EditedEntityState.Saved, lit.id)\n    }\n  }, [undos])\n\n  const t = property.datatype\n  let edit, classN\n\n  if (t?.value === rdflangString) {\n    classN = \"langString \" + (lit.value ? \"lang-\" + lit.language : \"\")\n    edit = (\n      <EditLangString\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        {...(property.uniqueLang && !isUniqueLang ? { globalError: i18n.t(\"error.unique\") } : {})}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        entity={topEntity ? topEntity : subject}\n        index={index}\n        config={config}\n      />\n    )\n    // eslint-disable-next-line no-extra-parens\n  } else if (t?.value === xsdgYear || (t && t?.value && intishTypeList.includes(t.value))) {\n    classN = \"gYear intish\"\n    edit = (\n      <EditInt\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        hasNoOtherValue={property.minCount === 1 && list.length === 1}\n        index={index}\n        {...(property.uniqueValueAmongSiblings && !isUniqueValueAmongSiblings\n          ? { globalError: i18n.t(\"error.uniqueV\") }\n          : {})}\n      />\n    )\n  } else if (t?.value === xsdboolean) {\n    edit = (\n      <EditBool\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n      />\n    )\n  } else {\n    edit = (\n      <EditString\n        property={property}\n        lit={lit}\n        onChange={onChange}\n        label={[\n          propLabel,\n          helpMessage ? (\n            <Tooltip key={lit.id} title={helpMessage}>\n              <HelpIcon className=\"help literal\" />\n            </Tooltip>\n          ) : null,\n        ]}\n        editable={editable && !property.readOnly}\n        updateEntityState={updateEntityState}\n        entity={subject}\n        index={index}\n        config={config}\n      />\n    )\n  }\n\n  return (\n    <>\n    <div className={classN} style={{ display: \"flex\", alignItems: \"flex-end\" /*, width: \"100%\"*/ }}>\n      {edit}\n      <div className=\"hoverPart\">\n        <button\n          className=\"btn btn-link ml-2 px-0 py-0 close-facet-btn\"\n          onClick={deleteItem}\n          {...(!canDel ? { disabled: true } : {})}\n        >\n          <RemoveIcon className=\"my-0 close-facet-btn\" />\n        </button>\n        {create}\n      </div>\n    </div>\n    </>\n  )\n}\n\n//TODO: should probably go to another file\nconst FacetComponent: FC<{\n  subNode: Subject\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  //force?: boolean\n  editable: boolean\n  topEntity: Subject\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  shape: NodeShape\n  config: RDEConfig\n}> = ({ subNode, subject, property, canDel, /*force,*/ editable, topEntity, updateEntityState, shape, config }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang] = useRecoilState(uiLangState)\n  const index = list.findIndex((listItem) => listItem === subNode)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const deleteItem = () => {\n    updateEntityState(EditedEntityState.Saved, subNode.qname, true)\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n  }\n\n  const targetShape = property.targetShape\n  if (!targetShape) throw \"unable to find target shape of \" + property.lname\n\n  const withDisplayPriority: PropertyShape[] = [],\n    withoutDisplayPriority: PropertyShape[] = []\n  targetShape.properties.map((subprop) => {\n    if (subprop.displayPriority && subprop.displayPriority >= 1) {\n      withDisplayPriority.push(subprop)\n    } else {\n      withoutDisplayPriority.push(subprop)\n    }\n  })\n\n  const [force, setForce] = useState(false)\n  const hasExtra = withDisplayPriority.length > 0 // && isSimplePriority\n  let waitForNoHisto = false\n  const toggleExtra = () => {\n    if (waitForNoHisto) return\n\n    waitForNoHisto = true\n    subject.noHisto(false, -1) // put empty subnodes in history before tmp:allValuesLoaded\n\n    setForce(!force)\n\n    const delay = 350\n    setTimeout(() => {\n      subject.noHisto(false, false) // history back to normal\n      subject.resetNoHisto()\n      waitForNoHisto = false\n    }, delay) // *arbitrary long* delay during which button can't be used\n  }\n\n  const [edit, setEdit] = useRecoilState(uiEditState)\n\n  //debug(\"facet:\", edit, topEntity.qname, subject.qname + \" \" + property.qname + \" \" + subNode.qname)\n\n  let editClass = \"\"\n  if (\n    edit === subject.qname + \" \" + property.qname + \" \" + subNode.qname ||\n    edit.startsWith(subNode.qname + \" \") ||\n    edit.endsWith(\" \" + subject.qname)\n  ) {\n    editClass = \"edit\"\n  }\n\n  return (\n    <>\n      <div\n        className={\"facet \" + editClass + \" editable-\" + editable + \" force-\" + force}\n        onClick={(ev) => {\n          setEdit(subject.qname + \" \" + property.qname + \" \" + subNode.qname)\n          const target = ev.target as Element\n          if (editClass || target?.classList && !target?.classList?.contains(\"close-facet-btn\")) {\n            ev.stopPropagation()\n          }\n        }}\n      >\n        <div className={\"card pt-2 pb-3 pr-3 mt-4 pl-2 \" + (hasExtra ? \"hasDisplayPriority\" : \"\")}>\n          {targetShape.independentIdentifiers && <div className=\"internalId\">{subNode.lname}</div>}\n          {withoutDisplayPriority.map((p, index) => (\n            <PropertyContainer\n              key={index + p.uri}\n              property={p}\n              subject={subNode}\n              embedded={true}\n              force={force}\n              editable={!p.readOnly}\n              owner={subject}\n              topEntity={topEntity}\n              shape={shape}\n              siblingsPath={property.path?.sparqlString}\n              config={config}\n            />\n          ))}\n          {withDisplayPriority.map((p, index) => (\n            <PropertyContainer\n              key={index + p.uri}\n              property={p}\n              subject={subNode}\n              embedded={true}\n              force={force}\n              editable={!p.readOnly}\n              owner={subject}\n              topEntity={topEntity}\n              shape={shape}\n              siblingsPath={property.path?.sparqlString}\n              config={config}\n            />\n          ))}\n          {hasExtra && (\n            <span className=\"toggle-btn btn btn-rouge mt-4\" onClick={toggleExtra}>\n              <>{i18n.t(\"general.toggle\", { show: force ? i18n.t(\"general.hide\") : i18n.t(\"general.show\") })}</>\n            </span>\n          )}\n          <div className=\"close-btn\">\n            {targetShape.description && (\n              <Tooltip title={ValueByLangToStrPrefLang(targetShape.description, uiLang)}>\n                <HelpIcon className=\"help\" />\n              </Tooltip>\n            )}\n            <button\n              className=\"btn btn-link ml-2 px-0 close-facet-btn py-0\"\n              onClick={deleteItem}\n              {...(!canDel ? { disabled: true } : {})}\n            >\n              <CloseIcon className=\"close-facet-btn my-1\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\n//TODO: component to display an external entity that has already been selected, with a delete button to remove it\n// There should probably be a ExtEntityCreate or something like that to allow an entity to be selected\nconst ExtEntityComponent: FC<{\n  extRes: ExtRDFResourceWithLabel\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  onChange: (value: ExtRDFResourceWithLabel, idx: number, removeFirst: boolean | undefined) => void\n  idx: number\n  exists: (uri: string) => boolean\n  editable: boolean\n  owner?: Subject\n  title: string\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  shape: NodeShape,\n  config: RDEConfig\n}> = ({\n  extRes,\n  subject,\n  property,\n  canDel,\n  onChange,\n  idx,\n  exists,\n  editable,\n  owner,\n  title,\n  updateEntityState,\n  shape,\n  config\n}) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const index = list.findIndex((listItem) => listItem === extRes)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const deleteItem = () => {\n    let newList = removeItemAtIndex(list, index)\n    // remove first empty field if alone & displayPriority >= 1\n    if (idx === 1 && newList.length === 1) {\n      const first = newList[0]\n      if (first instanceof ExtRDFResourceWithLabel && first.uri === \"tmp:uri\") newList = []\n    }\n    setList(newList)\n  }\n\n  const [error, setError] = useState(\"\")\n\n  useEffect(() => {\n    let newError\n    const nonEmptyList = list.filter((e) => e instanceof RDFResource && e.uri !== \"tmp:uri\")\n    if (property.minCount && nonEmptyList.length < property.minCount) {\n      newError = i18n.t(\"error.minC\", { count: property.minCount })\n    } else if (property.maxCount && nonEmptyList.length > property.maxCount) {\n      newError = i18n.t(\"error.maxC\", { count: property.maxCount })\n    } else newError = \"\"\n\n    //debug(\"nE?e\",property.qname,newError,error)\n    //debug(\"minC?\",newError,nonEmptyList.length,property.minCount,property.maxCount)\n\n    setError(newError)\n    updateEntityState(newError ? EditedEntityState.Error : EditedEntityState.Saved, property.qname)\n  }, [list])\n\n  //, ...extRes.uri === \"tmp:uri\" ? { /*width: \"100%\"*/ } : {} }}>\n  return (\n    <div className={\"extEntity\" + (extRes.uri === \"tmp:uri\" ? \" new\" : \"\")} style={{ position: \"relative\" }}>\n      <div\n        style={{\n          ...extRes.uri !== \"tmp:uri\"\n            ? {\n                display: \"inline-flex\",\n                width: \"auto\",\n                backgroundColor: \"#f0f0f0\",\n                borderRadius: \"4px\",\n                border: \"1px solid #ccc\",\n                flexDirection: \"row\",\n                position: \"static\",\n              }\n            : {\n                display: \"flex\",\n              },\n        }}\n        {...(extRes.uri !== \"tmp:uri\" ? { className: \"px-2 py-1 mr-2 mt-2 card\" } : {})}\n      >\n        <config.resourceSelector\n          value={extRes}\n          onChange={onChange}\n          property={property}\n          idx={idx}\n          exists={exists}\n          subject={subject}\n          editable={editable}\n          {...(owner ? { owner } : {})}\n          title={title}\n          globalError={error}\n          updateEntityState={updateEntityState}\n          shape={shape}\n          config={config}\n        />\n        {extRes.uri !== \"tmp:uri\" && (\n          <button className={\"btn btn-link ml-2 px-0\"} onClick={deleteItem} {...(!canDel ? { disabled: true } : {})}>\n            {extRes.uri === \"tmp:uri\" ? <RemoveIcon /> : <CloseIcon />}\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\n//TODO: component to display an external entity that has already been selected, with a delete button to remove it\n// There should probably be a ExtEntityCreate or something like that to allow an entity to be selected\nconst SelectComponent: FC<{\n  res: LiteralWithId | RDFResourceWithLabel\n  subject: Subject\n  property: PropertyShape\n  canDel: boolean\n  canSelectNone: boolean\n  selectIdx: number\n  editable: boolean\n  create?: JSX.Element\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n}> = ({ res, subject, property, canDel, canSelectNone, selectIdx, editable, create, updateEntityState }) => {\n  if (property.path == null) throw \"can't find path of \" + property.qname\n  const [list, setList] = useRecoilState(subject.getAtomForProperty(property.path.sparqlString))\n  const [uiLang, setUiLang] = useRecoilState(uiLangState)\n  const [uiLitLang, setUiLitLang] = useRecoilState(uiLitLangState)\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [uiTab] = useRecoilState(uiTabState)\n  const entity = entities.findIndex((e, i) => i === uiTab)\n\n  const propLabel = ValueByLangToStrPrefLang(property.prefLabels, uiLang)\n  const helpMessage = ValueByLangToStrPrefLang(property.helpMessage, uiLitLang)\n\n  let possibleValues = property.in\n  if (possibleValues == null) throw \"can't find possible list for \" + property.uri\n\n  if (canSelectNone) possibleValues = [noneSelected, ...possibleValues]\n\n  const index = selectIdx\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(list, index)\n    setList(newList)\n  }\n\n  const getElementFromValue = (value: string, checkActualValue = false) => {\n    if (possibleValues === null) return null\n    for (const v of possibleValues) {\n      if (v.id === value || checkActualValue && v.value === value) {\n        return v\n      }\n    }\n    debug(\"error cannot get element from value \" + value)\n    return null\n  }\n\n  const val = res instanceof RDFResourceWithLabel ? res : getElementFromValue(list[index].value, true)\n\n  //debug(\"selec:\", property.qname, index, list, collec, listOrCollec, val, val?.id, res, res?.id, property)\n\n  const onChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>) => void = (event) => {\n    const resForNewValue = getElementFromValue(event.target.value as string)\n    if (resForNewValue == null) {\n      throw \"getting value from SelectComponent that's not in the list of possible values \" + event.target.value\n    }\n    let newList\n    if (resForNewValue == noneSelected && canDel) {\n      newList = removeItemAtIndex(list, index)\n    } else {\n      newList = replaceItemAtIndex(list, index, resForNewValue)\n    }\n    setList(newList)\n  }\n\n  const classes = useStyles()\n\n  // does this work? to me using a \"setXyz\" in a condition must fail (should work encapsulated in a useEffect though)\n  if (possibleValues.length == 1 && list.length == 0) {\n    setList([possibleValues[0]])\n  }\n\n  const [error, setError] = useState(\"\")\n  const valueNotInList = !possibleValues.some((pv) => pv.id === val?.id)\n  useEffect(() => {\n    if (valueNotInList) {\n      //debug(\"not in list:\",property.path.sparqlString+\"_\"+selectIdx,res,val,possibleValues)\n      setError(i18n.t(\"error.select\", { val: val?.value }))\n      updateEntityState(EditedEntityState.Error, property.path?.sparqlString + \"_\" + selectIdx)\n    } else {\n      updateEntityState(EditedEntityState.Saved, property.path?.sparqlString + \"_\" + selectIdx)\n    }\n  }, [valueNotInList])\n\n  useEffect(() => {\n    return () => {\n      const inOtherEntity = !window.location.href.includes(\"/\" + entities[entity]?.subjectQname + \"/\")\n      if (!inOtherEntity)\n        updateEntityState(EditedEntityState.Saved, property.path?.sparqlString + \"_\" + selectIdx, false, !inOtherEntity)\n    }\n  }, [])\n\n  if (possibleValues.length > 1 || error) {\n  return <>\n      <div className=\"resSelect\" style={{ display: \"inline-flex\", alignItems: \"flex-end\" }}>\n        <TextField\n          select\n          className={\"selector mr-2\"}\n          value={val?.id}\n          key={\"textfield_\" + selectIdx + \"_\" + index}\n          style={{ padding: \"1px\", minWidth: \"250px\" }}\n          onChange={onChange}\n          label={[\n            propLabel, // ? propLabel : \"[unlabelled]\",\n            helpMessage ? (\n              <Tooltip key={\"tooltip_\" + selectIdx + \"_\" + index} title={helpMessage}>\n                <HelpIcon className=\"help\" />\n              </Tooltip>\n            ) : null,\n          ]}\n          {...(error\n            ? {\n                helperText: (\n                  <React.Fragment>\n                    <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n                    <i> {error}</i>\n                  </React.Fragment>\n                ),\n                error: true,\n              }\n            : {})}\n          {...(!editable ? { disabled: true } : {})}\n        >\n          {possibleValues.map((v, k) => {\n            //debug(\"possible:\",v,v.uri)\n            if (v instanceof RDFResourceWithLabel) {\n              const r = v as RDFResourceWithLabel\n              const label = ValueByLangToStrPrefLang(r.prefLabels, uiLitLang)\n              const span = <span>{label ? label : r.lname}</span>\n              return (\n                <MenuItem key={\"menu-uri_\" + selectIdx + r.id} value={r.id} className=\"withDescription\">\n                  {r.description ? (\n                    <Tooltip title={ValueByLangToStrPrefLang(r.description, uiLitLang)}>{span}</Tooltip>\n                  ) : \n                    span\n                  }\n                </MenuItem>\n              )\n            } else {\n              const l = v as LiteralWithId\n              return (\n                <MenuItem\n                  key={\"menu-lit_\" + selectIdx + l.id + \"_\" + index + \"_\" + k}\n                  value={l.id}\n                  className=\"withDescription\"\n                >\n                  {l.value}\n                </MenuItem>\n              )\n            }\n          })}\n          {valueNotInList && (\n            <MenuItem\n              key={\"extra-val-id\"}\n              value={val?.id}\n              className=\"withDescription\"\n              style={{ color: \"red\" }}\n              disabled\n            >\n              {val?.value}\n            </MenuItem>\n          )}\n        </TextField>\n        <div className=\"hoverPart\">\n          {canDel && (\n            <button className=\"btn btn-link mx-0 px-0 py-0\" onClick={deleteItem}>\n              <RemoveIcon />\n            </button>\n          )}\n          {create}\n        </div>\n      </div>\n      </>\n    }\n    return <></>\n}\n\nexport default ValueList\n","import React, { useState, FC } from \"react\"\nimport { RDFResource, Subject, LiteralWithId, ObjectType } from \"../helpers/rdf/types\"\nimport { PropertyShape, NodeShape } from \"../helpers/rdf/shapes\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { uiLangState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport { atom, useRecoilState, atomFamily } from \"recoil\"\nimport ValueList from \"./ValueList\"\nimport * as rdf from \"rdflib\"\n\nconst debug = require(\"debug\")(\"rde:entity:property\")\n\nconst PropertyContainer: FC<{\n  property: PropertyShape\n  subject: Subject\n  embedded?: boolean\n  force?: boolean\n  editable: boolean\n  owner?: Subject\n  topEntity?: Subject\n  shape: NodeShape\n  siblingsPath?: string,\n  config: RDEConfig\n}> = ({ property, subject, embedded, force, editable, owner, topEntity, shape, siblingsPath, config }) => {\n  const objectType = property.objectType\n\n  //debug(\"propertyCtn:\", property.qname, property, subject.qname, subject, siblingsPath)\n\n  const [css, setCss] = useState(\"\")\n\n  const setCssClass = (txt: string, add = true) => {\n    if (add) {\n      if (!css.includes(txt)) setCss(css + txt + \" \")\n    } else {\n      if (css.includes(txt)) setCss(css.replace(new RegExp(txt), \"\"))\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div role=\"main\" {...(css ? { className: css } : {})}>\n        <section className=\"album\">\n          <div\n            className={\"container\" + (embedded ? \" px-0\" : \"\") + \" editable-\" + editable}\n            style={{ border: \"dashed 1px none\" }}\n          >\n            <ValueList\n              subject={subject}\n              property={property}\n              embedded={embedded}\n              force={force}\n              editable={editable}\n              {...(owner ? { owner } : {})}\n              {...(topEntity ? { topEntity } : {})}\n              shape={shape}\n              siblingsPath={siblingsPath}\n              setCssClass={setCssClass}\n              config={config}\n            />\n          </div>\n        </section>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default PropertyContainer\n","import React, { useState, FC, ReactElement, useRef, useMemo, useCallback, useEffect } from \"react\"\nimport PropertyContainer from \"./PropertyContainer\"\nimport { RDFResource, Subject, errors, LiteralWithId } from \"../helpers/rdf/types\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { PropertyGroup, PropertyShape, NodeShape } from \"../helpers/rdf/shapes\"\nimport { uiLangState, uiEditState, uiNavState, uiGroupState, initListAtom } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { ErrorIcon } from \"../routes/layout/icons\"\nimport { atom, useRecoilState, useRecoilValue } from \"recoil\"\nimport { OtherButton } from \"./ValueList\"\nimport i18n from \"i18next\"\nimport { MapContainer, LayersControl, TileLayer, Popup, Marker, useMapEvents } from \"react-leaflet\"\nimport ReactLeafletGoogleLayer from \"react-leaflet-google-layer\"\nimport { GeoSearchControl, OpenStreetMapProvider, GoogleProvider } from \"leaflet-geosearch\"\n\nimport L from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport \"leaflet-geosearch/dist/geosearch.css\"\n\nconst debug = require(\"debug\")(\"rde:entity:propertygroup\")\n\nconst redIcon = new L.Icon({\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n  iconSize: [25, 41], // eslint-disable-line no-magic-numbers\n  iconAnchor: [12, 41], // eslint-disable-line no-magic-numbers\n  popupAnchor: [1, -34], // eslint-disable-line no-magic-numbers\n  shadowSize: [41, 41], // eslint-disable-line no-magic-numbers\n})\n\nfunction DraggableMarker({ pos, icon, setCoords }: {pos: L.LatLng, icon: L.Icon, setCoords: (val: L.LatLng) => void}) {\n  const [position, setPosition] = useState<L.LatLng>(pos)\n  const markerRef = useRef<any>(null)\n  const eventHandlers = useMemo(\n    () => ({\n      dragend() {\n        const marker = markerRef.current\n        if (marker != null) {\n          setPosition(marker.getLatLng())\n          setCoords(marker.getLatLng())\n        }\n      },\n    }),\n    []\n  )\n\n  //debug(\"mark:\",markerRef,pos)\n  useEffect(() => {\n    if (markerRef.current && (markerRef.current.lat != pos.lat || markerRef.current.lng != pos.lng)) {\n      markerRef.current.setLatLng(pos)\n    }\n  })\n\n  return (\n    <Marker draggable={true} eventHandlers={eventHandlers} position={position} icon={icon} ref={markerRef}></Marker>\n  )\n}\n\nconst MapEventHandler = ({ coords, redraw, setCoords, config }: { coords: L.LatLng, \n    redraw: boolean, setCoords: (val: L.LatLng) => void, config: RDEConfig}) => {\n  const map = useMapEvents({\n    click: (ev) => {\n      debug(\"click:\", ev)\n      setCoords(ev.latlng)\n    },\n  })\n\n  useEffect(() => {\n    map.setView(coords, map.getZoom())\n  })\n\n  useEffect(() => {\n    const provider = config.googleMapsAPIKey ? new GoogleProvider({ apiKey: config.googleMapsAPIKey }) : new OpenStreetMapProvider()\n\n    const searchControl = GeoSearchControl({\n      provider,\n      showPopUp: false,\n      showMarker: false,\n    })\n    map.addControl(searchControl)\n    map.on(\"geosearch/showlocation\", (params) => {\n      //debug(\"found\",params)\n\n      // fix for first click not triggering marker event\n      const elem:HTMLElement|null = document.querySelector(\".leaflet-container\")\n      if (elem) elem.click()\n    })\n\n    //return () => \n    map.removeControl(searchControl)\n  }, [])\n\n  return null\n}\n\nconst PropertyGroupContainer: FC<{\n  group: PropertyGroup\n  subject: Subject\n  onGroupOpen: (e: React.MouseEvent, currentGroupName: string) => void\n  shape: NodeShape\n  GISatoms?: { lat: string; long: string }\n  config: RDEConfig\n}> = ({ group, subject, onGroupOpen, shape, GISatoms, config }) => {\n  const [uiLang] = useRecoilState(uiLangState)\n  const label = lang.ValueByLangToStrPrefLang(group.prefLabels, uiLang)\n  const [force, setForce] = useState(false)\n\n  //debug(\"propertyGroup:\", subject.qname, errors, group, subject)\n\n  const withDisplayPriority: PropertyShape[] = [],\n    withoutDisplayPriority: PropertyShape[] = []\n  const errorKeys = Object.keys(errors[subject.qname] ? errors[subject.qname] : {})\n  let hasError = false\n  group.properties.map((property) => {\n    //debug(\"target:\",property.qname,property.targetShape?.properties)\n    if (\n      !hasError && errorKeys.some((k) => k.includes(property.qname)) ||\n      property.targetShape?.properties.some((p) => errorKeys.some((k) => k.includes(p.qname)))\n    ) {\n      //debug(\"group with error:\",group.qname,property.qname)\n      hasError = true\n    }\n    if (\n      property.displayPriority &&\n      property.displayPriority >= 1\n    ) {\n      withDisplayPriority.push(property)\n    } else {\n      withoutDisplayPriority.push(property)\n    }\n  })\n  const hasExtra = withDisplayPriority.length > 0 // && isSimplePriority\n  const toggleExtra = () => {\n    setForce(!force)\n  }\n\n  //debug(\"prio:\",group.qname,group,withDisplayPriority,withoutDisplayPriority);\n\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n\n  const [lat, setLat] = useRecoilState(config.latProp ? subject.getAtomForProperty(config.latProp.uri) : initListAtom)\n  const [lng, setLng] = useRecoilState(config.lngProp ? subject.getAtomForProperty(config.lngProp.uri) : initListAtom)\n  const [redraw, setRedraw] = useState(false)\n  let coords: L.LatLng,\n    zoom = 5,\n    unset = false\n  //debug(\"coords:\", coords, lat, lon)\n  if (lat.length && lng.length && lat[0].value != \"\" && lat[0].value != \"\") coords = new L.LatLng(Number(lat[0].value), Number(lng[0].value))\n  else {\n    unset = true\n    coords = new L.LatLng(30, 0) //eslint-disable-line no-magic-numbers\n    zoom = 2 //eslint-disable-line no-magic-numbers\n  }\n\n  useEffect(() => {\n    //debug(\"update:\",lon,lat)\n    setRedraw(true)\n  }, [lng, lat])\n\n  const setCoords = (val: L.LatLng) => {\n    //debug(\"val:\",val)\n    setRedraw(false)\n    if (!isNaN(val.lat)) {\n      if (lat.length > 0 && lat[0] instanceof LiteralWithId)\n        setLat([lat[0].copyWithUpdatedValue(\"\" + val.lat)])\n      if (lat.length == 0)\n        setLat([new LiteralWithId(\"\" + val.lat)])\n    }\n    if (!isNaN(val.lng)) {\n      if (lng.length > 0 && lng[0] instanceof LiteralWithId)\n        setLng([lng[0].copyWithUpdatedValue(\"\" + val.lng)])\n      if (lng.length == 0)\n        setLng([new LiteralWithId(\"\" + val.lat)])\n    }\n  }\n\n  return (\n    <div\n      role=\"main\"\n      className={\"group \" + (hasError ? \"hasError\" : \"\")}\n      id={group.qname}\n      style={{ scrollMargin: \"90px\" }}\n    >\n      <section className=\"album\">\n        <div className=\"container col-lg-6 col-md-6 col-sm-12\" style={{ border: \"dashed 1px none\" }}>\n          <div\n            className={\n              \"row card my-2 pb-3\" + (edit === group.qname ? \" group-edit\" : \"\") + \" show-displayPriority-\" + force\n            }\n            onClick={(e: React.MouseEvent) => {\n              if (onGroupOpen && groupEd !== group.qname) onGroupOpen(e, groupEd)\n              setEdit(group.qname)\n              setGroupEd(group.qname)\n            }}\n          >\n            <p className=\"\">\n              {label}\n              {hasError && <ErrorIcon />}\n            </p>\n            {\n              //groupEd === group.qname && ( // WIP, good idea but breaks undo initialization\n              <>\n                <div className={group.properties.length <= 1 ? \"hidePropLabel\" : \"\"} style={{ fontSize: 0 }}>\n                  {withoutDisplayPriority.map((property, index) => (\n                    <PropertyContainer\n                      key={index}\n                      property={property}\n                      subject={subject}\n                      editable={property.readOnly !== true}\n                      shape={shape}\n                      config={config}\n                    />\n                  ))}\n                  {withDisplayPriority.map((property, index) => (\n                    <PropertyContainer\n                      key={index}\n                      property={property}\n                      subject={subject}\n                      force={force}\n                      editable={property.readOnly !== true}\n                      shape={shape}\n                      config={config}\n                    />\n                  ))}\n                  {\n                    config.gisPropertyGroup && group.uri === config.gisPropertyGroup.uri &&\n                    groupEd === group.qname && // to force updating map when switching between two place entities\n                    coords && ( // TODO: add a property in shape to enable this instead\n                      <div style={{ position: \"relative\", overflow: \"hidden\", marginTop: \"16px\" }}>\n                        <MapContainer style={{ width: \"100%\", height: \"400px\" }} zoom={zoom} center={coords}>\n                          <LayersControl position=\"topright\">\n                            {config.googleMapsAPIKey && (\n                              <>\n                                <LayersControl.BaseLayer checked name=\"Satellite+Roadmap\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"hybrid\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Satellite\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"satellite\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Roadmap\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"roadmap\" />\n                                </LayersControl.BaseLayer>\n                                <LayersControl.BaseLayer name=\"Terrain\">\n                                  <ReactLeafletGoogleLayer apiKey={config.googleMapsAPIKey} type=\"terrain\" />\n                                </LayersControl.BaseLayer>\n                              </>\n                            )}\n                            {!config.googleMapsAPIKey && (\n                              <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n                                <TileLayer url=\"https://{s}.tile.iosb.fraunhofer.de/tiles/osmde/{z}/{x}/{y}.png\" />\n                              </LayersControl.BaseLayer>\n                            )}\n                          </LayersControl>\n                          {!unset && <DraggableMarker pos={coords} icon={redIcon} setCoords={setCoords} />}\n                          <MapEventHandler coords={coords} redraw={redraw} setCoords={setCoords} config={config} />\n                        </MapContainer>\n                      </div>\n                    ) }\n                  {hasExtra && (\n                    <span className=\"toggle-btn  btn btn-rouge my-4\" onClick={toggleExtra}>\n                      <>{i18n.t(\"general.toggle\", { show: force ? i18n.t(\"general.hide\") : i18n.t(\"general.show\") })}</>\n                    </span>\n                  )}\n                </div>\n              </>\n            }\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default PropertyGroupContainer\n","import React, { useState, useEffect, useMemo, useLayoutEffect, useCallback, useRef } from \"react\"\nimport { ShapeFetcher, EntityFetcher, IFetchState } from \"../helpers/rdf/io\"\n//import { setDefaultPrefixes } from \"../helpers/rdf/ns\"\nimport { RDFResource, Subject, ExtRDFResourceWithLabel, LiteralWithId, Value, sameLanguage } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { PropertyShape, PropertyGroup } from \"../helpers/rdf/shapes\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"./EntitySelectorContainer\"\nimport PropertyGroupContainer from \"./PropertyGroupContainer\"\nimport {\n  reloadEntityState,\n  profileIdState,\n  userIdState,\n  uiLangState,\n  uiEditState,\n  uiUndosState,\n  noUndoRedo,\n  uiTabState,\n  uiNavState,\n  uiGroupState,\n  possiblePrefLabelsSelector,\n  initListAtom,\n  initMapAtom,\n  toCopySelector,\n  canPushPrefLabelGroupType,\n  canPushPrefLabelGroupsType\n} from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { atom, useRecoilState, useRecoilSnapshot, useRecoilValue, RecoilState } from \"recoil\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport * as rdf from \"rdflib\"\nimport qs from \"query-string\"\nimport * as ns from \"../helpers/rdf/ns\"\nimport { Navigate } from \"react-router-dom\"\nimport { HashLink as Link } from \"react-router-hash-link\"\nimport queryString from \"query-string\"\nimport { getParentPath, history } from \"../helpers/observer\"\nimport Button from \"@material-ui/core/Button\"\nimport { useLocation, useParams } from \"react-router\"\n\nconst debug = require(\"debug\")(\"rde:entity:edit\")\n\ninterface RDEPropsDoUpdate extends RDEProps {\n  subject: Subject\n  propertyQname: string\n  objectQname: string\n  index: number  \n}\n\nfunction replaceItemAtIndex(arr: [], index: number, newValue: Value) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\n}\n\nexport function EntityEditContainerMayUpdate(props: RDEProps) {\n\n  const params = useParams()\n  const location = useLocation()\n\n  const shapeQname = params.shapeQname\n  const entityQname = params.entityQname\n  const subjectQname = params.subjectQname\n  const propertyQname = params.propertyQname\n  const index = params.index\n  const subnodeQname = params.subnodeQname\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const snapshot = useRecoilSnapshot()\n  const [subject, setSubject] = useState<Subject | null>(null)\n\n  const { copy } = queryString.parse(location.search, { decode: false })\n\n  useEffect(() => {\n    const i = entities.findIndex((e) => e.subjectQname === subjectQname)\n    let subj\n    if (i === -1) return\n    if (subnodeQname) {\n      const pp = getParentPath(\n        ns.defaultPrefixMap.uriFromQname(subjectQname),\n        ns.defaultPrefixMap.uriFromQname(subnodeQname)\n      )\n      //debug(\"gPP:\", pp)\n      if (pp.length > 1 && i >= 0) {\n        const atom = entities[i].subject?.getAtomForProperty(pp[1])\n        if (!atom) {\n          setSubject(null)\n          return\n        }\n        subj = snapshot.getLoadable(atom).contents\n        if (Array.isArray(subj)) {\n          subj = subj.filter((s) => s.qname === subnodeQname)\n          if (subj.length) subj = subj[0]\n          else throw new Error(\"subnode not found: \" + subnodeQname)\n        }\n        //debug(\"atom:\", subj)\n        setSubject(subj)\n      }\n    } else {\n      subj = entities[i].subject\n      setSubject(subj)\n    }\n  }, [])\n\n  //debug(\"subj:\", subject, propertyQname, entityQname, index)\n\n  if (subject && propertyQname && entityQname && index) {\n    const propsForCall = { ...props, copy: copy }\n    return (\n      <EntityEditContainerDoUpdate\n        subject={subject}\n        propertyQname={propertyQname}\n        objectQname={entityQname}\n        index={Number(index)}\n        copy={copy}\n        {...props}\n      />\n    )\n  }\n  // TODO: add 'could not find subject' warning?\n  else if (subject != null) return <Navigate to={\"/edit/\" + entityQname + \"/\" + shapeQname} />\n  else return <div></div>\n}\n\nfunction EntityEditContainerDoUpdate(props: RDEPropsDoUpdate) {\n\n  const config = props.config\n  const params = useParams()\n\n  const shapeQname = params.shapeQname\n  const atom = props.subject.getAtomForProperty(ns.defaultPrefixMap.uriFromQname(props.propertyQname))\n  const [list, setList] = useRecoilState(atom)\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const i = entities.findIndex((e) => e.subjectQname === props.objectQname)\n  const subject = entities[i]?.subject\n\n  let copy: Record<string, Value[]> | null = null\n  if (props.copy && typeof props.copy === 'string') {\n    copy = props.copy.split(\";\").reduce((acc: Record<string, Value[]>, p: string): Record<string,Value[]> => {\n    const q = p.split(\",\")\n    const literals = q.slice(1).map((v: string) => {\n        const lit = decodeURIComponent(v).split(\"@\")\n        return new LiteralWithId(lit[0].replace(/(^\")|(\"$)/g, \"\"), lit[1], shapes.rdfLangString)\n      })\n    return { ...acc, [q[0]]: literals }\n    }, {})\n  }\n\n  //debug(\"copy:\",copy,props.copy)\n\n  const [getProp, setProp] = useRecoilState(\n        toCopySelector({\n          list: subject && copy ? Object.keys(copy).map((p: string) => ({\n            property: p,\n            atom: subject.getAtomForProperty(config.prefixMap.uriFromQname(p)),\n          } )) : undefined,\n        })\n  )\n\n  debug(\"LIST:\", list, atom, props.copy, copy)\n\n  useEffect(() => {\n    if (copy) {\n      // we have to delay this a bit for value to be propagated to EntityGraph and be exported to ttl when saving\n      setTimeout(() => {\n        if (copy) {\n          const p = []\n          for (const k of Object.keys(copy)) {\n            p.push({ k, val: copy[k] })\n          }\n          setProp(p)\n        }\n       }, 1150) // eslint-disable-line no-magic-numbers\n    }\n\n    const newObject = new ExtRDFResourceWithLabel(ns.defaultPrefixMap.uriFromQname(props.objectQname), {}, {})\n    // DONE: must also give set index in url\n    const newList = replaceItemAtIndex(list as [], props.index, newObject)\n    setList(newList)\n  }, [])\n\n  return <Navigate to={\"/edit/\" + props.objectQname + \"/\" + shapeQname} />\n}\n\nfunction EntityEditContainer(props: RDEProps) {\n\n  const config = props.config\n  const params = useParams()\n\n  //const [shapeQname, setShapeQname] = useState(props.match.params.shapeQname)\n  //const [entityQname, setEntityQname] = useState(props.match.params.entityQname)\n  const shapeQname = params.shapeQname || \"\"\n  const entityQname = params.entityQname || \"\"\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const [uiLang] = useRecoilState(uiLangState)\n  const [edit, setEdit] = useRecoilState(uiEditState)\n  const [groupEd, setGroupEd] = useRecoilState(uiGroupState)\n\n  const [undos, setUndos] = useRecoilState(uiUndosState)\n\n  //const [nav, setNav] = useRecoilState(uiNavState)\n\n  const [profileId, setProfileId] = useRecoilState(profileIdState)\n  const [tab, setTab] = useRecoilState(uiTabState)\n\n  const entityObj = entities.filter(\n    (e) => e.subjectQname === entityQname || e.subjectQname === profileId && entityQname === \"tmp:user\"\n  )\n  const icon = config.iconFromEntity(entityObj.length ? entityObj[0] : null)\n\n  const { loadingState, shape } = ShapeFetcher(shapeQname, entityQname, config)\n\n  const canPushPrefLabelGroups: Record<string,canPushPrefLabelGroupType> | undefined = \n    shape?.groups.reduce((acc: Record<string,canPushPrefLabelGroupType>, \n        group: PropertyGroup): Record<string,canPushPrefLabelGroupType> => {\n    const props:Array<RecoilState<Value[]>|undefined> = group.properties\n      .filter((p: PropertyShape) => p.allowPushToTopLevelLabel)\n      .map((p: PropertyShape) => {\n        if (entityObj && entityObj[0] && entityObj[0].subject && p.path)\n          return entityObj[0].subject.getAtomForProperty(p.path.sparqlString)\n      })\n      // removes undefined values\n      .filter(a => a != undefined)\n    const subprops: Record<string,{atom: RecoilState<Subject[]>, allowPush: string[]}> = group.properties.reduce((accG, p) => {\n      const allowPush: (string|undefined)[]|undefined = p.targetShape?.properties\n        .filter((s: PropertyShape) => s.allowPushToTopLevelLabel)\n        .map((s: PropertyShape) => s.path?.sparqlString)\n      if (allowPush?.length && entityObj && entityObj[0] && entityObj[0].subject && p.path)\n        return {\n          ...accG,\n          [p.qname]: { atom: entityObj[0].subject.getAtomForProperty(p.path.sparqlString), allowPush },\n        }\n      return accG\n    }, {})\n    if (props?.length || Object.keys(subprops).length) \n      return { ...acc, [group.qname]: { props, subprops } } as Record<string,canPushPrefLabelGroupType>\n    return { ...acc } \n  }, {} as Record<string,canPushPrefLabelGroupType>)\n\n  const possiblePrefLabels = useRecoilValue(canPushPrefLabelGroups \n      ? possiblePrefLabelsSelector({ canPushPrefLabelGroups } as canPushPrefLabelGroupsType)\n      : initMapAtom)\n\n  let prefLabelAtom = entityObj[0]?.subject?.getAtomForProperty(ns.SKOS(\"prefLabel\").value)\n  if (!prefLabelAtom) prefLabelAtom = initListAtom\n  const [prefLabels, setPrefLabels] = useRecoilState(prefLabelAtom)\n\n  let altLabelAtom = entityObj[0]?.subject?.getAtomForProperty(ns.SKOS(\"altLabel\").value)\n  if (!altLabelAtom) altLabelAtom = initListAtom\n  const altLabels = useRecoilValue(altLabelAtom)\n\n  //debug(\"EntityEditContainer:\", JSON.stringify(props), entityQname, isAuthenticated, profileId)\n\n  useEffect(() => {\n    entities.map((e, i) => {\n      if (e.subjectQname === entityQname || e.subjectQname === profileId && entityQname === \"tmp:user\") {\n        if (tab != i) {\n          setTab(i)\n          return\n        }\n      }\n    })\n  }, [entities, profileId])\n\n  let init = 0\n  useEffect(() => {\n    if (entityQname === \"tmp:user\" && !profileId) return\n\n    const delay = 350\n    let n = -1 // is this used at all??\n    const entityUri = ns.defaultPrefixMap.uriFromQname(entityQname === \"tmp:user\" ? profileId : entityQname)\n\n    // wait for all data to be loaded then add flag in history\n    if (init) clearInterval(init)\n    init = window.setInterval(() => {\n      if (history[entityUri]) {\n        if (history[entityUri].some((h) => h[\"tmp:allValuesLoaded\"])) {\n          clearInterval(init)\n          //debug(\"(no init)\", entityUri, n, history[entityUri])\n        } else if (n === history[entityUri].length) {\n          clearInterval(init)\n          history[entityUri].push({ \"tmp:allValuesLoaded\": true })\n          //debug(\"init:\", entityUri, n, history[entityUri])\n          setUndos({ ...undos, [entityUri]: noUndoRedo })\n        } else {\n          n = history[entityUri].length\n        }\n      }\n    }, delay)\n  }, [entities, tab, profileId, entityQname])\n\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const save = useCallback(\n    (obj: Entity[]) => {\n      return new Promise(async (resolve) => {\n        //debug(\"saving?\",obj[0]?.subjectQname,obj[0]?.state,obj[0].alreadySaved)\n        if ([EditedEntityState.NeedsSaving, EditedEntityState.Error].includes(obj[0].state)) {\n          // save to localStorage\n          const defaultRef = new rdf.NamedNode(rdf.Store.defaultGraphURI)\n          const store = new rdf.Store()\n          ns.defaultPrefixMap.setDefaultPrefixes(store)\n          obj[0]?.subject?.graph.addNewValuestoStore(store)\n          //debug(store)\n          //debugStore(store)\n          rdf.serialize(defaultRef, store, undefined, \"text/turtle\", async function (err, str) {\n            if (err || !str) {\n              debug(err, store)\n              throw \"error when serializing\"\n            }\n            const shape = obj[0]?.shapeQname\n            config.setUserLocalEntity(\n              obj[0].subjectQname,\n              shape,\n              str,\n              false,\n              userId,\n              obj[0].etag,\n              obj[0].state === EditedEntityState.NeedsSaving\n            )\n            //debug(\"RESOLVED\")\n            resolve(true)\n          })\n        }\n      })\n    },\n    [entityQname, shapeQname, entityObj]\n  )\n\n  // trick to get current value when unmounting\n  // (see https://stackoverflow.com/questions/55139386/componentwillunmount-with-react-useeffect-hook)\n  const entityObjRef = useRef<Entity[]>(entityObj)\n\n  useEffect(() => {\n    // no luck for now\n    if (entityObjRef.current?.length && entityObj?.length) {\n      if (entityObjRef.current[0]?.subjectQname != entityObj[0]?.subjectQname) {\n        //debug(\"switched:\",entityObjRef.current[0].subjectQname, entityObj[0].subjectQname)\n        save(entityObjRef.current)\n      }\n    }\n  })\n\n  useEffect(() => {\n    return () => {\n      const fun = async () => {\n        if(entityObjRef.current) {\n          debug(\"unmounting /edit\", entityObjRef.current)\n          await save(entityObjRef.current)\n        }\n      }\n      fun()\n    }\n  }, [])\n\n  const [warning, setWarning] = useState(() => (event: BeforeUnloadEvent) => {}) // eslint-disable-line @typescript-eslint/no-empty-function\n  useEffect(() => {\n    const willSave: Entity[] = []\n    for (const e of entities) {\n      if (e.state !== EditedEntityState.Saved && e.state !== EditedEntityState.NotLoaded) {\n        willSave.push(e)\n        //break // DAMN IT\n      }\n    }\n    //debug(\"wS:\",willSave,entities)\n    if (willSave.length) {\n      window.removeEventListener(\"beforeunload\", warning, true)\n      setWarning(() => async (event: BeforeUnloadEvent) => {\n        //debug(\"unload?\",willSave)\n        for (const w of willSave) {\n          await save([w])\n        }\n        // Cancel the event as stated by the standard.\n        event.preventDefault()\n        // Chrome requires returnValue to be set.\n        event.returnValue = \"\"\n      })\n    } else {\n      window.removeEventListener(\"beforeunload\", warning, true)\n      setWarning(() => (event: BeforeUnloadEvent) => {}) // eslint-disable-line @typescript-eslint/no-empty-function\n    }\n  }, [entities])\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", warning, true)\n  }, [warning])\n\n  //debug(\"warning:\",warning)\n\n  // refactoring needed\n  //if (entityQname === \"tmp:user\" && !auth0.isAuthenticated && userId != demoUserId) return <span>unauthorized</span>\n\n  // TODO: update highlighted tab\n\n  const { entityLoadingState, entity } = EntityFetcher(entityQname, shapeQname, config)\n\n  // TODO: check that shape can be properly applied to entity\n\n  if (loadingState.status === \"error\" || entityLoadingState.status === \"error\") {\n    return (\n      <p className=\"text-center text-muted\">\n        <NotFoundIcon className=\"icon mr-2\" />\n        {loadingState.error}\n\n        {entityLoadingState.error}\n      </p>\n    )\n  }\n\n  if (loadingState.status === \"fetching\" || entityLoadingState.status === \"fetching\" || !entity || entity.isEmpty()) {\n    return (\n      <>\n      <div>\n        <div><>{i18n.t(\"types.loading\")}</></div>\n      </div>\n      </>\n    )\n  }\n\n  if (!shape || !entity)\n    return (\n      <>\n      <div>\n        <div><>{i18n.t(\"types.loading\")}</></div>\n      </div>\n      </>\n    )\n\n  //debug(\"entity:\", entity, shape)\n\n  const shapeLabel = lang.ValueByLangToStrPrefLang(shape.targetClassPrefLabels, uiLang)\n\n  const checkPushNameAsPrefLabel = (e: React.MouseEvent, currentGroupName: string) => {\n    //debug(\"closing: \", currentGroupName, possiblePrefLabels[currentGroupName])\n    if (possiblePrefLabels && possiblePrefLabels[currentGroupName]?.length) {\n      //debug(\"names:\",personNamesLabels,prefLabels)\n      const newLabels = [...prefLabels]\n      for (const n of possiblePrefLabels[currentGroupName]) {\n        if (\n          n instanceof LiteralWithId &&\n          !newLabels.some((l) => l instanceof LiteralWithId && sameLanguage(l.language, n.language)) &&\n          !altLabels.some((l) => l instanceof LiteralWithId && sameLanguage(l.language, n.language))\n        )\n          newLabels.push(n)\n      }\n      if (newLabels.length != prefLabels.length) setPrefLabels(newLabels)\n    }\n    setEdit(\"\")\n    setGroupEd(\"\")\n    e.stopPropagation()\n  }\n\n  //debug(\"eO:\",entityObj)\n\n  // refactoring needed\n  // const BUDAlink = config.LIBRARY_URL + \"/show/\" + entity.qname + \"?v=\" + entityObj[0]?.alreadySaved\n\n  const previewLink = config.getPreviewLink(entity.node)\n\n  return (\n    <React.Fragment>\n      <div role=\"main\" className=\"pt-4\" style={{ textAlign: \"center\" }}>\n        <div className={\"header \" + icon?.toLowerCase()} {...(!icon ? { \"data-shape\": shape.qname } : {})}>\n          <div className=\"shape-icon\"></div>\n          <div>\n            <h1>{shapeLabel}</h1>\n            <span>{entity.qname}</span>\n            {previewLink && (\n              <div className=\"buda-link\">\n                <a\n                  className={\"btn-rouge\" + (!entityObj[0]?.etag ? \" disabled\" : \"\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  {...(!entityObj[0]?.etag ? { title: i18n.t(\"error.preview\") } : { href: previewLink })}\n                >\n                  <>{i18n.t(\"general.preview\")}</>\n                </a>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <div role=\"navigation\" className=\"innerNav\">\n        <p className=\"text-uppercase small my-2\"><>{i18n.t(\"home.nav\")}</></p>\n        {shape.groups.map((group, index) => {\n          const label = lang.ValueByLangToStrPrefLang(group.prefLabels, uiLang)\n          return (\n            <Link\n              key={group.qname}\n              to={\"#\" + group.qname}\n              // eslint-disable-next-line no-magic-numbers\n              onClick={() => {\n                setGroupEd(group.qname)\n                setEdit(group.qname)\n              }}\n              className={groupEd === group.qname ? \"on\" : \"\"}\n            >\n              <span>{label}</span>\n            </Link>\n          )\n        })}\n      </div>\n      <div>\n        {shape.groups.map((group, index) => (\n          <>\n            {groupEd === group.qname && (\n              <div className=\"group-edit-BG\" onClick={(e: React.MouseEvent) => checkPushNameAsPrefLabel(e, group.qname)}></div>\n            )}\n            <PropertyGroupContainer\n              key={group.uri}\n              group={group}\n              subject={entity}\n              onGroupOpen={checkPushNameAsPrefLabel}\n              shape={shape}\n              config={config}\n            />\n          </>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default EntityEditContainer\n","import { useState, useEffect } from \"react\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { RDFResourceWithLabel } from \"../helpers/rdf/types\"\nimport { entitiesAtom, EditedEntityState, defaultEntityLabelAtom } from \"./EntitySelectorContainer\"\nimport { uiDisabledTabsState, uiLangState, uiTabState, RIDprefixState, userIdState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { useRecoilState } from \"recoil\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport { BrowserRouter as Router, Route, Link, useNavigate } from \"react-router-dom\"\nimport React, { ChangeEvent } from \"react\"\nimport qs from \"query-string\"\nimport i18n from \"i18next\"\nimport { Trans } from \"react-i18next\"\nimport { TextField, MenuItem } from \"@material-ui/core\"\n\nconst debug = require(\"debug\")(\"rde:entity:newentity\")\n\nfunction NewEntityContainer(props: RDEProps) {\n\n  const config = props.config || {}\n\n  const [uiLang] = useRecoilState(uiLangState)\n  const [RID, setRID] = useState(\"\")\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [userId, setUserId] = useRecoilState(userIdState)\n\n  const navigate = useNavigate()\n\n  const disabled = !RIDprefix\n\n  // otherwise we want the user to select the appropriate shape\n\n  // \"here is a list of all possible shapes\" \"to choose from in order to create a new entity\":\n  return (\n    <div className=\"new-fix\">\n      <div>\n        <b>New entity:</b>\n        <span>\n          <TextField\n            {...(disabled ? { disabled: true } : {})}\n            select\n            //label=\"Choose a shape\"\n            helperText={\"List of all possible shapes\"}\n            id=\"shapeSelec\"\n            className=\"shapeSelector\"\n            value={ \n              config.possibleShapeRefs[0].qname\n            }\n            style={{ marginTop: \"3px\", marginLeft: \"10px\" }}\n          >\n            {config.possibleShapeRefs.map((shape: RDFResourceWithLabel, index: number) => (\n              <MenuItem key={shape.qname} value={shape.qname} style={{ padding: 0 }}>\n                <Link to={\"/new/\" + shape.qname} className=\"popLink\">\n                  {lang.ValueByLangToStrPrefLang(shape.prefLabels, uiLang)}\n                </Link>\n              </MenuItem>\n            ))}\n          </TextField>\n          {disabled && RIDprefix === \"\" && (\n            <span className=\"pl-2\" style={{ fontStyle: \"italic\", fontWeight: 500, color: \"#d73449\", fontSize: 14 }}>\n              <Trans i18nKey=\"error.prefix\" components={{ res: <Link className=\"profile-link\" to=\"/profile\" /> }} />\n            </span>\n          )}\n        </span>\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n        <div style={{ marginRight: \"10px\" }}>\n          <b>Load entity:</b>{\" \"}\n        </div>\n        <div>\n          <TextField\n            style={{ width: \"100%\" }}\n            value={RID}\n            InputLabelProps={{ shrink: true }}\n            onChange={(e) => setRID(e.target.value)}\n            helperText={\"select an entity to load here by its RID\"}\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") navigate(\"/edit/bdr:\" + RID.replace(/^bdr:/, \"\").toUpperCase())\n            }}\n          />\n        </div>\n        <div>\n          <Link\n            to={\"/edit/bdr:\" + RID.replace(/^bdr:/, \"\").toUpperCase()}\n            className={\"btn btn-sm btn-outline-primary py-3 ml-2 lookup btn-rouge \" + (!RID ? \"disabled\" : \"\")}\n            style={{ boxShadow: \"none\", alignSelf: \"center\", marginBottom: \"15px\" }}\n          >\n            <>{i18n.t(\"search.open\")}</>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NewEntityContainer\n","import React, { useEffect, useState } from \"react\"\nimport { Navigate } from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\n\nconst debug = require(\"debug\")(\"rde:entity:entitycreation\")\n\nexport interface DialogProps {\n  // TODO: document a bit\n  open: any\n  shaped: string\n  newUrl: string\n  editUrl: string\n  named: string\n}\n\nexport function Dialog422(props: DialogProps) {\n  const [open, setOpen] = React.useState(props.open)\n  const shape = props.shaped.split(\":\")[1]?.replace(/Shape$/, \"\")\n  const [createNew, setCreateNew] = useState(false)\n  const [loadNamed, setLoadNamed] = useState(false)\n\n  debug(\"422:\", props)\n\n  const handleLoad = () => {\n    setLoadNamed(true)\n    setOpen(false)\n  }\n\n  const handleNew = () => {\n    setCreateNew(true)\n    setOpen(false)\n  }\n\n  if (createNew) return <Navigate to={props.newUrl} />\n  else if (loadNamed) return <Navigate to={props.editUrl} />\n  else\n    return (\n      <div>\n        <Dialog open={open}>\n          <DialogTitle>\n            {shape} {props.named} has already been created\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Do you want to use it, or to create a new {shape} with another RID instead?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions style={{ justifyContent: \"space-around\" }}>\n            <Button className=\"btn-rouge\" onClick={handleLoad} color=\"primary\">\n              Use&nbsp;<span style={{ textTransform: \"none\" }}>{props.named}</span>\n            </Button>\n            <Button className=\"btn-rouge\" onClick={handleNew} color=\"primary\">\n              Create&nbsp;<span style={{ textTransform: \"none\" }}>{shape}</span>&nbsp;with another RID\n            </Button>\n          </DialogActions>\n          <br />\n        </Dialog>\n      </div>\n    )\n}\n","//import { EntityCreator } from \"../helpers/rdf/construct\"\nimport { ShapeFetcher, EntityFetcher } from \"../helpers/rdf/io\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport { RDFResourceWithLabel, Subject, EntityGraph } from \"../helpers/rdf/types\"\nimport { entitiesAtom, EditedEntityState } from \"./EntitySelectorContainer\"\nimport { uiLangState, userIdState, RIDprefixState, uiTabState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { useRecoilState } from \"recoil\"\nimport { Dialog422 } from \"./Dialog\"\nimport { BrowserRouter as Router, Routes, Route, Link, Navigate, useParams, useNavigate, useLocation } from \"react-router-dom\"\nimport React, { useEffect, useState } from \"react\"\nimport qs from \"query-string\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport queryString from \"query-string\"\nimport Button from \"@material-ui/core/Button\"\nimport { RDEProps } from \"../helpers/editor_props\"\nimport * as rdf from \"rdflib\"\n\nconst debug = require(\"debug\")(\"rde:entity:entitycreation\")\n\nexport function EntityCreationContainer(props: RDEProps) {\n  \n  const config = props.config\n  const params = useParams()\n\n  const subjectQname = params.subjectQname\n  const shapeQname = params.shapeQname || \"\"\n  const propertyQname = params.propertyQname\n  const index = params.index\n  const subnodeQname = params.subnodeQname\n\n  // entityQname is an ID desired by the user. In that case we must:\n  // - if an entity with the same qname is already open in the editor, just redirect to it\n  // - else call EntityCreator\n  const entityQname = params.entityQname || \"\"\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [uiTab, setUiTab] = useRecoilState(uiTabState)\n\n  const location = useLocation()\n\n  const unmounting = { val: false }\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ecc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  if (RIDprefix == \"\") return <Navigate to=\"/new\" />\n\n  const shapeNode = rdf.sym(config.prefixMap.uriFromQname(shapeQname))\n  const entityNode = rdf.sym(config.prefixMap.uriFromQname(entityQname))\n\n  const { entityLoadingState, entity } = unmounting.val\n    ? { entityLoadingState: { status: \"idle\", error: undefined }, entity: null }\n    : config.entityCreator(shapeNode, entityNode, unmounting)\n\n  debug(\"new:\", entityLoadingState, entity, entityQname, entity?.qname, shapeQname)\n\n  // TODO: if EntityCreator throws a 422 exception (the entity already exists),\n  // we must give a choice to the user:\n  //    * open the existing entity\n  //    * create an entity with a different id, in which case we call reserveLname again\n  if (entityLoadingState.error === \"422\" && entity) {\n    // eslint-disable-line no-magic-numbers\n\n    const editUrl =\n      subjectQname && propertyQname && index != undefined\n        ? \"/edit/\" +\n          entityQname +\n          \"/\" +\n          shapeQname +\n          \"/\" +\n          subjectQname +\n          \"/\" +\n          propertyQname +\n          \"/\" +\n          index +\n          (subnodeQname ? \"/\" + subnodeQname : \"\") +\n          (props.copy ? \"?copy=\" + props.copy : \"\")\n        : \"/edit/\" + (entityQname ? entityQname : entity.qname) + \"/\" + shapeQname\n\n    const newUrl = location.pathname.replace(/\\/named\\/.*/, \"\") + location.search\n\n    return <Dialog422 open={true} shaped={shapeQname} named={entityQname} editUrl={editUrl} newUrl={newUrl} />\n  } else if (entity) {\n    if (subjectQname && propertyQname && index != undefined)\n      return (\n        <Navigate\n          to={\n            \"/edit/\" +\n            (entityQname ? entityQname : entity.qname) +\n            \"/\" +\n            shapeQname +\n            \"/\" +\n            subjectQname +\n            \"/\" +\n            propertyQname +\n            \"/\" +\n            index +\n            (subnodeQname ? \"/\" + subnodeQname : \"\") +\n            (props.copy ? \"?copy=\" + props.copy : \"\")\n          }\n        />\n      )\n    else return <Navigate to={\"/edit/\" + (entityQname ? entityQname : entity.qname) + \"/\" + shapeQname} />\n  }\n  if (entityLoadingState.status === \"error\") {\n    return (\n      <p className=\"text-center text-muted\">\n        <NotFoundIcon className=\"icon mr-2\" />\n        {entityLoadingState.error}\n      </p>\n    )\n  }\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.creating\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport function EntityCreationContainerAlreadyOpen(props: RDEProps) {\n\n  const params = useParams()\n\n  const subjectQname = params.subjectQname\n  const shapeQname = params.shapeQname\n  const propertyQname = params.propertyQname\n  const index = params.index\n  const subnodeQname = params.subnodeQname\n\n  // entityQname is an ID desired by the user. In that case we must:\n  // - if an entity with the same qname is already open in the editor, just redirect to it\n  // - else call EntityCreator\n  const entityQname = params.entityQname\n  const [userId, setUserId] = useRecoilState(userIdState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const [RIDprefix, setRIDprefix] = useRecoilState(RIDprefixState)\n  const [uiTab, setUiTab] = useRecoilState(uiTabState)\n\n  const unmounting = { val: false }\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:ecc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  if (subjectQname && propertyQname && index != undefined)\n    return (\n      <Navigate\n        to={\n          \"/edit/\" +\n          entityQname +\n          \"/\" +\n          shapeQname +\n          \"/\" +\n          subjectQname +\n          \"/\" +\n          propertyQname +\n          \"/\" +\n          index +\n          (subnodeQname ? \"/\" + subnodeQname : \"\") +\n          (props.copy ? \"?copy=\" + props.copy : \"\")\n        }\n      />\n    )\n  else return <Navigate to={\"/edit/\" + entityQname + \"/\" + shapeQname} />\n\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.loading\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport function EntityCreationContainerRoute(props: RDEProps) {\n\n  const params = useParams()\n\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const i = entities.findIndex((e) => e.subjectQname === params.entityQname)\n  const theEntity = entities[i]\n\n  const location = useLocation()\n\n  const { copy } = queryString.parse(location.search, { decode: false })\n\n  //debug(\"search/copy:\", copy)\n\n  if (theEntity) return <EntityCreationContainerAlreadyOpen {...props} copy={copy} />\n  else return <EntityCreationContainer {...props} copy={copy} />\n}\n\nexport default EntityCreationContainer\n","import React, { useState, useEffect, useMemo } from \"react\"\nimport { ShapeFetcher, EntityFetcher } from \"../helpers/rdf/io\"\nimport { RDFResource, Subject, RDFResourceWithLabel } from \"../helpers/rdf/types\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport NotFoundIcon from \"@material-ui/icons/BrokenImage\"\nimport i18n from \"i18next\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"./EntitySelectorContainer\"\nimport PropertyGroupContainer from \"./PropertyGroupContainer\"\nimport { uiLangState } from \"../atoms/common\"\nimport * as lang from \"../helpers/lang\"\nimport { atom, useRecoilState } from \"recoil\"\nimport { RDEProps, IdTypeParams } from \"../helpers/editor_props\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport Button from \"@material-ui/core/Button\"\nimport * as rdf from \"rdflib\"\nimport { BrowserRouter as Router, Routes, Route, Link, Navigate, useParams, useNavigate } from \"react-router-dom\"\nimport { TextField, MenuItem } from \"@material-ui/core\"\n\nconst debug = require(\"debug\")(\"rde:entity:shape\")\n\nfunction EntityShapeChooserContainer(props: RDEProps) {\n\n  const config = props.config\n  const params = useParams()\n  const navigate = useNavigate()\n\n  const [entityQname, setEntityQname] = useState(params.entityQname || \"\")\n  const [uiLang] = useRecoilState(uiLangState)\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n\n  const unmounting = { val: false }\n\n  useEffect(() => {\n    return () => {\n      //debug(\"unm:esc\")\n      unmounting.val = true\n    }\n  }, [])\n\n  useEffect(() => {\n    //debug(\"params\", props.match.params.entityQname)\n    if (unmounting.val) return\n    else if (params.entityQname) setEntityQname(params.entityQname)\n  }, [params])\n\n  // here we create the entity in the list if it's not there yet:\n  const entityFromList = entities.find((e) => e.subjectQname === entityQname)\n  if (entityFromList && entityFromList.shapeQname) {\n    const shapeQname = entityFromList.shapeQname\n    navigate(\"/edit/\" + entityQname + \"/\" + shapeQname, { replace: true })\n    return (\n      <div>\n        <div><>{i18n.t(\"types.redirect\")}</></div>\n      </div>\n    )\n  }\n  const { entityLoadingState, entity } = EntityFetcher(entityQname, \"\", config, unmounting)\n\n  if (entity) {\n    const possibleShapes = config.possibleShapeRefsForEntity(entity.node)\n    if (entityLoadingState.status === \"fetching\") {\n      return (\n        <div>\n          <div><>{i18n.t(\"types.loading\")}</></div>\n        </div>\n      )\n    } else if (entityLoadingState.error === \"not found\") {\n      return (\n        <div className=\"error\">\n          <div>\n            <span><>{i18n.t(\"error.exist\", { id: entityQname })}</></span>\n            <br />\n            <Link style={{ fontWeight: 700 }} to=\"/new\">\n              <>{i18n.t(\"error.redirect\")}</>\n            </Link>\n          </div>\n        </div>\n      )\n    } else if (!possibleShapes) {\n      debug(\"cannot find\", entity, entityLoadingState)\n      return (\n        <div className=\"error\">\n          <div>\n            <span><>{i18n.t(\"error.shape\", { id: entityQname })}</></span>\n            <br />\n            <Link style={{ fontWeight: 700 }} to=\"/new\">\n              <>{i18n.t(\"error.redirect\")}</>\n            </Link>\n          </div>\n        </div>\n      )\n    }\n    if (possibleShapes.length > 1) {\n      const handleClick = (event: React.MouseEvent<HTMLAnchorElement>, shape: RDFResourceWithLabel) => {\n        const newEntities = [...entities]\n        for (const i in newEntities) {\n          const e = newEntities[i]\n          if (e.subjectQname === entityQname) {\n            newEntities[i] = { ...e, shapeQname: shape.qname }\n            setEntities(newEntities)\n            break\n          }\n        }\n      }\n\n      return (\n        <div className=\"centered-ctn\">\n          <div>\n            <b>Choose a shape:</b>\n            <TextField\n              select\n              helperText={\"List of all possible shapes\"}\n              id=\"shapeSelec\"\n              className=\"shapeSelector\"\n              value={config.possibleShapeRefs[0].qname}\n              style={{ marginTop: \"3px\", marginLeft: \"10px\" }}\n            >\n              { config.possibleShapeRefs.map((shape: RDFResourceWithLabel, index: number) => (\n                <MenuItem key={shape.qname} value={shape.qname} style={{ padding: 0 }}>\n                  <Link\n                    to={\"/edit/\" + entityQname + \"/\" + shape.qname}\n                    className=\"popLink\"\n                    onClick={(ev) => handleClick(ev, shape)}\n                  >\n                    {lang.ValueByLangToStrPrefLang(shape.prefLabels, uiLang)}\n                  </Link>\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n        </div>\n      )\n    } else {\n      return <Navigate to={\"/edit/\" + entityQname + \"/\" + possibleShapes[0].qname} />\n    }\n  }\n\n  return (\n    <>\n    <div>\n      <div><>{i18n.t(\"types.loading\")}</></div>\n    </div>\n    </>\n  )\n}\n\nexport default EntityShapeChooserContainer\n","import React, { useEffect, useState, FC, ChangeEvent, useRef, useLayoutEffect, useCallback } from \"react\"\nimport { useRecoilState, useSetRecoilState, atomFamily, useRecoilValue } from \"recoil\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { TextField, MenuItem } from \"@material-ui/core\"\nimport i18n from \"i18next\"\nimport { useNavigate, Link } from \"react-router-dom\"\nimport * as rdf from \"rdflib\"\nimport * as shapes from \"../helpers/rdf/shapes\"\nimport * as lang from \"../helpers/lang\"\nimport RDEConfig from \"../helpers/rde_config\"\nimport { uiLangState, uiLitLangState, uiTabState, initListAtom, initkvAtom, initMapAtom, toCopySelector } from \"../atoms/common\"\nimport {\n  RDFResource,\n  ExtRDFResourceWithLabel,\n  RDFResourceWithLabel,\n  Subject,\n  Value,\n  LiteralWithId,\n} from \"../helpers/rdf/types\"\nimport { PropertyShape, NodeShape } from \"../helpers/rdf/shapes\"\nimport {\n  SearchIcon,\n  LaunchIcon,\n  InfoIcon,\n  InfoOutlinedIcon,\n  ErrorIcon,\n  EditIcon,\n  LookupIcon,\n  CloseIcon,\n  ContentPasteIcon,\n} from \"../routes/layout/icons\"\nimport { entitiesAtom, EditedEntityState, Entity } from \"./EntitySelectorContainer\"\nimport { LangSelect } from \"./ValueList\"\nimport * as ns from \"../helpers/rdf/ns\"\n\nconst debug = require(\"debug\")(\"rde:atom:event:RS\")\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiFormHelperText-root\": {\n      color: theme.palette.secondary.main,\n    },\n  },\n}))\n\ntype valueLang = {\n  \"@value\": string\n  \"@language\": string\n}\n\ntype dateDate = {\n  onYear: string\n  notBefore: string\n  notAfter: string\n}\n\ntype messagePayload = {\n  \"tmp:propid\": string\n  \"@id\": string\n  \"skos:prefLabel\"?: Array<valueLang>\n  \"skos:altLabel\"?: Array<valueLang>\n  \"tmp:keyword\": valueLang\n  \"tmp:notFound\": boolean\n  \"tmp:otherData\": Record<string, string | string[]>\n}\n\nconst BDR_uri = \"http://purl.bdrc.io/resource/\"\n\n// This is an example implementation of a resource selector\n// the code should be made a bit more generic so that\n// it can be reused in other resource selectors\n\nconst BUDAResourceSelector: FC<{\n  value: ExtRDFResourceWithLabel\n  onChange: (value: ExtRDFResourceWithLabel, idx: number, removeFirst: boolean | undefined) => void\n  property: PropertyShape\n  idx: number\n  exists: (uri: string) => boolean\n  subject: Subject\n  editable: boolean\n  owner?: Subject\n  title: string\n  globalError: string\n  updateEntityState: (status: EditedEntityState, id: string, removingFacet?: boolean, forceRemove?: boolean) => void\n  shape: NodeShape,\n  config: RDEConfig\n}> = ({\n  value,\n  onChange,\n  property,\n  idx,\n  exists,\n  subject,\n  editable,\n  owner,\n  title,\n  globalError,\n  updateEntityState,\n  shape,\n  config\n}) => {\n  const classes = useStyles()\n  const [keyword, setKeyword] = useState(\"\")\n  const [language, setLanguage] = useState(\"bo-x-ewts\") // TODO: default value should be from the user profile or based on the latest value used\n  const [type, setType] = useState(property.expectedObjectTypes ? property.expectedObjectTypes[0].qname : \"\")\n  const [libraryURL, setLibraryURL] = useState(\"\")\n  const [uiLang, setUiLang] = useRecoilState(uiLangState)\n  const [uiLitLang, setUiLitLang] = useRecoilState(uiLitLangState)\n  const [error, setError] = useState<string>()\n  const [entities, setEntities] = useRecoilState(entitiesAtom)\n  const navigate = useNavigate()\n  const msgId = subject.qname + property.qname + idx\n  const [popupNew, setPopupNew] = useState(false)\n  const [tab, setTab] = useRecoilState(uiTabState)\n  const iframeRef = useRef<HTMLIFrameElement>(null)\n  const [canCopy, setCanCopy] = useState<{k: string, val: Value[]}[]>([])\n\n  const isRid = keyword.startsWith(\"bdr:\") || keyword.match(/^([cpgwrti]|mw|wa|was|ut|ie|pr)(\\d|eap)[^ ]*$/i)\n\n  //debug(\"lit:\",value.value,value.id,value)\n\n  /// DONE: handle bdsCopyObjectsOfProperty\n  const [toCopy, setProp] = useRecoilState(\n    toCopySelector({\n          list: property.copyObjectsOfProperty?.map((p) => ({\n            property: ns.defaultPrefixMap.qnameFromUri(p.value),\n            atom: (owner ? owner : subject).getAtomForProperty(p.uri),\n          })),\n        })\n  )\n\n  useEffect(() => {\n    if (property.copyObjectsOfProperty?.length) {\n      //debug(\"copy:\", property.copyObjectsOfProperty, value.otherData)\n      const copy = []\n      for (const prop of property.copyObjectsOfProperty) {\n        const propQname = ns.defaultPrefixMap.qnameFromUri(prop.value)\n        if (value.otherData[propQname]?.length)\n          copy.push({\n            k: propQname,\n            val: value.otherData[propQname].map(\n              (v:Record<string,string>) => new LiteralWithId(v[\"@value\"], v[\"@language\"], shapes.rdfLangString)\n            ),\n          })\n      }\n      setCanCopy(copy)\n    }\n  }, [])\n\n  //debug(\"canCopy:\", property.qname, canCopy)\n\n  //debug(\"gE:\", error, globalError)\n  useEffect(() => {\n    if (globalError && !error) setError(globalError)\n  }, [globalError])\n\n  if (!property.expectedObjectTypes) {\n    debug(property)\n    throw \"can't get the types for property \" + property.qname\n  }\n\n  // TODO close iframe when clicking anywhere else\n  const closeFrame = () => {\n    debug(\"close?\", value, isRid, libraryURL)\n    if (iframeRef.current && isRid) {\n      debug(\"if:\", iframeRef.current)\n      iframeRef.current.click()\n      const wn = iframeRef.current.contentWindow\n      if (wn)\n        wn.postMessage(\"click\", \"*\")\n    } else {\n      if (libraryURL) setLibraryURL(\"\")\n    }\n  }\n\n  //debug(\"ext:\", value.qname)\n\n  let msgHandler: null | ((ev: MessageEvent) => void) = null\n  useEffect(() => {\n    //debug(\"url:\", libraryURL)\n\n    const updateRes = (data: messagePayload) => {\n      let isTypeOk = false\n      let actual\n      if (property.expectedObjectTypes) {\n        const allow = property.expectedObjectTypes.map((t) => t.qname)\n        //if (!Array.isArray(allow)) allow = [allow]\n        actual = data[\"tmp:otherData\"][\"tmp:type\"]\n        if (!Array.isArray(actual)) actual = [actual]\n        actual = actual.map((a) => a.replace(/Product/, \"Collection\"))\n        if (actual.filter((t) => allow.includes(t)).length) isTypeOk = true\n        //debug(\"typeOk\",isTypeOk,actual,allow)\n        const displayTypes = (t: string[]) =>\n          t\n            .filter((a) => a)\n            .map((a) => a.replace(/^bdo:/, \"\"))\n            .join(\", \") // TODO: translation (ontology?)\n        if (!isTypeOk) {\n          setError(i18n.t(\"error.type\", { allow: displayTypes(allow), actual: displayTypes(actual), id: data[\"@id\"] }))\n          if (libraryURL) setLibraryURL(\"\")\n        }\n      }\n\n      if (isTypeOk) {\n        if (data[\"@id\"] && !exists(data[\"@id\"])) {\n          const newRes = new ExtRDFResourceWithLabel(\n            data[\"@id\"].replace(/bdr:/, BDR_uri),\n            {\n              ...data[\"skos:prefLabel\"]\n                ? {\n                    ...data[\"skos:prefLabel\"].reduce(\n                      (acc: Record<string, string>, l: valueLang) => ({ ...acc, [l[\"@language\"]]: l[\"@value\"] }),\n                      {}\n                    ),\n                  }\n                : {},\n            },\n            {\n              \"tmp:keyword\": { ...data[\"tmp:keyword\"] },\n              ...data[\"tmp:otherData\"],\n              ...data[\"skos:prefLabel\"] ? { \"skos:prefLabel\": data[\"skos:prefLabel\"] } : {},\n              ...data[\"skos:altLabel\"] ? { \"skos:altLabel\": data[\"skos:altLabel\"] } : {},\n            }\n          )\n          onChange(newRes, idx, false)\n          //debug(\"url?\",libraryURL)\n        } else if (isTypeOk) {\n          // TODO translation with i18n\n          if (data[\"@id\"]) setError(data[\"@id\"] + \" already selected\")\n          else throw \"no '@id' field in data\"\n          setLibraryURL(\"\")\n        } else {\n          setLibraryURL(\"\")\n        }\n      }\n    }\n\n    if (msgHandler) window.removeEventListener(\"message\", msgHandler, true)\n\n    msgHandler = (ev: MessageEvent) => {\n      try {\n        if (!window.location.href.includes(ev.origin)) {\n          //debug(\"message: \", ev, value, JSON.stringify(value))\n\n          const data = JSON.parse(ev.data) as messagePayload\n          if (data[\"tmp:propid\"] === msgId && data[\"@id\"] && data[\"tmp:notFound\"]) {\n            debug(\"notfound msg: %o %o\", msgId, data, ev, property.qname, libraryURL)\n            setLibraryURL(\"\")\n            setError(i18n.t(\"error.notF\", { RID: data[\"@id\"] }))\n          } else if (data[\"tmp:propid\"] === msgId && data[\"@id\"]) {\n            debug(\"received msg: %o %o\", msgId, data, ev, property.qname, libraryURL)\n            updateRes(data)\n            //debug(\"URL:\",libraryURL)\n          } else {\n            setLibraryURL(\"\")\n          }\n        }\n      } catch (err) {\n        debug(\"error: %o\", err)\n      }\n    }\n\n    window.addEventListener(\"message\", msgHandler, true)\n\n    return () => {\n      if (msgHandler) window.removeEventListener(\"message\", msgHandler, true)\n      //document.removeEventListener(\"click\", closeIframe)\n    }\n  }, [libraryURL])\n\n  // DONE: allow listeners for multiple properties\n  useEffect(() => {\n    if (value.otherData[\"tmp:keyword\"]) {\n      setKeyword(value.otherData[\"tmp:keyword\"][\"@value\"])\n      setLanguage(value.otherData[\"tmp:keyword\"][\"@language\"])\n    }\n  }, []) // empty array => run only once\n\n  const updateLibrary = (ev?: Event | React.FormEvent, newlang?: string, newtype?: string) => {\n    debug(\"updLib: %o\", msgId)\n    if (ev && libraryURL) {\n      setLibraryURL(\"\")\n    } else if (msgId) {\n      if (isRid) {\n        // TODO: return dates in library\n        setLibraryURL(\n          config.libraryUrl+\"/simple/\" + (!keyword.startsWith(\"bdr:\") ? \"bdr:\" : \"\") + keyword + \"?for=\" + msgId\n        )\n      } else {\n        let lang = language\n        if (newlang) lang = newlang\n        else if (!lang) lang = \"bo-x-ewts\"\n        let key = encodeURIComponent(keyword)\n        key = '\"' + key + '\"'\n        if (lang.startsWith(\"bo\")) key = key + \"~1\"\n        lang = encodeURIComponent(lang)\n        let t = type\n        if (newtype) t = newtype\n        if (!t) throw \"there should be a type here\"\n        t = t.replace(/^bdo:/, \"\")\n\n        // #529: how to find scans\n        if (t.includes(\"ImageInstance\")) t = \"Scan\"\n        else if (t.includes(\"EtextInstance\")) t = \"Etext\"\n        else if (t.includes(\"Collection\")) t = \"Product\"\n\n        // DONE move url to config + use dedicated route in library\n        // TODO get type from ontology\n        setLibraryURL(\n            config.libraryUrl+\"/simplesearch?q=\" +\n            key +\n            \"&lg=\" +\n            lang +\n            \"&t=\" +\n            t +\n            \"&for=\" +\n            msgId +\n            \"&f=provider,inc,bda:CP021\"\n        )\n      }\n    }\n  }\n\n  let dates\n  if (value.uri && value.uri !== \"tmp:uri\" && value.otherData) {\n    dates = \"\"\n\n    // TODO: switch to EDTF through eventWhen\n    const getDate = (d: Array<dateDate>) => {\n      const onY = d.filter((i) => i.onYear != undefined)\n      const nB = d.filter((i) => i.notBefore != undefined)\n      const nA = d.filter((i) => i.notAfter != undefined)\n\n      if (nB.length || nA.length) {\n        let date = \"\"\n        if (nB[0].notBefore) date = nB[0].notBefore\n        date += \"~\"\n        if (nA[0].notAfter) date += nA[0].notAfter\n        return date\n      } else if (onY.length) return onY[0].onYear\n\n      return \"\"\n    }\n\n    if (value.otherData.PersonBirth) dates += getDate(value.otherData.PersonBirth) + \" – \"\n\n    if (value.otherData.PersonDeath) {\n      if (!dates) dates = \"– \"\n      dates += getDate(value.otherData.PersonDeath)\n    }\n\n    if (dates) dates = \"(\" + dates + \")\"\n  }\n\n  // TODO: very dirty! this should be taken from the shape but this is another\n  // level of asynchronous indirection\n\n  const createAndUpdate = useCallback(\n    async (type: RDFResourceWithLabel, named = \"\") => {\n      let url = \"\"\n      url =\n        \"/new/\" +\n        // TODO: perhaps users might want to choose between different shapes?\n        config.possibleShapeRefsForType(type.node)[0].qname +\n        \"/\" +\n        (owner?.qname && owner.qname !== subject.qname ? owner.qname : subject.qname) +\n        \"/\" +\n        config.prefixMap.qnameFromUri(property?.path?.sparqlString) +\n        \"/\" +\n        idx +\n        (owner?.qname && owner.qname !== subject.qname ? \"/\" + subject.qname : \"\")\n\n      if (property.connectIDs) {\n        const newNode = await config.generateConnectedID(subject, shape, property.targetShape as shapes.NodeShape)\n        const newQname = config.prefixMap.qnameFromUri(newNode.uri)\n        //debug(\"nId:\",newId,exists(newId),exists)\n\n        // use this id only if not already in current value list\n        if (!exists(newQname)) url += \"/named/\" + (named ? named : newQname)\n      }\n\n      // add requested values from this entity as url params\n      let urlParams = \"\"\n      if (property.copyObjectsOfProperty?.length) {\n        //debug(\"tC:\",toCopy)\n        for (const kv of toCopy) {\n          if (urlParams) urlParams += \";\"\n          let val = \"\"\n          for (const l of kv.val) {\n            if (l instanceof LiteralWithId) {\n              val += \",\" + encodeURIComponent('\"' + l.value + (l.language ? '\"@' + l.language : \"\"))\n            }\n          }\n          if (val) urlParams += kv.k + val\n        }\n        if (urlParams) {\n          url += \"?copy=\" + urlParams\n          //debug(\"url:\",url)\n        }\n      }\n      return url\n    },\n    [exists, entities, owner, subject, property, toCopy]\n  )\n\n  const chooseEntity = (ent: Entity, prefLabels: Record<string, string>) => () => {\n    //debug(\"choose\",ent)\n    togglePopup()\n    const newRes = new ExtRDFResourceWithLabel(ent.subjectQname, prefLabels, {})\n    onChange(newRes, idx, false)\n  }\n\n  const togglePopup = () => {\n    setPopupNew(!popupNew)\n  }\n\n  const label = lang.ValueByLangToStrPrefLang(property.prefLabels, uiLitLang)\n\n  const textOnChange: React.ChangeEventHandler<HTMLInputElement> = (e: React.FormEvent<HTMLInputElement>) => {\n    const newValue = e.currentTarget.value\n    setKeyword(newValue)\n    if (libraryURL) updateLibrary(e)\n  }\n\n  const textOnChangeType: React.ChangeEventHandler<HTMLInputElement> = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setType(newValue)\n    if (libraryURL) updateLibrary(undefined, undefined, newValue)\n  }\n\n  const onClick: React.MouseEventHandler<HTMLButtonElement> = (e: React.MouseEvent<HTMLButtonElement>) => {\n    updateLibrary(e)\n  }\n\n  const onClickKB = (e: React.KeyboardEvent) => {\n    updateLibrary(e)\n  }\n\n  let name = (\n    <div style={{ fontSize: \"16px\" /*, borderBottom:\"1px solid #ccc\"*/ }}>\n      {lang.ValueByLangToStrPrefLang(value.prefLabels, uiLitLang) + \" \" + dates}\n    </div>\n  )\n\n  const entity = entities.filter((e) => e.subjectQname === value.qname)\n  if (entity.length) {\n    name = <LabelWithRID entity={entity[0]} />\n  }\n\n  useEffect(() => {\n    if (error) {\n      debug(\"error:\", error)\n    }\n  }, [error])\n\n  const inputRef = useRef<HTMLInputElement>()\n  const [preview, setPreview] = useState<string|null>(null)\n  useLayoutEffect(() => {\n    if (document.activeElement === inputRef.current && !isRid && keyword) {\n      const previewVal = config.previewLiteral(new rdf.Literal(keyword, language), uiLang)\n      setPreview(previewVal.value)\n      setPreview(previewVal.value)\n    }\n  })\n\n  return (\n    <React.Fragment>\n      <div\n        className={\"resSelect \" + (error ? \"error\" : \"\")}\n        style={{ position: \"relative\", ...value.uri === \"tmp:uri\" ? { width: \"100%\" } : {} }}\n      >\n        {value.uri === \"tmp:uri\" && (\n          <div\n            className={preview ? \"withPreview\" : \"\"}\n            style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"end\" }}\n          >\n            <React.Fragment>\n              {preview && (\n                <div className=\"preview-ewts\">\n                  <TextField disabled value={preview} />\n                </div>\n              )}\n              <TextField\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") onClickKB(e)\n                }}\n                onFocus={() => {\n                  if (!keyword || isRid)\n                    setPreview(null)\n                  const { value, error } = config.previewLiteral(new rdf.Literal(keyword, language), uiLang)\n                  setPreview(value)\n                }}\n                onBlur={() => setPreview(null)}\n                inputRef={inputRef}\n                //className={classes.root}\n                InputLabelProps={{ shrink: true }}\n                style={{ width: \"90%\" }}\n                value={keyword}\n                onChange={textOnChange}\n                //label={value.status === \"filled\" ? value[\"@id\"] : null}\n                placeholder={\"Search name or RID for \" + title}\n                {...(error\n                  ? {\n                      helperText: (\n                        <React.Fragment>\n                          <ErrorIcon style={{ fontSize: \"20px\", verticalAlign: \"-7px\" }} />\n                          <i>{error}</i>\n                        </React.Fragment>\n                      ),\n                      error: true,\n                    }\n                  : {})}\n                {...(!editable ? { disabled: true } : {})}\n              />\n              <LangSelect\n                value={language}\n                onChange={(lang: string) => {\n                  setLanguage(lang)\n                  debug(lang)\n                  if (libraryURL) updateLibrary(undefined, lang)\n                }}\n                {...(isRid ? { disabled: true } : { disabled: false })}\n                editable={editable}\n                error={!!error}\n                config={config}\n              />\n              {property.expectedObjectTypes?.length > 1 && (\n                <TextField\n                  select\n                  style={{ width: 100, flexShrink: 0 }}\n                  value={type}\n                  className={\"mx-2\"}\n                  onChange={textOnChangeType}\n                  label=\"Type\"\n                  {...(isRid ? { disabled: true } : {})}\n                  {...(!editable ? { disabled: true } : {})}\n                  {...(error\n                    ? {\n                        helperText: <br />,\n                        error: true,\n                      }\n                    : {})}\n                >\n                  {property.expectedObjectTypes?.map((r) => {\n                    const label = lang.ValueByLangToStrPrefLang(r.prefLabels, uiLang)\n                    return (\n                      <MenuItem key={r.qname} value={r.qname}>\n                        {label}\n                      </MenuItem>\n                    )\n                  })}\n                </TextField>\n              )}\n              <button\n                {...(!keyword || !isRid && (!language || !type) ? { disabled: true } : {})}\n                className=\"btn btn-sm btn-outline-primary ml-2 lookup btn-rouge\"\n                style={{ boxShadow: \"none\", alignSelf: \"center\", padding: \"5px 4px 4px 4px\" }}\n                onClick={onClick}\n                {...(!editable ? { disabled: true } : {})}\n              >\n                {libraryURL ? <CloseIcon /> : <LookupIcon />}\n              </button>\n              <button\n                className=\"btn btn-sm btn-outline-primary py-3 ml-2 dots btn-rouge\"\n                style={{ boxShadow: \"none\", alignSelf: \"center\" }}\n                //{...(isRid ? { disabled: true } : {})}\n                onClick={togglePopup}\n                {...(!editable ? { disabled: true } : {})}\n              >\n                <>{i18n.t(\"search.create\")}</>\n              </button>\n            </React.Fragment>\n          </div>\n        )}\n        {value.uri !== \"tmp:uri\" && (\n          <React.Fragment>\n            <div className=\"selected\">\n              {name}\n              <div style={{ fontSize: \"12px\", opacity: \"0.5\", display: \"flex\", alignItems: \"center\" }}>\n                {value.qname}\n                &nbsp;\n                <a\n                  title={i18n.t(\"search.help.preview\")}\n                  onClick={() => {\n                    if (libraryURL) setLibraryURL(\"\")\n                    else if (value.otherData[\"tmp:externalUrl\"]) setLibraryURL(value.otherData[\"tmp:externalUrl\"])\n                    else setLibraryURL(config.libraryUrl + \"/simple/\" + value.qname + \"?view=true\")\n                  }}\n                >\n                  {!libraryURL && <InfoOutlinedIcon style={{ width: \"18px\", cursor: \"pointer\" }} />}\n                  {libraryURL && <InfoIcon style={{ width: \"18px\", cursor: \"pointer\" }} />}\n                </a>\n                &nbsp;\n                <a\n                  title={i18n.t(\"search.help.open\")}\n                  href={config.libraryUrl+ \"/show/\" + value.qname}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <LaunchIcon style={{ width: \"16px\" }} />\n                </a>\n                &nbsp;\n                <Link title={i18n.t(\"search.help.edit\")} to={\"/edit/\" + value.qname}>\n                  <EditIcon style={{ width: \"16px\" }} />\n                </Link>\n                &nbsp;\n                {canCopy.length > 0 && (\n                  <span title={i18n.t(\"general.import\")}>\n                    <ContentPasteIcon\n                      style={{ width: \"17px\", cursor: \"pointer\" }}\n                      onClick={() => {\n                        setProp(canCopy)\n                        setCanCopy([])\n                      }}\n                    />\n                  </span>\n                )}\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n      {libraryURL && (\n        <div\n          className=\"row card px-3 py-3 iframe\"\n          style={{\n            position: \"absolute\",\n            zIndex: 10,\n            maxWidth: \"800px\",\n            minWidth: \"670px\",\n            ...value.uri === \"tmp:uri\"\n              ? {\n                  right: \"calc(52px)\",\n                  width: \"calc(100% - 100px)\",\n                  bottom: \"calc(100%)\",\n                }\n              : {},\n            ...value.uri !== \"tmp:uri\"\n              ? { left: \"calc(1rem)\", width: \"calc(100%)\", bottom: \"calc(100% - 0.5rem)\" }\n              : {},\n          }}\n        >\n          <iframe style={{ border: \"none\" }} height=\"400\" src={libraryURL} ref={iframeRef} />\n          <div className=\"iframe-BG\" onClick={closeFrame}></div>\n        </div>\n      )}\n      {popupNew && (\n        <div className=\"card popup-new\">\n          <div className=\"front\">\n            {entities.map((e, i) => {\n              // DONE: check type as well with property.expectedObjectTypes\n              if (\n                !exists(e?.subjectQname) &&\n                e?.subjectQname != subject.qname &&\n                e?.subjectQname != owner?.qname &&\n                property.expectedObjectTypes?.some((t) =>\n                  // DONE shapeRef is updated upon shape selection\n                  e.shapeQname?.startsWith(t.qname.replace(/^bdo:/, \"bds:\"))\n                )\n              ) {\n                //debug(\"diff ok:\",property.expectedObjectTypes,e,e.subjectQname,subject.qname,owner?.qname)\n                return (\n                  <MenuItem key={i + 1} className=\"px-0 py-0\">\n                    <LabelWithRID choose={chooseEntity} entity={e} />\n                  </MenuItem>\n                )\n              }\n            })}\n            <hr className=\"my-1\" />\n            {property.expectedObjectTypes?.map((r) => {\n              const label = lang.ValueByLangToStrPrefLang(r.prefLabels, uiLang)\n              return (\n                <MenuItem\n                  {...(r.qname === \"bdo:EtextInstance\" ? { disabled: true } : {})}\n                  key={r.qname}\n                  value={r.qname}\n                  onClick={async () => {\n                    const url = await createAndUpdate(r)\n                    //debug(\"CaU?\", url, property.qname, r.qname, createAndUpdate)\n                    navigate(url)\n                  }}\n                >\n                  {i18n.t(\"search.new\", { type: label })}\n                </MenuItem>\n              )\n            })}\n          </div>\n          <div className=\"popup-new-BG\" onClick={togglePopup}></div>\n        </div>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst LabelWithRID: FC<{ entity: Entity; choose?: (e: Entity, labels: Record<string, string>) => () => void }> = ({\n  entity,\n  choose,\n}) => {\n  const [uiLang] = useRecoilState(uiLangState)\n  const [uiLitLang] = useRecoilState(uiLitLangState)\n  const [labelValues] = useRecoilState(entity.subjectLabelState)\n  const prefLabels = RDFResource.valuesByLang(labelValues)\n  const label = lang.ValueByLangToStrPrefLang(prefLabels, uiLitLang)\n  let name =\n    label && label != \"...\" ? label : entity.subject?.lname ? entity.subject.lname : entity.subjectQname.split(\":\")[1]\n  if (!name) name = label\n\n  //debug(\"label:\",name, label, entity.subject?.lname, entity)\n\n  if (!choose) return <span style={{ fontSize: \"16px\" }}>{name}</span>\n  else\n    return (\n      <div className=\"px-3 py-1\" style={{ width: \"100%\" }} onClick={choose(entity, prefLabels)}>\n        <div className=\"label\">{name}</div>\n        <div className=\"RID\">{entity.subjectQname}</div>\n      </div>\n    )\n}\n\nexport default BUDAResourceSelector\n"],"names":["__decorateClass","ns.defaultPrefixMap","ObjectType","debug","ns.RDF","ns.SH","ns.RDFS","ns.SKOS","ns.DASH","ns.RDE","EditedEntityState","atom","shapes.rdfsLabel","shapeQname","shape","entityQname","index","replaceItemAtIndex","datatype","ns.XSD","useStyles","error","val","lang.ValueByLangToStrPrefLang","shapes.rdfLangString","props","Link","useParams","useLocation","lang","type","value","label"],"mappings":"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"}